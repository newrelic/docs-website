{
  "/docs/accounts/accounts/account-maintenance/account-email-settings": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-05-06T04:56:01Z",
      "updated_at": "2021-03-30T14:17:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.69684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " on which user model you&#x27;re on. This is because the user model has impacts on <em>account</em> structure and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Set or change password",
        "Change your password",
        "Important",
        "Reset password"
      ],
      "title": "Set or change password",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "817d8d17dca7f361429109d8364eff931a1cb392",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-03-16T13:10:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains information on New Relic password requirements. Change your password New Relic account passwords don't expire. However, users can or change their own password and other personal account information anytime. Your ability to change your password from the UI may depend on your user and organization level settings. To change your password from the UI: From one.newrelic.com, click the account dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters in length At least one letter (a-z, A-Z) At least one number (0-9), special character, or space Special characters allowed include ~ ` ! @ # $ % ^ & * ( ) _ - + = { [ } ] : ; \" ' < , > . ? / | \\. Spaces are also allowed. Important In addition to New Relic's requirements, follow your organization's guidelines for password length, use of upper or lower case letters, numbers, and special characters. Reset password If you forgot your own password or need to request a password reset, you can use New Relic's self-service options. Admins can't reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.4555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Set</em> or change password",
        "sections": "<em>Set</em> or change password",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " user and organization level <em>settings</em>. To change your password from the UI: From one.newrelic.com, click the <em>account</em> dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters"
      },
      "id": "603eb55a64441f9f8f4e889c"
    },
    {
      "sections": [
        "Default time zone setting",
        "Change your default time zone",
        "Tip",
        "Exceptions"
      ],
      "title": "Default time zone setting",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "3a7abaee77b5d140836c96007766fa8eb9109b6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting/",
      "published_at": "2021-05-05T14:59:35Z",
      "updated_at": "2021-03-11T13:31:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your personal timezone setting controls most time-related settings in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your account settings and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To change your default time zone for your New Relic account: Go to one.newrelic.com. Select the account dropdown, then select User preferences. Exceptions Some New Relic features do not rely on the time zone settings in your User preferences. The following use Coordinated Universal Time (UTC) and aren't controlled by the time zone setting: Alerts REST API v2 There may be other features where the time zone doesn't rely on your default time zone settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Default time zone <em>setting</em>",
        "sections": "Default time zone <em>setting</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": "Your personal timezone setting controls most time-related <em>settings</em> in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your <em>account</em> <em>settings</em>"
      },
      "id": "6043f38a28ccbc97e62c6090"
    }
  ],
  "/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-05-06T04:56:01Z",
      "updated_at": "2021-03-30T14:17:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.69684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " on which user model you&#x27;re on. This is because the user model has impacts on <em>account</em> structure and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Default time zone setting",
        "Change your default time zone",
        "Tip",
        "Exceptions"
      ],
      "title": "Default time zone setting",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "3a7abaee77b5d140836c96007766fa8eb9109b6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting/",
      "published_at": "2021-05-05T14:59:35Z",
      "updated_at": "2021-03-11T13:31:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your personal timezone setting controls most time-related settings in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your account settings and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To change your default time zone for your New Relic account: Go to one.newrelic.com. Select the account dropdown, then select User preferences. Exceptions Some New Relic features do not rely on the time zone settings in your User preferences. The following use Coordinated Universal Time (UTC) and aren't controlled by the time zone setting: Alerts REST API v2 There may be other features where the time zone doesn't rely on your default time zone settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Default time zone <em>setting</em>",
        "sections": "Default time zone <em>setting</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": "Your personal timezone setting controls most time-related <em>settings</em> in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your <em>account</em> <em>settings</em>"
      },
      "id": "6043f38a28ccbc97e62c6090"
    },
    {
      "sections": [
        "Change account or user name",
        "Change user name",
        "Change account name",
        "Important"
      ],
      "title": "Change account or user name",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "328b3ae3afa62555d246baee53ec49add7ad470c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-your-new-relic-account-name/",
      "published_at": "2021-05-06T04:52:48Z",
      "updated_at": "2021-03-11T13:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Change user name To change your user name: From the account dropdown, select User preferences. On the right side, click Full name. Change account name Only users on our original user model are able to change their New Relic account name at this time. To do this: From the account dropdown, select Account settings. On the right side, edit the Name field. Important If you're on our New Relic One user model and want to change your account name, contact your account representative or support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change <em>account</em> or user name",
        "sections": "Change <em>account</em> or user name",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " <em>Account</em> <em>settings</em>. On the right side, edit the Name field. Important If you&#x27;re on our New Relic One user model and want to change your <em>account</em> name, contact your <em>account</em> representative or support."
      },
      "id": "6043ce92e7b9d215e55799e4"
    }
  ],
  "/docs/accounts/accounts/account-maintenance/change-your-new-relic-account-name": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-05-06T04:56:01Z",
      "updated_at": "2021-03-30T14:17:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.69684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " on which user model you&#x27;re on. This is because the user model has impacts on <em>account</em> structure and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Set or change password",
        "Change your password",
        "Important",
        "Reset password"
      ],
      "title": "Set or change password",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "817d8d17dca7f361429109d8364eff931a1cb392",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-03-16T13:10:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains information on New Relic password requirements. Change your password New Relic account passwords don't expire. However, users can or change their own password and other personal account information anytime. Your ability to change your password from the UI may depend on your user and organization level settings. To change your password from the UI: From one.newrelic.com, click the account dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters in length At least one letter (a-z, A-Z) At least one number (0-9), special character, or space Special characters allowed include ~ ` ! @ # $ % ^ & * ( ) _ - + = { [ } ] : ; \" ' < , > . ? / | \\. Spaces are also allowed. Important In addition to New Relic's requirements, follow your organization's guidelines for password length, use of upper or lower case letters, numbers, and special characters. Reset password If you forgot your own password or need to request a password reset, you can use New Relic's self-service options. Admins can't reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.4555,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Set</em> or change password",
        "sections": "<em>Set</em> or change password",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " user and organization level <em>settings</em>. To change your password from the UI: From one.newrelic.com, click the <em>account</em> dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters"
      },
      "id": "603eb55a64441f9f8f4e889c"
    },
    {
      "sections": [
        "Default time zone setting",
        "Change your default time zone",
        "Tip",
        "Exceptions"
      ],
      "title": "Default time zone setting",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "3a7abaee77b5d140836c96007766fa8eb9109b6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting/",
      "published_at": "2021-05-05T14:59:35Z",
      "updated_at": "2021-03-11T13:31:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your personal timezone setting controls most time-related settings in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your account settings and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To change your default time zone for your New Relic account: Go to one.newrelic.com. Select the account dropdown, then select User preferences. Exceptions Some New Relic features do not rely on the time zone settings in your User preferences. The following use Coordinated Universal Time (UTC) and aren't controlled by the time zone setting: Alerts REST API v2 There may be other features where the time zone doesn't rely on your default time zone settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Default time zone <em>setting</em>",
        "sections": "Default time zone <em>setting</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": "Your personal timezone setting controls most time-related <em>settings</em> in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your <em>account</em> <em>settings</em>"
      },
      "id": "6043f38a28ccbc97e62c6090"
    }
  ],
  "/docs/accounts/accounts/account-maintenance/set-session-timeouts": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 423.77863,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "sections": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": " organizations are able to transition to this <em>pricing</em>. Our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em> plan: this is <em>based</em> on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer <em>pricing</em> plan: in that case, their users"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Trial and Lite accounts",
        "Important",
        "Trial accounts",
        "Trial lengths",
        "End of trial period",
        "Caution"
      ],
      "title": "Trial and Lite accounts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "050d5fa2eea990cf75a7d4de2c15bebd612860f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated/",
      "published_at": "2021-05-06T05:00:33Z",
      "updated_at": "2021-03-16T09:14:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This document applies to our original product-based pricing, which is no longer available for new accounts. For an explanation of pricing plans, see Overview of pricing. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. Accounts not upgraded with a subscription before the end of the trial period become Lite accounts, losing many key features and data. Trial accounts When you start a free trial, you gain access to all the features of a Pro account including full access to support. Our products allow you to view and track trends. Pro level data retention allows you to track how changes in your business, such as marketing approaches or new technology, affect trends. Trial lengths Trial lengths depend on the product: Product Trial Length Alerts 30 days APM 14 days Browser 14 days Infrastructure 30 days Insights 30 days Mobile 30 days Synthetics 14 days End of trial period Once the trial ends, your account becomes a Lite account. Lite accounts can access all of our products except Infrastructure and Insights, but lose access to most product features and support. Caution Lite accounts retain only very recent data, which could cause the loss of valuable trend data. Avoid this by subscribing before your trial ends.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 240.27249,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Trial <em>and</em> Lite <em>accounts</em>",
        "sections": "Trial <em>and</em> Lite <em>accounts</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": "Important This document applies to our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em>, which is no longer available for new <em>accounts</em>. For an explanation of <em>pricing</em> plans, see Overview of <em>pricing</em>. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. <em>Accounts</em>"
      },
      "id": "603ec29a196a67b153a83dad"
    },
    {
      "sections": [
        "Original product-based pricing and billing",
        "Important",
        "Overview of original pricing",
        "Annual vs monthly pricing plans",
        "APM and Infrastructure: Compute-unit vs host-based pricing",
        "Compute unit pricing",
        "Host-based pricing",
        "Tip",
        "How is a \"host\" defined?",
        "Prorated billing",
        "Manage subscription and billing settings",
        "View summary information",
        "View or change current subscription",
        "View usage",
        "View or update billing information"
      ],
      "title": "Original product-based pricing and billing",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "92a9a2aaacf80af45767d6f8f15283c541b2bf08",
      "image": "https://docs.newrelic.com/static/a5a6fd548a3c62e03183f13e6be6688a/77a9e/Accounts_CU-calculation_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-pricing/product-based-pricing/",
      "published_at": "2021-05-05T13:47:24Z",
      "updated_at": "2021-03-11T03:16:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc explains our original product-based pricing plan. For more on pricing and user-related changes, see Overview of changes. Overview of original pricing New Relic has two pricing plans: a newer one called New Relic One pricing, and our original pricing plan. Our original pricing plan was based on subscriptions to specific products, like APM, Mobile, and Infrastructure. If you are on this pricing plan, your users are likely on our original user model and use these original user docs. To understand more about the new pricing and user changes, see Overview of changes. For accounts on original pricing, this doc includes: Explanation of how our original pricing plan works How to manage subscription and billing settings Annual vs monthly pricing plans Here are the differences between billed-annually and billed-monthly plans: Pricing plans Details Annual (best price) New Relic charges your credit card each month for a year for a committed number of hosts or compute units. You can increase this amount at any time, and charges will adjust with the next monthly bill. Your account will automatically renew at the end of the year unless you change your subscription. Early termination, downgrade, or decrease in service: Unless your order form states otherwise, you will be charged at the level and quantity of service ordered until the end of the then-current term if you cancel or downgrade to a lower level of service or fewer hosts during your commitment year. Monthly (no commitment) New Relic charges your credit card each month for a specified number of hosts or compute units. The account Owner can change the credit card number at any time: From the New Relic UI's account dropdown, select Account settings > Subscription. Your billing will adjust with your next monthly bill. Your account automatically renews each month unless you change your subscription. You can cancel service or downgrade to a lower level of service without penalty. APM and Infrastructure: Compute-unit vs host-based pricing New Relic APM offers a choice between two pricing models: compute unit (CU) based pricing and host-based pricing. New Relic Infrastructure offers only CU-based pricing. This section shows how both options are calculated, and explains what \"host\" means in these pricing contexts: Compute unit pricing CU-based pricing is available for these New Relic products: New Relic APM (choice of either CU-based pricing or host-based pricing) New Relic Infrastructure: only CU-based pricing With CU-based pricing, your monthly price is determined by the size of the host (computing power and memory) running New Relic and the number of hours it connects to New Relic during the month. If a host is connected to New Relic at any time during an hour, that hour counts towards the CU calculation. Each host is counted separately for each New Relic account the host reports data to. For example, if you have a master account with two sub-accounts, each running applications on the same host for 3,000 CUs in a given month, the usage for the master account will be 6,000 CUs. For New Relic APM, CU-based pricing is the best choice if you have many cloud-based dynamic computing resources. For this reason, CU-based pricing is sometimes referred to as cloud pricing. CUs are calculated as follows: The maximum size of a given host (CPUs + GB RAM) is capped at 16. Examples: If a host has 2 CPU cores, 2GB RAM, and connects to New Relic for one hour (or less than one hour), it consumes 4 CUs. If a host has 2 CPU cores, 2GB RAM, and connects to New Relic for an entire month (750 hours used as standard month size), it consumes 3,000 CUs. You can purchase blocks of CUs to be consumed on a monthly basis. The total number of CUs purchased monthly is calculated by adding up the estimated CU consumption for all hosts for the month. There is no month-to-month rollover of unused CUs. Also, New Relic does not charge by JVMs, containers (such as Docker or Cloud Foundry), or application instances--it charges by the hosts running those containers or application instances. Price points vary, depending on the New Relic product and subscription level. You can view CU-based account usage from the New Relic UI. For more on product-specific pricing: see the APM pricing and Infrastructure pricing pages. Host-based pricing Tip Pricing for your New Relic APM account can be either CU-based or host-based. New Relic Infrastructure uses only CU-based pricing. With host-based pricing, New Relic charges based on the number of equivalent hosts used in a month. One equivalent host is defined as: a host connected to New Relic for 750 hours (750 hours used as standard month size). If a host is connected to New Relic at any time during an hour, that hour counts towards the host calculation. These hours can be divided across multiple hosts. For example, you might have three hosts that are each connected to New Relic for 250 hours during one month: these hours would add up to equal one equivalent host. Each host is counted separately for each New Relic account the host reports data to. For example, if you have a master account with two subaccounts, each running applications on the same single host for 750 hours in a given month, the usage for the master account will be 2 equivalent hosts. Once connected to New Relic, hosts are distinguished by their unique hostnames. A host is connected to New Relic when the language agent is active and is deployed on the host. New Relic does not charge by containers (such as Docker or Cloud Foundry), JVMs, or application instances; it charges by the hosts running those containers or application instances. New Relic APM gives you a choice between host-based pricing and CU-based pricing. Host-based pricing is ideal if you have mainly static environments, consisting of hosts you manage in your own data center. For specifics on pricing amounts, see the APM pricing page. How is a \"host\" defined? To understand how New Relic computes both host-based pricing and CU-based pricing, it's important to understand how the word host is used. A host can be one of the following: A physical machine is a hardware-based device with dedicated physical resources, including memory, processing, and storage. Each machine has its own OS which applications run on. A virtual machine (VM) is the software implementation of a physical machine that executes programs like a physical machine. One or more virtual machines can run on a physical machine. Each virtual machine has its own OS and allocated virtual machine resources such as RAM and CPU. A cloud instance is a type of virtual machine that is run in the public cloud. In this context, virtual machines and cloud instances are different from Java Virtual Machines (JVMs) and containers. For New Relic's pricing calculation purposes, a month is defined as 750 hours. Prorated billing If you upgrade your subscription partway through your billing period, you will be subject to a prorated charge for the higher level of service over the remainder of your billing period. This will be invoiced or charged to your credit card when the upgrade is submitted. You will be notified about this charge as part of the subscription change process. If you have questions, contact your New Relic account representative. If you need to report billing issues, contact New Relic's Billing Department. Manage subscription and billing settings Important Note that as of July 30 2020, we have a newer pricing plan. To learn more, see Overview of pricing. The account Owner can perform many subscription self-service functions directly from the user interface: From one.newrelic.com, select the account dropdown. Select your choice of self-service options. When making subscription changes, be sure to save any changes, agree to New Relic's Terms of Service and Supplemental Payment Terms as appropriate, and select Pay now. Optional: If you downgrade your subscription, complete New Relic's survey. Here is a summary of the available options from your account dropdown in the New Relic user interface: View summary information To view summary information about your subscription: From the account dropdown, select Account settings > Account > Summary. This includes: Account users and their roles (User, Admin, and Owner) or add-on roles Account name Subscription usage information Agent versions Billing credit card email License key Sub-accounts if applicable Subscriptions to New Relic products Tip Your account ID (which is not the same as your license key) is part of the URL after you sign in to New Relic. View or change current subscription To view or change your current subscription options: From the account dropdown, select Upgrade subscription/Change subscription. OR From the account dropdown, select Account settings > Account > Subscription. Options include: Upgrade or downgrade your pricing and subscription levels Cancel your subscription or delete your account Change your account's tax location for billing purposes If you need more help, contact your New Relic account representative, or contact New Relic's Billing Department. View usage To view your subscription usage information: From the account dropdown, select Account settings > Usage. View or update billing information To view or update your New Relic account's billing information: From the account dropdown, select Account settings > Account > Billing. Billing settings include: Account contact information, including name, organization, address, phone, email, purchase order number, etc. Billing history, including invoices and receipts Credit card or other payment method",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.27179,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "sections": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". For <em>accounts</em> on <em>original</em> <em>pricing</em>, this doc includes: Explanation of how our <em>original</em> <em>pricing</em> plan works How to manage subscription and <em>billing</em> settings Annual vs monthly <em>pricing</em> plans Here are the differences between billed-annually and billed-monthly plans: <em>Pricing</em> plans Details Annual (best <em>price</em>) New Relic"
      },
      "id": "6043f753e7b9d212085799da"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign": [
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups",
        "What's next?"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:53:57Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. From the authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 3. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Add SCIM/SSO application",
        "Set up authentication domain",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users",
        "What's next?"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your OneLogin applications. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. Set up authentication domain In New Relic's authentication domain UI, set up a new domain with SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.04755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Assign <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups",
        "What's next?"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Azure AD provides an application gallery, which includes various integrations for Azure AD, including the ones that New Relic offers. Add the New Relic SCIM/SSO application to your list of applications. Go to the Azure Active Directory admin center, and sign in if necessary. https://aad.portal.azure.com/ Click on All services in the left hand menu. In the main pane, click on Enterprise applications. Click on +New Application. Find our SCIM/SSO application by entering New Relic in the name search box, and click on the application New Relic by Organization. Click on Add. Continue with the following section to connect the New Relic SCIM/SSO application to New Relic. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.04755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration": [
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Import user groups from an identity provider using AUM"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-05-06T04:53:56Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Import user groups from an identity provider using AUM For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. Use the Organization and access UI to enable SCIM and configure SAML SSO. Configure your identity provider using one of our relevant guides:Azure AD | Okta | OneLogin. If you don't use one of those, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.06116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups",
        "What's next?"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:53:57Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. From the authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.06116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 3. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Add SCIM/SSO application",
        "Set up authentication domain",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users",
        "What's next?"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your OneLogin applications. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. Set up authentication domain In New Relic's authentication domain UI, set up a new domain with SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Assign <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration": [
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Import user groups from an identity provider using AUM"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-05-06T04:53:56Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Import user groups from an identity provider using AUM For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. Use the Organization and access UI to enable SCIM and configure SAML SSO. Configure your identity provider using one of our relevant guides:Azure AD | Okta | OneLogin. If you don't use one of those, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.06116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Add SCIM/SSO application",
        "Set up authentication domain",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users",
        "What's next?"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your OneLogin applications. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. Set up authentication domain In New Relic's authentication domain UI, set up a new domain with SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Assign <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups",
        "What's next?"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Azure AD provides an application gallery, which includes various integrations for Azure AD, including the ones that New Relic offers. Add the New Relic SCIM/SSO application to your list of applications. Go to the Azure Active Directory admin center, and sign in if necessary. https://aad.portal.azure.com/ Click on All services in the left hand menu. In the main pane, click on Enterprise applications. Click on +New Application. Find our SCIM/SSO application by entering New Relic in the name search box, and click on the application New Relic by Organization. Click on Add. Continue with the following section to connect the New Relic SCIM/SSO application to New Relic. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration": [
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Import user groups from an identity provider using AUM"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-05-06T04:53:56Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Import user groups from an identity provider using AUM For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. Use the Organization and access UI to enable SCIM and configure SAML SSO. Configure your identity provider using one of our relevant guides:Azure AD | Okta | OneLogin. If you don't use one of those, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups",
        "What's next?"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:53:57Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. From the authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 3. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "sections": [
        "Azure AD SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure connection",
        "Step 3. Configure provisioning rules",
        "Tip",
        "Step 4. Assign users and groups",
        "What's next?"
      ],
      "title": "Azure AD SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d6e7f7e95daa833451159a3db4e2c4257270b5e9",
      "image": "https://docs.newrelic.com/static/0a9a32fd5041e6e2ea37cc5f032b6910/8c557/Azure_AD_Provisioning_Attribute_Mapping_2_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/azure-ad-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Azure AD provides an application gallery, which includes various integrations for Azure AD, including the ones that New Relic offers. Add the New Relic SCIM/SSO application to your list of applications. Go to the Azure Active Directory admin center, and sign in if necessary. https://aad.portal.azure.com/ Click on All services in the left hand menu. In the main pane, click on Enterprise applications. Click on +New Application. Find our SCIM/SSO application by entering New Relic in the name search box, and click on the application New Relic by Organization. Click on Add. Continue with the following section to connect the New Relic SCIM/SSO application to New Relic. Step 2. Configure connection Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning link in the sidebar. In the main pane, click on Get started. In the Provisioning Mode pick-list, choose Automatic. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. In Azure AD's New Relic SCIM/SSO app, in the Admin credentials section, fill out the Tenant URL and Secret token fields with the values provided in New Relic's authentication domain UI. To verify you can connect to New Relic, click Test Connection. When you see a message indicating verification success, click Save. The New Relic SCIM/SSO application can now connect with New Relic. Continue with the following section to configure the provisioning rules. Step 3. Configure provisioning rules Initially, nothing is configured to be sent to New Relic. You must configure Azure AD to send changes for user creation, updates, and deactivation. Go to the Provisioning page and complete the following: Expand the Mappings section. Click Provision Azure Active Directory Users. Verify the Target Object Actions Create Update and Delete checkboxes are all checked. Verify the Attribute Mappings look correct for your environment. Each of the New Relic attributes shown in the list must receive a value. Tip Ensure that the Azure Active Directory attributes shown in the list on the left are good sources for the information to send to New Relic. In particular, not all environments set the mail attribute. If your environment does not set the mail attribute, userPrincipalName could be a good alternative. Leave the switch for Enabled set to Off until you're done with the user and group configuration in the next section. Once all configuration is ready, return to this page and set the switch to On. Click Save. Here's an example of a filled-in attribute mapping page with the default values. Your values may be configured differently depending on your situation. After saving the provisioning rules, the New Relic SCIM/SSO application is ready to provision any changes made to users assigned to the application. Continue with the following section to assign users and groups to the New Relic SCIM/SSO application. Step 4. Assign users and groups After the New Relic SCIM/SSO application configuration and the New Relic side configuration is finished, you can assign users and groups to the application. From the New Relic SCIM/SSO application page, click on Users and groups in the sidebar. Click +Add user. From the Add Assignment page, click on Users and groups, and select the appropriate users or groups that you'd like to provision. Then click Select and Assign. The selected users and groups appear on the Users and groups page, indicating that they're candidates for provisioning. Repeat the steps to add users and groups until all desired entities have been assigned to the application. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.04706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 4. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Azure AD-specific details on how to configure the New Relic Azure AD SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5c964441fcfb0378ef3"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/roles-permissions-automated-user-management": [
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Import user groups from an identity provider using AUM"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-05-06T04:53:56Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Import user groups from an identity provider using AUM For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. Use the Organization and access UI to enable SCIM and configure SAML SSO. Configure your identity provider using one of our relevant guides:Azure AD | Okta | OneLogin. If you don't use one of those, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups",
        "What's next?"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:53:57Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. From the authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 3. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Add SCIM/SSO application",
        "Set up authentication domain",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users",
        "What's next?"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your OneLogin applications. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. Set up authentication domain In New Relic's authentication domain UI, set up a new domain with SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.04706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Assign <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    }
  ],
  "/docs/accounts/accounts/automated-user-management/scim-support-automated-user-management": [
    {
      "sections": [
        "Introduction to automated user management (AUM) and single-sign on (SSO)",
        "Requirements",
        "Import user groups from an identity provider using AUM"
      ],
      "title": "Introduction to automated user management (AUM) and single-sign on (SSO)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "831a5f1137eccac9540d716302645b4e976a6332",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/automated-user-provisioning-single-sign/",
      "published_at": "2021-05-06T04:53:56Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic lets you set up automated user management (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this automated provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements and impacts: Requires Enterprise edition. User model-related requirements: This feature creates users on our New Relic One user model. To implement AUM, you must be on our New Relic One user model and have user management roles assigned. If you're on our original user model (or otherwise can't seem to implement this feature), talk to your New Relic account representative. Supports SAML 2.0 standard for single sign on (SSO). Supports SCIM 2.0 standard. Supported identity providers: Okta, Azure AD, OneLogin. For unsupported identity providers, we have a SCIM API. Notes on initial enabling of AUM: We don't currently support toggling SCIM on or off. If an authentication domain has already been set up with the source of users as Manual, you can't change it to SCIM. When first enabled, the bearer token is generated and only shown once. If you need to view a bearer token later, the only way to do this is to generate a new one, and that will invalidate the old one and any integrations using the old token. Import user groups from an identity provider using AUM For an explanation of how your identity provider groups map over to New Relic groups, see Group and role mapping. To use automated user management to import users from your identity provider: It's important to first review the requirements. Use the Organization and access UI to enable SCIM and configure SAML SSO. Configure your identity provider using one of our relevant guides:Azure AD | Okta | OneLogin. If you don't use one of those, we also have a SCIM API. Note that your users are created in New Relic as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. Recommended: Set a time zone in your identity provider. If not specified, our UI shows date/times with the UTC time zone. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). If you have issues, contact your account representative. After being provisioned, your users can click on the New Relic SCIM/SSO application tile in their identity provider to be logged into New Relic. To learn more about New Relic's roles and capabilities, see Standard roles.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.06067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "sections": "Introduction to <em>automated</em> <em>user</em> <em>management</em> (AUM) <em>and</em> single-sign on (SSO)",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "New Relic lets you set up <em>automated</em> <em>user</em> <em>management</em> (AUM), which allows you to import, update, and deactivate your New Relic users from your identity provider. Once this <em>automated</em> provisioning is complete, your users can log in to New Relic via their identity provider. Requirements Requirements"
      },
      "id": "6043d60e64441ff8f5378f37"
    },
    {
      "sections": [
        "Okta SCIM/SSO application configuration",
        "Requirements",
        "Step 1. Add SCIM/SSO application",
        "Step 2. Configure provisioning",
        "Step 3. Assign users and groups",
        "Assignments tab",
        "Push groups tab",
        "Step 4. Additional considerations",
        "Moving users between groups",
        "What's next?"
      ],
      "title": "Okta SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "7a00399a6ce11aaa2cb52046f994a80f5986c0e4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/okta-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:53:57Z",
      "updated_at": "2021-05-06T04:53:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Step 1. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your Okta applications. Go to okta.com/ and sign in with an account that has administrator permissions. From the Okta home page, click on Admin. From the Okta admin Dashboard, choose the Applications page. Click Add Application. In the search field on the Okta Add Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the New Relic by Organization page, click on Add. From the Add New Relic by Organization page, check the two Application Visibility \"Do not display...\" checkboxes and click on Done. We will make the application visible later after configuration is complete and provisioning has begun. Step 2. Configure provisioning Configure the New Relic SCIM/SSO application to automatically provision your users to New Relic. From the New Relic SCIM/SSO application page, click on the Provisioning tab. From the Integration form, click on Configure API Integration. Check the Enable API integration checkbox. In New Relic's authentication domain UI, set up a new domain with SCIM enabled. From the authentication domain UI, get the SCIM bearer token and input it in the New Relic SCIM/SSO app's API token field. Optional: click on Test API Credentials to verify a SCIM connection can be established to New Relic. If a connection can be established, a success message is displayed. If a connection was not established, re-enter the API Token and try the test again. Click Save. Note that the save process does a test of the API credentials. If a connection is not established to New Relic, the save will fail. On the newly displayed To App form, click on Edit. Check the Enable checkbox in the Create Users, Update User Attributes, and Deactivate Users sections. Click Save. Step 3. Assign users and groups After the New Relic SCIM/SSO application provisioning configuration and the New Relic side SSO configuration is finished, you can assign users to the application. Assigning users is done using two different tabs on the the New Relic SCIM/SSO application page. We recommend having your New Relic users selected on the Assignments tab and their associated groups selected on the Push Groups tab. Assignments tab From the New Relic SCIM/SSO application page, click on the Assignments tab. From the Assignments form, click on Assign. From the pop up menu, click on Assign to Groups. From the Assign ... to Groups form, click on Assign for the group you wish to assign to the application. Optional: in the Time zone field, enter the default time zone for members of the group. Members without a time zone configured, will use the group time zone. Time zone affects how date/times are shown in New Relic. Time zone is specified in IANA Time Zone database format, also known as the \"Olson\" time zone database format (e.g., \"America/Los_Angeles\"). Click on Save and Go Back. Repeat the steps to add a group until all desired groups have been assigned to the application. Click Done. Push groups tab From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, click on Push Groups. From the pop up menu, click on Find groups by name. From the Push Groups to... form, in the search field enter the first few characters of the name of the group you want to send to New Relic. Leave the Push group memberships immediately checkbox checked. Click on your group in the pop up search results list. In the Match result & push action section, No Match found should be displayed, meaning that the group does not yet exist at New Relic. Leave the selector set to Create Group and leave the default name for the group. The intent here is to have a group of the same name created at New Relic. If this is the last group you wish to send to New Relic, click on Save. Otherwise, if you have more groups to configure, click on Save & Add Another and repeat the steps to add a group. Step 4. Additional considerations In this section we discuss other important things to know when using the New Relic SCIM/SSO application. This section includes tips to work around potential issues that could cause undesired results when integrating between Okta and New Relic. Moving users between groups When moving a user between groups, you must manually synchronize the old group's membership with New Relic. This is because Okta does not send a SCIM request to remove a user from a group. So, the admin needs to push the old group's membership to New Relic manually to inform New Relic that the user is no longer a member of the old group. Here are the steps to manually synchronize a group's membership: From the New Relic SCIM/SSO application page, click on the Push Groups tab. From the Push Groups form, open the pick list on the desired group's button under the Push Status column. From the displayed pick list on the button, click Push now. This causes an immediate synchronization of the group's membership with New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.06067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Step 3. Assign <em>users</em> <em>and</em> groups",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides Okta specific details on how to configure the New Relic Okta SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f5cae7b9d2758b579a0c"
    },
    {
      "sections": [
        "OneLogin SCIM/SSO application configuration",
        "Requirements",
        "Add SCIM/SSO application",
        "Set up authentication domain",
        "Configure SCIM/SSO application",
        "Step 1. Fill in the configuration form",
        "Step 2. Fill in the rules form",
        "A rule that only uses actions",
        "Step 3. Fill in the Parameters form",
        "Step 4. Fill in the provisioning form",
        "Tip",
        "Step 5. Save your changes",
        "Assign users",
        "What's next?"
      ],
      "title": "OneLogin SCIM/SSO application configuration",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Automated user management"
      ],
      "external_id": "d298162c055490c99117f564c3ea9c2ea5dfd8d1",
      "image": "https://docs.newrelic.com/static/8f585557ea58f70d94a746e6439bf1ad/c1b63/onelogin_rules_conditions_actions.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/automated-user-management/onelogin-scimsso-application-configuration/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-05-06T04:52:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our automated user management (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM/SSO application. Requirements Before using this guide, read our AUM requirements. Add SCIM/SSO application Add the New Relic SCIM/SSO application to your OneLogin applications. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click on Administration. From the OneLogin Administration page, choose the Applications menu. From the OneLogin Applications page, click on Add App. In the search field on the OneLogin Find Applications page, enter \"New Relic by Organization\" and then click on the application when it shows in the search results. From the Add New Relic by Organization page, click on Save. Set up authentication domain In New Relic's authentication domain UI, set up a new domain with SCIM enabled. You will use values from this UI in later steps. Configure SCIM/SSO application Configuration for the New Relic SCIM/SSO application is split across several forms. This section describes the different forms that need to be configured. From the New Relic by organization application page, fill in the following forms: Step 1. Fill in the configuration form In the left pane, select Configuration and complete the following: Take the authentication domain ID and SCIM bearer token values from New Relic's authentication domain UI and input them into the appropriate app fields. Leave the API Connection disabled until all the configuration described in the following sections is completed. After completing all the configuration, enable the connection. Step 2. Fill in the rules form Configure the user groups to send to New Relic using rules. OneLogin provides this documentation which describes how to use rules to provision groups for users. Decide what type of groups to send along with your users to New Relic. If your organization is using Active Directory or LDAP, you might choose to use security groups to define your users capabilities at New Relic. Another reasonable group choice is OneLogin role. On the New Relic side, your user's groups define their capabilities. The groups that are sent with users will be mapped to New Relic capability groups. Note that at the moment, there is no way to delete a group from the OneLogin side. This is a known limitation from OneLogin. Removing or changing rules does not delete groups already sent to New Relic. If you wish to no longer use a group, removing all the users from the group will prevent it from being used at New Relic. A rule that only uses actions Here's an example rule configuration does not use any conditions. The conditions are left empty to avoid applying any filtering logic to the users. All users will be sent in this example. If you want to send only a subset of users, you need to specify conditions to select the subset. The actions describe where to retrieve the value for the group name and how to parse the value. In this example, we retrieve the group name from the OneLogin role field. The OneLogin role field only has a single value, but sometimes the source for the group name contains other fields besides group name. In other words, some sources give you a list of fields and values and only one of those fields has the value you want to use. In this case, you can insert a regular expression in with value that matches field to find and extract the value for the group name. This example uses the entire value of the For each field for the group name. Step 3. Fill in the Parameters form In the left pane, select Parameters and complete the following: Click Groups field. Check Include in User Provisioning. Click Save. Step 4. Fill in the provisioning form In the left pane, select Provisioning and complete the following: Check Enable provisioning. Under Require admin approval before this action is performed, uncheck these options: Create user Delete user Update user Tip If you do not uncheck these options, SCIM provisioning requests will not be sent until an administrator approves them. Set When users are deleted in OneLogin, or the user's app access is removed, perform the below action to Delete. Set When user accounts are suspended in OneLogin, perform the following action to Suspend. Step 5. Save your changes After you complete the above forms, click Save. Then, return to the Configuration form and enable the API connection. Assign users After New Relic SCIM/SSO application configuration is finished and New Relic side configuration is finished, you can begin to assign users to the application. Assign the New Relic SCIM/SSO application to a user. Go to the OneLogin web site and sign in with an account that has administrator permissions. From the OneLogin home page, click Administration. From the OneLogin Administration page, choose the Users menu Users item. From the OneLogin Users page, click the user you want to assign the application to. From the user's page, click Applications. From the user's application page, click the plus sign and select the \"New Relic by Organization\" application. From the Edit New Relic by Organization login for user page, enter the user's time zone in IANA Time Zone database format (also known as the Olson time zone database format) and click Save. If you're using Roles to define your New Relic capability groups, from the user's application page, click the proper role(s) for the user and then click Save User. OneLogin provisions users in near real time so almost the moment you save the user in OneLogin, the user should be ready to use at New Relic. What's next? When you're done importing users, here are some potential next steps: Users created via your identity provider start out as full users. If your organization is on New Relic One pricing, these users are billable. To convert users to free basic users, use the User management UI. After adding users, you'll want to grant them access to specific New Relic accounts, specific groups, and specific roles. To learn how to do this, see Manage users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.0468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Assign <em>users</em>",
        "tags": "<em>Automated</em> <em>user</em> <em>management</em>",
        "body": "Our <em>automated</em> <em>user</em> <em>management</em> (AUM) allows allows you to import and configure your New Relic users from your identity provider via SCIM. This guide provides OneLogin-specific details on how to configure the New Relic OneLogin SCIM&#x2F;SSO application. Requirements Before using this guide, read our AUM"
      },
      "id": "6043f34228ccbccafb2c606a"
    }
  ],
  "/docs/accounts/accounts/billing/view-or-change-account-tax-information": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-05-06T04:56:01Z",
      "updated_at": "2021-03-30T14:17:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.6968,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " on which user model you&#x27;re on. This is because the user model has impacts on <em>account</em> structure and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Set or change password",
        "Change your password",
        "Important",
        "Reset password"
      ],
      "title": "Set or change password",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "817d8d17dca7f361429109d8364eff931a1cb392",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-03-16T13:10:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains information on New Relic password requirements. Change your password New Relic account passwords don't expire. However, users can or change their own password and other personal account information anytime. Your ability to change your password from the UI may depend on your user and organization level settings. To change your password from the UI: From one.newrelic.com, click the account dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters in length At least one letter (a-z, A-Z) At least one number (0-9), special character, or space Special characters allowed include ~ ` ! @ # $ % ^ & * ( ) _ - + = { [ } ] : ; \" ' < , > . ? / | \\. Spaces are also allowed. Important In addition to New Relic's requirements, follow your organization's guidelines for password length, use of upper or lower case letters, numbers, and special characters. Reset password If you forgot your own password or need to request a password reset, you can use New Relic's self-service options. Admins can't reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.45547,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Set</em> or change password",
        "sections": "<em>Set</em> or change password",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " user and organization level <em>settings</em>. To change your password from the UI: From one.newrelic.com, click the <em>account</em> dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters"
      },
      "id": "603eb55a64441f9f8f4e889c"
    },
    {
      "sections": [
        "Default time zone setting",
        "Change your default time zone",
        "Tip",
        "Exceptions"
      ],
      "title": "Default time zone setting",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "3a7abaee77b5d140836c96007766fa8eb9109b6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting/",
      "published_at": "2021-05-05T14:59:35Z",
      "updated_at": "2021-03-11T13:31:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your personal timezone setting controls most time-related settings in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your account settings and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To change your default time zone for your New Relic account: Go to one.newrelic.com. Select the account dropdown, then select User preferences. Exceptions Some New Relic features do not rely on the time zone settings in your User preferences. The following use Coordinated Universal Time (UTC) and aren't controlled by the time zone setting: Alerts REST API v2 There may be other features where the time zone doesn't rely on your default time zone settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.1401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Default time zone <em>setting</em>",
        "sections": "Default time zone <em>setting</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": "Your personal timezone setting controls most time-related <em>settings</em> in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your <em>account</em> <em>settings</em>"
      },
      "id": "6043f38a28ccbc97e62c6090"
    }
  ],
  "/docs/accounts/accounts/data-management/drop-data-using-nerdgraph": [
    {
      "sections": [
        "Manage data retention",
        "Important",
        "Adjusting retention values",
        "Tip",
        "Retention periods",
        "Metric data rollup",
        "Key metrics reported by APM, Browser, and Mobile",
        "Metric raw data",
        "Account inheritance",
        "Copy retention values",
        "Data deletion",
        "Original pricing plan differences"
      ],
      "title": "Manage data retention",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Manage data"
      ],
      "external_id": "e118958b7653357d861067bd2cf15509267fb9b9",
      "image": "https://docs.newrelic.com/static/c8a95ab42842c39be72d4b0c914a3595/c1b63/edit_retention_settings.png",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/ingest-manage-data/manage-data/manage-data-retention/",
      "published_at": "2021-05-05T06:12:56Z",
      "updated_at": "2021-05-05T06:12:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Review and manage how long your data will be stored in the New Relic database (NRDB) on the Data retention page. This page helps you understand the sources of data that you’re storing, when they were last updated, and the length the data is stored. Retention settings range from 8 to 395 days depending on the data's source and namespace classifications in New Relic. From the Data retention page, which shows the source of data, you can click Edit settings to adjust the data retention for each source. Important This doc applies to accounts on our New Relic One pricing plan. If you're on our original product-based pricing plan, see Original data retention. Not sure which you're on? See Overview of pricing and account/user structure. Adjusting retention values You can adjust your retention periods to better support your data needs. You might reduce your contracted retention values to optimize query performance. Conversely, you might increase retention for some data types to support more granular analysis over longer periods of time, or to meet data compliance requirements. The ability to edit data retention periods differs depending on your edition: Standard edition: your data retention is fixed, and falls between 8 and 395 days (about 13 months) of retention, depending on which capabilities of the New Relic platform you’re using. The prescribed retention levels ensure that you can explore your data and experience the value of New Relic. If you need to raise some of the retention limits for your particular business needs, you can purchase additional retention. Pro or Enterprise: If after you finalize your contracted retention you realize you need to make changes, you can adjust your telemetry data retention settings yourself. Tip Reducing data retention below your contracted retention values will not reduce New Relic’s data ingest charges. Conversely, increasing retention for targeted telemetry data types should trigger a conversation with New Relic about adjusting your data ingest charges. Retention periods The following table shows the default retention settings for our New Relic One pricing plan. To adjust retention settings, you must be on a Pro or Enterprise tier. Source Event namespace Days retained APM APM 8 APM APM errors 8 Browser Browser 8 Browser Browser events 8 Browser Browser JS errors 8 Browser Browser page view timing 8 Custom events Custom events 30 Serverless Lambda 8 Serverless Lambda custom 8 Serverless Lambda spans 8 Logs Log 30 Infrastructure Infrastructure processes 8 Infrastructure Infrastructure integrations 395 (13 months) Mobile Mobile crash event trails (breadcrumb) 8 Mobile Mobile exception 8 Mobile Mobile general 8 Mobile Mobile error 8 Mobile Mobile crash 90 Mobile Mobile session 90 Synthetics Synthetics data 395 (13 months) Traces Traces 8 Metric data rollup Metric timeslice data is generated by APM (both custom metrics and out-of-the-box metrics), Mobile, and Browser agents. MTS data is aggregated first to 1-minute rollups retained for 8 days, then aggregated to 1-hour roll-ups for 90 days, with key metric data in turn being stored indefinitely. We meter on the size of the initial 1-minute rollup, not on any of the subsequent rollups. Read on to learn the key metrics by product. Key metrics reported by APM, Browser, and Mobile Here are the key metrics that are stored indefinitely. Product Key metrics APM Apdex, for app server Throughput and page views Response time, plus breakdown into tiers or categories on your app's main Overview chart Page load time, plus breakdown into segments Error rate CPU usage Memory usage Browser Apdex, for browser Browser page load time Throughput total. After 90 days, there is no breakout by browser type, and only the combined average value is available for the time range requested. Mobile Crash rate: For iOS and for Android Network throughput Network response time Network error rates Interaction traces Metric raw data Metric raw data, from APM, Prometheus remote-write API, metrics functionality of the Telemetry SDK, and integrations built on the Telemetry SDK, is handled a little differently. Raw sub-minute metric data is stored for 30 days. Beyond 30 days, 1-minute resolution roll-up events are created and retained for 13 months. As with Metric timeslice data, we meter and bill on the size of the raw ingest, not the subsequent rollups. Metric retention periods are not editable. Account inheritance For organizations that have master/sub-account structures, data retention is inherited by a master account's sub-accounts. If a sub-account has its own retention settings, those override settings inherited from the master account. Copy retention values If you have permission to edit retention settings, you can also copy retention values from one sub-account to other sub-accounts under the same master account. To do this, from within a sub-account, select the Copy settings to other accounts link, and then select the sub-accounts you want to apply the retention values to. Select the sub-accounts you want to copy retention values to. Data deletion Once telemetry data (events, metrics, logs, traces) is reported to New Relic and available for querying, that data cannot be edited or deleted. This is a purposeful design decision that optimizes New Relic's speed and performance. Data will expire after its data retention ends. Original pricing plan differences If you're on our original product-based pricing plan, you have different data retention rules. See Original data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 382.0998,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> <em>data</em> retention",
        "sections": "<em>Manage</em> <em>data</em> retention",
        "tags": "<em>Telemetry</em> <em>Data</em> <em>Platform</em>",
        "body": " contracted retention values will not reduce New Relic’s <em>data</em> <em>ingest</em> charges. Conversely, increasing retention for targeted <em>telemetry</em> <em>data</em> types should trigger a conversation with New Relic about adjusting your <em>data</em> <em>ingest</em> charges. Retention periods The following table shows the default retention settings"
      },
      "id": "603e974528ccbc3e2aeba7a5"
    },
    {
      "sections": [
        "Create metrics from other data types",
        "Create a metrics rule",
        "Step 1. Create NRQL query rule",
        "Tip",
        "Step 2. Create API request",
        "Example NerdGraph API request",
        "Example NerdGraph API response",
        "Step 3. Create a metrics rule with API request",
        "Query and chart your metrics",
        "Summary metric example",
        "Count metric example",
        "Distribution metric example",
        "Troubleshooting"
      ],
      "title": "Create metrics from other data types",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Convert data to metrics"
      ],
      "external_id": "ddfe4b76ee239e22cf5b1cc66b030416af275843",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/ingest-manage-data/convert-data-metrics/create-metrics-other-data-types/",
      "published_at": "2021-05-04T18:01:53Z",
      "updated_at": "2021-04-22T05:20:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use New Relic's metrics API service to define rules for creating metrics from your other types of data, such as events, logs, or spans. Recommendation: Before you begin, review our requirements and tips for creating rules. Create a metrics rule To create a rule for creating metrics from events, logs, or spans: Construct the metrics rule using NRQL. Construct a NerdGraph (GraphQL format) API request that contains your NRQL rule. Create the metric by making the API request. Once a metric is created, you can query and chart it using NRQL. Step 1. Create NRQL query rule The most important part of creating a metrics rule is constructing the NRQL query that defines the metric for your data from events, logs, or spans. You can create up to 10 metrics with a single NRQL query by following this procedure: Using New Relic's NRQL interface, construct a query for the metric you want to create. For example: FROM ProcessSample SELECT average(ioTotalReadBytes) WHERE nr.entityType = 'HOST' Copy Edit the query to use one of the three available metric types: summary: Use if the query's function is min, max, sum, count, or average. uniqueCount: Use if the query's function is uniqueCount. distribution: Use if the query's function is percentile or histogram. This example query uses average, so use summary: FROM ProcessSample SELECT summary (ioTotalReadBytes) WHERE nr.entityType = 'HOST' Copy This example query uses count on a non-numeric field: FROM ProcessSample SELECT count(hostname) WHERE hostname LIKE '%prod%' Copy For summary on a non-numeric field use summary(1): FROM ProcessSample SELECT summary(1) WHERE hostname LIKE '%prod%' Copy Tip For more detailed information on using these metric types in rules, see Creating metric rules: requirements and tips. Decide on the attributes you want to attach to the metric, following the limits on the cardinality of unique metric-name/attribute-value combinations. Recommendation: Run a separate query to ensure this count isn't over 50,000 for a 24-hour window. For example: FROM ProcessSample SELECT uniqueCount(awsRegion, awsAvailabilityZone, commandName) WHERE nr.entityType = 'HOST' SINCE 1 DAY AGO Copy To be able to aggregate and filter your metrics, add the attributes you want to attach to the metric using the FACET clause. For example: FROM ProcessSample SELECT summary(ioTotalReadBytes) WHERE nr.entityType = 'HOST' FACET awsRegion, awsAvailabilityZone, commandName Copy Set the name of the metric using the AS function. For example: FROM ProcessSample SELECT summary(ioTotalReadBytes) AS 'io.totalread.bytes' WHERE nr.entityType = 'HOST' FACET awsRegion, awsAvailabilityZone, commandName Copy Once your NRQL rule is complete, use it to create the API request. Step 2. Create API request After you build the NRQL rule to convert data from events, logs, or spans to metrics, continue with building the API request. You can use our NerdGraph API tool to explore the data structure and to construct and make your request. To check that the rule was created correctly, you can run a query to return that rule using its ID. For tips on querying the metrics you've created, see Query and chart your metrics. Example NerdGraph API request The following example NerdGraph API request uses the same NRQL rule from step 1. The IO Total Read Bytes Rule creates a metric named io.totalread.bytes. (The rule name can have spaces, which differs from the metric naming rules.) mutation { eventsToMetricsCreateRule(rules: { name: \"io.totalread.bytes for computeSample entities\", description:\"Created by Zach on March 27, 2019. Used by team Network.\", nrql:\"FROM ProcessSample SELECT summary(ioTotalReadBytes) AS 'io.totalread.bytes' WHERE nr.entityType = 'ComputeSample' FACET awsRegion, awsAvailabilityZone, commandName\", accountId: 123456 }) { successes { id name nrql enabled } failures { submitted { name nrql accountId } errors { reason description } } } } Copy In this request: Request elements Description mutation One of the basic API operation types. eventsToMetricsCreateRule The method being called to create a rule. rules Takes four parameters: name: The name of the rule. description: Optional. The description of the rule. We recommend you include information about who created the metric data and who will be using the data. accountId: The New Relic account ID where the events, logs, or spans live and the metrics will be created. nrql: The NRQL query that creates the rule. For more on this, see Create NRQL query. successes and submitted blocks Here you define the data returned by a successful or failed response. Available parameters for these blocks include: id (ruleId for submitted) name description nrql enabled (enabled/disabled status) accountId ruleId and accountId If a failure occurs, then the submitted ruleId and accountId will be returned along with the error reason and error description. Example NerdGraph API response Here's an example of a returned response: { \"data\": { \"eventsToMetricsCreateRule\": { \"failures\": [], \"successes\": [ { \"enabled\": true, \"id\": \"46\", \"name\": \"io.totalread.bytes for computeSample entities\", \"nrql\": \"FROM ProcessSample SELECT summary(ioTotalReadBytes) AS 'io.totalread.bytes' WHERE nr.entityType = 'ComputeSample' FACET awsRegion, awsAvailabilityZone, commandName\" } ] } } } Copy Step 3. Create a metrics rule with API request When your API request is ready, you can use the NerdGraph API to make the request, which will create the metrics. Query and chart your metrics After you create a metrics rule to convert data for your events, logs, or spans, you can view the new metric data in the New Relic UI. To view your data: Go to New Relic's NRQL query interface. Run the following query to see the name of all your metrics: SELECT uniques(metricName) FROM Metric Copy Pick the metric of interest, then run the following query to see the available attributes: SELECT * FROM Metric where metricName = 'yourMetric' Copy If you don't see expected data, follow the troubleshooting procedures. The available NRQL aggregator functions depend on the metric type you created. Here are some examples. Summary metric example If you created a summary metric type, you can use the count, sum, max, min, and average aggregator functions, as shown in the following query: SELECT count(appStartResponseTime), sum(appStartResponseTime), max(appStartResponseTime), min(appStartResponseTime), average(appStartResponseTime) FROM Metric Copy Count metric example If you created a uniqueCount metric type, you can only use the uniqueCount function, as shown in the following query: SELECT uniqueCount(playbackErrorStreamUniqueCount) * 100 / uniqueCount(streamUniqueCount) AS '% of Streams Impacted' FROM Metric Copy Distribution metric example If you created a distribution metric type, use the percentile or histogram functions, as shown in the following queries: SELECT percentile(service.responseTime, 95) FROM Metric Copy OR SELECT histogram(service.responseTime, 10, 20) FROM Metric Copy Troubleshooting If your NerdGraph call is not constructed correctly, you may receive a message like this: Cannot parse the unexpected character \"\\u201C” Copy Verify the quotes in the NerdGraph call are not smart quotes (curly quotes). Our NerdGraph API only accepts straight quotes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 226.27493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create metrics from other <em>data</em> types",
        "sections": "Create metrics from other <em>data</em> types",
        "tags": "<em>Telemetry</em> <em>Data</em> <em>Platform</em>",
        "body": "Use New Relic&#x27;s metrics API service to define rules for creating metrics from your other types of <em>data</em>, such as events, logs, or spans. Recommendation: Before you begin, review our requirements and tips for creating rules. Create a metrics rule To create a rule for creating metrics from events"
      },
      "id": "603ebfc8196a67cab0a83d96"
    },
    {
      "sections": [
        "Manage data coming into New Relic",
        "Important",
        "Data ingestion sources",
        "Set alerts for data use",
        "Adjust your data ingest"
      ],
      "title": "Manage data coming into New Relic",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Manage data"
      ],
      "external_id": "912fc28c24dafae178c9c3e08daffdc567fd9dbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/get-data-new-relic/manage-data/manage-data-coming-new-relic/",
      "published_at": "2021-05-05T06:12:57Z",
      "updated_at": "2021-03-16T18:25:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you connect your data to New Relic, we process what we receive and apply data dropping and transformation rules. Then we count the bytes needed to represent your data in a standard format, like JSON. If you're on our New Relic One pricing plan, you're charged by the number of bytes written to our database, above and beyond the standard amount that’s free. Important This doc is for accounts on our New Relic One pricing plan. If you're on our original product-based pricing plan, see Original data retention. Not sure which you're on? See Overview of pricing and account/user structure. The Data ingestion page shows your ingest rates for a period you specify on the top-right of the Data management hub. Since 30 days ago is the default setting, but you can also set a custom date span. The page shows your daily average GBs, and the total for the range you set. You can toggle between an overall ingest view and an account view to identify which of your accounts are sending the most data. The page also provides the current month-to-date, and the projected end-of-month total ingest rates. With this information, you can proactively drop data or turn off agents in order to manage ingest and, therefore, costs. If you want to take a look at how we query the data, click the ellipsis icon (just above the chart) to slide out the chart query and open it in our query builder. And If you want to drill down further into your data usage, check out the sample queries in the usage docs. From the Login drop-down, select Manage your data, and then select Data ingestion. This is the Data ingestion page with data source and account views. Data ingestion sources The Data ingestion page describes which of your data sources provide the most data on average and during specific data ranges. The sources are described here. Billable data sources Description Timeslices (1-minute) and Metric:Raw Metrics are timeslices + MetricRaw Metric group: MetricsBytes Metric timeslice data averages to one-hour periods after eight days. After 90 days, the permanent metric data continues to be stored in one-hour periods. We currently store the raw metric data for 30 days. You are only billed for the initial ingest volume. You are not billed for subsequent rollups. APM (transactions and errors) APM events Metric group: ApmEventsBytes InfraSamples:Raw Includes multiple Infrastructure events Infrastructure host data Metric group:InfraHostBytes Information related to your servers and virtual machines coming from infrastructure agents, including storage and network data Infrastructure process data stored in ProcessSample. Metric group: InfraProcessBytes Data are metrics related to each process running on the hosts running the Infrastructure agent. This feature is turned off by default. Infrastructure integrations Metric group: InfraIntegrationBytes Performance data related to applications and services, typically managed by the customer, including data related to Docker containers, Windows services, Nagios checks, and cloud integrations such as managed services in AWS, Azure, and GCP. Logging Includes logs and LogExtendedRecord Metric group: LoggingBytes Log messages longer than 4KB are split into multiple events that, when needed, are stitched together to display the original message; this reduces the size of message data. Default Custom events Metric group: CustomEventsBytes Mobile error Mobile general Breadcrumb crash event trails Mobile session Mobile exception Mobile crash Mobile events Metric group: MobileEventsBytes Tracing Metric group: TracingBytes Namespaces that contain all tracing events, including tracing spans and excluding internal tracing. Browser:EventLog Browser Browser:JSErrors PcvPerf (PageView timing) Browser events Metric group: BrowserEventsBytes Lambda Serverless Metric group: ServerlessBytes Set alerts for data use Query and alert on usage data describes how to set alerts to get notified if you're nearing data ingest limits you don't want to cross. For example, you might set an alert on logs, which can stack up quickly in an active system. Adjust your data ingest Drop data for lower retention costs and data compliance On ingest, we apply data dropping rules so you won't be charged for data that's not useful. Learn how to set additional data dropping rules yourself. Use NerdGraph to drop entire data types or drop data attributes from data types so they’re not written to NRDB. This enables you to focus on the data you want, reduces retention costs, and avoids writing sensitive data to the database. For dropping log data, see Drop data with drop filter rules. Turn off agents and integrations If you don’t need data from specific agents or integrations that you have installed, you can uninstall/delete those tools. For instructions, see the specific documentation for an agent or integration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 215.9285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> <em>data</em> coming into New Relic",
        "sections": "<em>Manage</em> <em>data</em> coming into New Relic",
        "tags": "<em>Telemetry</em> <em>Data</em> <em>Platform</em>",
        "body": " an overall <em>ingest</em> view and an account view to identify which of your accounts are sending the most <em>data</em>. The page also provides the current month-to-date, and the projected end-of-month total <em>ingest</em> rates. With this information, you can proactively drop <em>data</em> or turn off agents in order to <em>manage</em> <em>ingest</em>"
      },
      "id": "603e978228ccbc8984eba79e"
    }
  ],
  "/docs/accounts/accounts/roles-permissions/bulk-user-actions-add-delete-or-update-batches-users": [
    {
      "sections": [
        "Users and roles (original user model)",
        "Requirements",
        "Migrate users to the new account/user model",
        "View and manage users in UI",
        "Tip",
        "View pending SAML SSO users",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users and roles (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-05-04T17:32:51Z",
      "updated_at": "2021-04-21T16:18:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Migrate users to the new account/user model In April of 2021, we began allowing some New Relic organizations to migrate their original user model users to the newer New Relic One user model. This new user model offers many benefits in simplifying and improving how you manage your users' roles and access to accounts. To learn how to find out if you qualify for this and how to start, see Migrate users. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorer's Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard pricing tier includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 324.25702,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Users</em> <em>and</em> <em>roles</em> (<em>original</em> <em>user</em> model)",
        "sections": "<em>Users</em> <em>and</em> <em>roles</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " how you manage your <em>users</em>&#x27; <em>roles</em> and access to <em>accounts</em>. To learn how to find out if you qualify for this and how to start, see Migrate <em>users</em>. View and manage <em>users</em> in UI If your New Relic <em>account</em> has <em>users</em> on our <em>original</em> <em>user</em> model, you can use the <em>Users</em> and <em>roles</em> UI. To access this UI: select"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.39125,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> <em>user</em> model",
        "sections": "<em>Account</em>&#x2F;<em>user</em> model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " remain on our <em>original</em> <em>user</em> model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the <em>account</em> dropdown, and select Manage your plan. If you see <em>billing</em> information about data ingested and the number of billable <em>users</em>, you’re on the new pricing"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Event data retention (original pricing plan)",
        "Important",
        "Overview of event data retention",
        "Extend your event retention",
        "Insights Pro",
        "How number of events stored is calculated",
        "Insights Pro event overage example",
        "Disable/enable Transaction and Pageview event reporting",
        "Tip",
        "Flexible data retention",
        "How it works",
        "Manage retention via UI",
        "Master and sub-accounts",
        "Glossary",
        "Manage flexible retention via API",
        "List customizable retention event namespaces",
        "List active rules on an account",
        "Show active rule on an account/namespace pair",
        "Create a new rule",
        "Delete an existing rule",
        "Copy existing sub-account rules to other sub-accounts",
        "For more help"
      ],
      "title": "Event data retention (original pricing plan)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original data retention"
      ],
      "external_id": "76d1289aad7de08b355bb8c313f9e7a42a5779d8",
      "image": "https://docs.newrelic.com/static/3071b381c71a877c79b8c9881e57c26b/8cdda/Account_usage_flex-retention.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-data-retention/event-data-retention-original-pricing-plan/",
      "published_at": "2021-05-06T04:49:35Z",
      "updated_at": "2021-03-30T13:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. New Relic products report a wide range of event data. Different products have different data retention periods, and different ways to extend event data retention. You can customize the length of your event data retention through flexible event retention. Overview of event data retention All New Relic product subscriptions come with a certain level of data retention that governs how long different types of data are retained. One type of data governed by data retention rules is event data. Event data is available in some UI charts and tables, and also available for querying via NRQL, our querying language. There are events reported from products by default, and there are custom events: each have their own retention rules, depending on the product and subscription level. Here are some examples of how different product subscriptions can affect event data retention: Free/Lite APM subscription: default-reported events available for 1 day. No custom events available. Pro APM subscription: default-reported events available for 8 days. Custom events available for 1 day (and able to be extended with Insight Pro). To see your subscriptions, go to the Account summary page. Extend your event retention Product Method APM, Browser, and Mobile Event data retention can be extended with a paid subscription to these products (see product data retention). To extend retention of both default-reported events and custom events further, you need an Insights Pro subscription. Infrastructure Event data retention can be extended with a paid Infrastructure subscription. See Infrastructure data retention rules. Synthetics Event data retention can be extended with a paid Synthetics subscription. See Synthetics data retention rules. Custom events Custom events reported by agent APIs or the Event API: Extension requires an Insights Pro subscription. Insights Pro Important As of April 12, 2021, we are upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. A paid Insights subscription is what governs the extension of event data retention for: Our APM, Browser, Mobile, and Serverless products Custom events that come from an agent API or from the Event API Important Note that having an Insights Pro subscription doesn't require use of the Insights UI (insights.newrelic.com) to query your data: there are other querying options available. To see the data retention governed by your Insights subscription, go to: account dropdown > Account settings > Usage > Event data retention. With an Insights Pro subscription, you can use flexible retention to customize how your event data is retained. This lets you keep only the data you need, for as long as you need it. How number of events stored is calculated This is an explanation of how the number of stored events are calculated by default for an Insights Pro subscription. (Note that with flexible retention, you have more fine-grained control over the retention period.) The events stored is calculated based on 1) total events stored over time (calculated based on the events generated per week) and 2) the weeks of data retention available. This equation can be represented like this: events stored = (events generated per week) * (weeks of retention) Copy An Insights Pro subscription provides a given number of weeks of data retention as well as a given number of events over that retention period. For example: (200M transactions per week) * (4 weeks of retention) = 800M events stored in Insights (16M transactions per week) * (50 weeks of retention) = 800M events stored in Insights For Insights Pro subscriptions, data is purged based on retention window, not volume. It is deleted from the system once it's past the retention window. For example: If your Insights license is for 800 million events with a 4 week retention period, your data would start being purged after it is older than four weeks. Temporary spikes in data exceeding your subscription level will still be recorded, but consistent overage should be solved by upgrading your subscription level or decreasing data collected. For customers without an Insights Pro subscription, New Relic may throttle or downsample events to a limit of not more than than 4,000 events per host per minute. Insights Pro event overage example In this example, you have an Insights Pro subscription with a license for 800 million events over 4 weeks, a rate of 200 million events per week. You have APM Pro, Browser Pro, and Mobile Enterprise. A fifth week of data is added via your subscriptions, bumping you to a total of 1 billion events stored within your plan: If you are using 975 million events, you are not over your retention. If you are using 1.25 billion events, you are over your retention. Disable/enable Transaction and Pageview event reporting Tip Owners or Admins The Insights Data summary UI page is used to see the types of events being reported. You can also use this page to enable and disable the reporting of PageView and Transaction events. To view Data summary: Go to insights.newrelic.com > Manage data. Select the Summary tab. Note: if you disable PageView or Transaction event reporting, this can affect some New Relic UI elements. You may see some empty charts on some UI pages that rely on this data. Go to insights.newrelic.com > Manage data > Summary. From the Summary tab, select Configure data sources. Toggle the appropriate switch on or off, then save. Toggling Transaction on or off will cause reporting agents to restart themselves. For more about configuring event reporting, see Event data retention. Flexible data retention With an Insights Pro subscription, you get access to flexible retention, which lets you define how some types of event data are retained. This lets you keep only the event data you need, for as long as you need it. You can manage your flexible retention through the UI or through our GraphQL API. Requirements to use this feature: An Insights Pro subscription or equivalent trial. Applies only for events governed by an Insights Pro subscription. To use this feature, you must be an account Owner or data retention add-on manager for your account. How it works To understand how standard event data retention works, first read Event data retention. With flexible retention, you specify the data retention for applicable event namespaces across your accounts. This gives you per-event namespace control of your data. The retention that you specify for an event namespace will be shared by all the event types under that namespace. If some namespaces are not relevant to you, you can avoid collecting their event data entirely. Your retention value can’t be lower than the included retention or higher than the default retention. You can control data retention either in our UI or by API. Manage retention via UI You can control data retention either using our GraphQL API or in the UI. To do this with the UI, go to Account Settings > Usage > Data management section. Your retention changes take effect within 24 hours after updating. Tip Want a demo of how the UI works? Check out our videos for UI overview and assigning a role. Go to rpm.newrelic.com > (account dropdown) > Account settings > Usage > Data management section: you can view your current retention plans, modify them, and perform overrides, all in the UI. Master and sub-accounts When it comes to master and sub-accounts with flexible retention, be aware of the following: Feature Description Account inheritance Retention set for a master account is inherited by all sub-accounts, unless a sub-account has its own custom retention override. Switch between accounts You can toggle between your master and sub-accounts by using the Account switcher in the data retention UI. Moving sub-accounts If a sub-account is moved to another master, it will adopt the retention settings of the new master account it’s under. However, if the sub-account has its own custom retention override, it’ll persist and ignore the current retention of its master account. Copy retention values from one sub-account to other sub-accounts From within a sub-account, select Copy retentions and use that sub-account as a source or template to apply those same namespace retention values to one or more other destination or target sub-accounts. Note: Source and destination sub-accounts must all be under the same master account. Glossary To understand the terms used with flexible retention, see the following: Term Description Event namespace An event's namespace corresponds to one or more event types that share a single data retention value. For more information, see Event namespaces (types). You can also use NerdGraph to get the list of customizable event namespaces. Retention value The number (in days) that specifies how long your event data is stored. Retention rule The event namespace and retention value pair that you specify to override the current retention. Licensed retention Retention period that’s determined in weeks by your Insights Pro subscription contract. Included retention Retention period for which your data is stored but not charged under the Insights Pro subscription. For details, see the data retention details for a specific product. Paid retention Retention period for which your data is stored and is charged under the Insights Pro subscription. By default, your licensed retention determines this value but Flexible retention lets you override it. Default retention Retention period that comes out of the box. This is based on the total of included retention plus licensed retention. Manage flexible retention via API You can control data retention with either NerdGraph (our GraphQL API) or in the UI. The following API examples show how to alter data retention via the NerdGraph GraphiQL explorer. Your retention changes take effect within 24 hours after updating. List customizable retention event namespaces To list the customizable retention event names spaces for your account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { customizableRetention { eventNamespaces { namespace } } } } } } Copy List active rules on an account To list active rules on an account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRules { id deletedAt deletedById createdAt createdById retentionInDays namespace } } } } } Copy Show active rule on an account/namespace pair To show the active rule on a specific account/namespace pair, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRule(namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } } } } Copy Create a new rule To create a new rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCreateEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\", retentionInDays: 8) { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Delete an existing rule If you delete a rule applied to a sub-account, that sub-account will adopt the current retention value of its master account for the given namespace. If you delete a rule applied to a master account, the default retention value will re-apply for the given namespace. To delete an existing rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementDeleteEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Copy existing sub-account rules to other sub-accounts You can specify a sub-account to be the template or source account, and have other destination sub-accounts adopt the same namespace retention values of the source sub-account. Note: all sub-accounts must be within the same master account. To copy an existing set of retentions, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCopyRetentions( sourceAccountId: SOURCE_ACCOUNT_ID, destinationAccountIds: [DESTINATION_ACCOUNT_ID_1, DESTINATION_ACCOUNT_ID_2, DESTINATION_ACCOUNT_ID_3]) { success failure } } Copy Success and failure will return lists of destination account ids which were successful (or failed) in copying rules from the source account. For more help For details about the data retention of other products or integrations, see that specific documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.57463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Event data retention (<em>original</em> pricing plan)",
        "sections": "Master <em>and</em> sub-<em>accounts</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " overview and assigning a <em>role</em>. Go to rpm.newrelic.com &gt; (<em>account</em> dropdown) &gt; <em>Account</em> settings &gt; Usage &gt; Data management section: you can view your current retention plans, modify them, and perform overrides, all in the UI. Master and sub-<em>accounts</em> When it comes to master and sub-<em>accounts</em>"
      },
      "id": "6043f713e7b9d2ccee579a1d"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts": [
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-05-05T22:17:43Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.20488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Important",
        "Requirements",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-05-04T18:35:25Z",
      "updated_at": "2021-03-13T02:48:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature depends on your subscription level. Owner user role required Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible in your New Relic account on the Single Sign On page, such as: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.13565,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em> Owner setting up"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "New Relic Partners and SAML SSO (original user model)",
        "Important",
        "Requirements",
        "Example"
      ],
      "title": "New Relic Partners and SAML SSO (original user model) ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "394a4495fed9b03427fe45d3b44338f2eb2a388a",
      "image": "https://docs.newrelic.com/static/c55cf51d45439f41d2bce16492d74bcc/8c557/screen-saml-heirarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/new-relic-partners-saml-sso/",
      "published_at": "2021-05-05T22:17:42Z",
      "updated_at": "2021-03-13T02:23:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for New Relic partners with users on our original user model. For SSO for users on New Relic One user model, see Authentication. With Partner accounts, authentication to sign in to New Relic is controlled by the partnership. For accounts where the partnership supports SSO, users may access their New Relic UI without reauthenticating. These Partner accounts could use SAML SSO as an alternative secure method to sign in to the New Relic site. Other Partner accounts, including Heroku, AppDirect, and Microsoft Azure, do not permit direct login to New Relic. In this situation, SAML integration from the partner's site is not supported by the partner SSO. If you have questions, contact your partner representative at New Relic. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Example Your account structure and settings affect whether SAML is available and how it applies to your accounts. This example shows the hierarchy for New Relic Partner accounts with master accounts and sub-accounts. Here is an example of how accounts and sub-accounts inherit the SAML SSO configuration. Account level SAML SSO configuration Partnership The partnership level allows you to control whether accounts under the partnership can have SAML enabled. The partnership account's Owner has certain administrative functions, but a SAML configuration on this account is not inherited by other accounts in the partnership. Master accounts Master accounts have a direct, hierarchical relationship to one or more sub-accounts. Typically the SAML configuration on a master account is inherited automatically by all of its sub-accounts. Sub-accounts Sub-accounts inherit their SAML SSO configuration from their master account when the master account has SAML configured. If the master account does not have SAML configured, each sub-account may have its own configuration. For more information, see Configuring SAML with multiple accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.12592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Partners <em>and</em> <em>SAML</em> <em>SSO</em> (<em>original</em> <em>user</em> model) ",
        "sections": "New Relic Partners <em>and</em> <em>SAML</em> <em>SSO</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for New Relic partners with <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication. With Partner <em>accounts</em>, authentication to sign in to New Relic is controlled by the partnership. For <em>accounts</em> where"
      },
      "id": "6043f64b28ccbce16e2c609e"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/delete-sso-configuration": [
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-05-05T00:24:28Z",
      "updated_at": "2021-03-13T03:20:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) will not receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.14807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. As an additional security measure for <em>SAML</em> single sign-on (<em>SSO</em>) <em>accounts</em>, <em>users</em> are not added until they complete the email confirmation"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Important",
        "Requirements",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-05-04T18:35:25Z",
      "updated_at": "2021-03-13T02:48:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature depends on your subscription level. Owner user role required Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible in your New Relic account on the Single Sign On page, such as: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.13564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em> Owner setting up"
      },
      "id": "6043f3c4196a674d5f960f88"
    },
    {
      "sections": [
        "New Relic Partners and SAML SSO (original user model)",
        "Important",
        "Requirements",
        "Example"
      ],
      "title": "New Relic Partners and SAML SSO (original user model) ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "394a4495fed9b03427fe45d3b44338f2eb2a388a",
      "image": "https://docs.newrelic.com/static/c55cf51d45439f41d2bce16492d74bcc/8c557/screen-saml-heirarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/new-relic-partners-saml-sso/",
      "published_at": "2021-05-05T22:17:42Z",
      "updated_at": "2021-03-13T02:23:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for New Relic partners with users on our original user model. For SSO for users on New Relic One user model, see Authentication. With Partner accounts, authentication to sign in to New Relic is controlled by the partnership. For accounts where the partnership supports SSO, users may access their New Relic UI without reauthenticating. These Partner accounts could use SAML SSO as an alternative secure method to sign in to the New Relic site. Other Partner accounts, including Heroku, AppDirect, and Microsoft Azure, do not permit direct login to New Relic. In this situation, SAML integration from the partner's site is not supported by the partner SSO. If you have questions, contact your partner representative at New Relic. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Example Your account structure and settings affect whether SAML is available and how it applies to your accounts. This example shows the hierarchy for New Relic Partner accounts with master accounts and sub-accounts. Here is an example of how accounts and sub-accounts inherit the SAML SSO configuration. Account level SAML SSO configuration Partnership The partnership level allows you to control whether accounts under the partnership can have SAML enabled. The partnership account's Owner has certain administrative functions, but a SAML configuration on this account is not inherited by other accounts in the partnership. Master accounts Master accounts have a direct, hierarchical relationship to one or more sub-accounts. Typically the SAML configuration on a master account is inherited automatically by all of its sub-accounts. Sub-accounts Sub-accounts inherit their SAML SSO configuration from their master account when the master account has SAML configured. If the master account does not have SAML configured, each sub-account may have its own configuration. For more information, see Configuring SAML with multiple accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.12592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Partners <em>and</em> <em>SAML</em> <em>SSO</em> (<em>original</em> <em>user</em> model) ",
        "sections": "New Relic Partners <em>and</em> <em>SAML</em> <em>SSO</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for New Relic partners with <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication. With Partner <em>accounts</em>, authentication to sign in to New Relic is controlled by the partnership. For <em>accounts</em> where"
      },
      "id": "6043f64b28ccbce16e2c609e"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/maintain-sso-settings": [
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-05-05T22:17:43Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.20486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-05-05T00:24:28Z",
      "updated_at": "2021-03-13T03:20:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) will not receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.14807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. As an additional security measure for <em>SAML</em> single sign-on (<em>SSO</em>) <em>accounts</em>, <em>users</em> are not added until they complete the email confirmation"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Important",
        "Requirements",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-05-04T18:35:25Z",
      "updated_at": "2021-03-13T02:48:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature depends on your subscription level. Owner user role required Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible in your New Relic account on the Single Sign On page, such as: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.13564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em> Owner setting up"
      },
      "id": "6043f3c4196a674d5f960f88"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/new-relic-partners-saml-sso": [
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-05-05T22:17:43Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.20486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-05-05T00:24:28Z",
      "updated_at": "2021-03-13T03:20:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) will not receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.14806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. As an additional security measure for <em>SAML</em> single sign-on (<em>SSO</em>) <em>accounts</em>, <em>users</em> are not added until they complete the email confirmation"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Important",
        "Requirements",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-05-04T18:35:25Z",
      "updated_at": "2021-03-13T02:48:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature depends on your subscription level. Owner user role required Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible in your New Relic account on the Single Sign On page, such as: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.13564,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em> Owner setting up"
      },
      "id": "6043f3c4196a674d5f960f88"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/saml-service-providers": [
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-05-05T22:17:43Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.20486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-05-05T00:24:28Z",
      "updated_at": "2021-03-13T03:20:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) will not receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.14806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. As an additional security measure for <em>SAML</em> single sign-on (<em>SSO</em>) <em>accounts</em>, <em>users</em> are not added until they complete the email confirmation"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "New Relic Partners and SAML SSO (original user model)",
        "Important",
        "Requirements",
        "Example"
      ],
      "title": "New Relic Partners and SAML SSO (original user model) ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "394a4495fed9b03427fe45d3b44338f2eb2a388a",
      "image": "https://docs.newrelic.com/static/c55cf51d45439f41d2bce16492d74bcc/8c557/screen-saml-heirarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/new-relic-partners-saml-sso/",
      "published_at": "2021-05-05T22:17:42Z",
      "updated_at": "2021-03-13T02:23:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for New Relic partners with users on our original user model. For SSO for users on New Relic One user model, see Authentication. With Partner accounts, authentication to sign in to New Relic is controlled by the partnership. For accounts where the partnership supports SSO, users may access their New Relic UI without reauthenticating. These Partner accounts could use SAML SSO as an alternative secure method to sign in to the New Relic site. Other Partner accounts, including Heroku, AppDirect, and Microsoft Azure, do not permit direct login to New Relic. In this situation, SAML integration from the partner's site is not supported by the partner SSO. If you have questions, contact your partner representative at New Relic. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Example Your account structure and settings affect whether SAML is available and how it applies to your accounts. This example shows the hierarchy for New Relic Partner accounts with master accounts and sub-accounts. Here is an example of how accounts and sub-accounts inherit the SAML SSO configuration. Account level SAML SSO configuration Partnership The partnership level allows you to control whether accounts under the partnership can have SAML enabled. The partnership account's Owner has certain administrative functions, but a SAML configuration on this account is not inherited by other accounts in the partnership. Master accounts Master accounts have a direct, hierarchical relationship to one or more sub-accounts. Typically the SAML configuration on a master account is inherited automatically by all of its sub-accounts. Sub-accounts Sub-accounts inherit their SAML SSO configuration from their master account when the master account has SAML configured. If the master account does not have SAML configured, each sub-account may have its own configuration. For more information, see Configuring SAML with multiple accounts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.12592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic Partners <em>and</em> <em>SAML</em> <em>SSO</em> (<em>original</em> <em>user</em> model) ",
        "sections": "New Relic Partners <em>and</em> <em>SAML</em> <em>SSO</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for New Relic partners with <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication. With Partner <em>accounts</em>, authentication to sign in to New Relic is controlled by the partnership. For <em>accounts</em> where"
      },
      "id": "6043f64b28ccbce16e2c609e"
    }
  ],
  "/docs/accounts/accounts/saml-single-sign/set-sso": [
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-05-05T22:17:43Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.20486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-05-05T00:24:28Z",
      "updated_at": "2021-03-13T03:20:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) will not receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.14804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. As an additional security measure for <em>SAML</em> single sign-on (<em>SSO</em>) <em>accounts</em>, <em>users</em> are not added until they complete the email confirmation"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Important",
        "Requirements",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-05-04T18:35:25Z",
      "updated_at": "2021-03-13T02:48:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature depends on your subscription level. Owner user role required Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible in your New Relic account on the Single Sign On page, such as: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.13562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em> Owner setting up"
      },
      "id": "6043f3c4196a674d5f960f88"
    }
  ],
  "/docs/accounts/accounts/subscription-pricing/eligibility-guidelines-new-relic-nonprofit-program": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-05-06T04:56:01Z",
      "updated_at": "2021-03-30T14:17:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.69675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " on which user model you&#x27;re on. This is because the user model has impacts on <em>account</em> structure and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Set or change password",
        "Change your password",
        "Important",
        "Reset password"
      ],
      "title": "Set or change password",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "817d8d17dca7f361429109d8364eff931a1cb392",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-03-16T13:10:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains information on New Relic password requirements. Change your password New Relic account passwords don't expire. However, users can or change their own password and other personal account information anytime. Your ability to change your password from the UI may depend on your user and organization level settings. To change your password from the UI: From one.newrelic.com, click the account dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters in length At least one letter (a-z, A-Z) At least one number (0-9), special character, or space Special characters allowed include ~ ` ! @ # $ % ^ & * ( ) _ - + = { [ } ] : ; \" ' < , > . ? / | \\. Spaces are also allowed. Important In addition to New Relic's requirements, follow your organization's guidelines for password length, use of upper or lower case letters, numbers, and special characters. Reset password If you forgot your own password or need to request a password reset, you can use New Relic's self-service options. Admins can't reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.45544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Set</em> or change password",
        "sections": "<em>Set</em> or change password",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " user and organization level <em>settings</em>. To change your password from the UI: From one.newrelic.com, click the <em>account</em> dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters"
      },
      "id": "603eb55a64441f9f8f4e889c"
    },
    {
      "sections": [
        "Default time zone setting",
        "Change your default time zone",
        "Tip",
        "Exceptions"
      ],
      "title": "Default time zone setting",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "3a7abaee77b5d140836c96007766fa8eb9109b6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting/",
      "published_at": "2021-05-05T14:59:35Z",
      "updated_at": "2021-03-11T13:31:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your personal timezone setting controls most time-related settings in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your account settings and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To change your default time zone for your New Relic account: Go to one.newrelic.com. Select the account dropdown, then select User preferences. Exceptions Some New Relic features do not rely on the time zone settings in your User preferences. The following use Coordinated Universal Time (UTC) and aren't controlled by the time zone setting: Alerts REST API v2 There may be other features where the time zone doesn't rely on your default time zone settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14009,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Default time zone <em>setting</em>",
        "sections": "Default time zone <em>setting</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": "Your personal timezone setting controls most time-related <em>settings</em> in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your <em>account</em> <em>settings</em>"
      },
      "id": "6043f38a28ccbc97e62c6090"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/account-id": [
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 331.332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.18718,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    },
    {
      "sections": [
        "New Relic account structure"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "6d55a17040a28a28a616e9bb953214a1e2d1c0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-users/new-relic-account-structure/",
      "published_at": "2021-05-05T04:26:44Z",
      "updated_at": "2021-05-05T04:26:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some tips for understanding New Relic account/user structure: At the top level of New Relic's account hierarchy is the concept of the \"organization.\" A New Relic customer's group of related accounts are considered to be inside a single \"New Relic organization.\" For accounts with New Relic One pricing: The Standard pricing edition of Full Stack Observability allows for a single account per organization. The Pro and Enterprise editions allows master/sub-account structures within an organization. New Relic offers you a view of data from across accounts in the same organization. For more details, see Account access. You may have access to multiple New Relic accounts, with multiple associated email addresses. For more on issues related to this, see Account access. Some organizations can have master/sub-account structures. Billing-related usage is calculated at the level of the organization. This can mean that usage data may not display organization-level usage when viewed at a sub-account level.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.39954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": ", see <em>Account</em> access. You may have access to multiple New Relic <em>accounts</em>, with multiple associated email addresses. For more on issues related to this, see <em>Account</em> access. Some organizations can have master&#x2F;sub-<em>account</em> structures. <em>Billing</em>-related usage is calculated at the level of the organization. This can mean that usage data may not display organization-level usage when viewed at a sub-<em>account</em> level."
      },
      "id": "603e8947196a67511ca83d92"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/create-your-new-relic-account": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.62433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 331.332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.18718,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/downgradecancel-account": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.62408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.18706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    },
    {
      "sections": [
        "New Relic account structure"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "6d55a17040a28a28a616e9bb953214a1e2d1c0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-users/new-relic-account-structure/",
      "published_at": "2021-05-05T04:26:44Z",
      "updated_at": "2021-05-05T04:26:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some tips for understanding New Relic account/user structure: At the top level of New Relic's account hierarchy is the concept of the \"organization.\" A New Relic customer's group of related accounts are considered to be inside a single \"New Relic organization.\" For accounts with New Relic One pricing: The Standard pricing edition of Full Stack Observability allows for a single account per organization. The Pro and Enterprise editions allows master/sub-account structures within an organization. New Relic offers you a view of data from across accounts in the same organization. For more details, see Account access. You may have access to multiple New Relic accounts, with multiple associated email addresses. For more on issues related to this, see Account access. Some organizations can have master/sub-account structures. Billing-related usage is calculated at the level of the organization. This can mean that usage data may not display organization-level usage when viewed at a sub-account level.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.39944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> structure",
        "sections": "New Relic <em>account</em> structure",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": ", see <em>Account</em> access. You may have access to multiple New Relic <em>accounts</em>, with multiple associated email addresses. For more on issues related to this, see <em>Account</em> access. Some organizations can have master&#x2F;sub-<em>account</em> structures. <em>Billing</em>-related usage is calculated at the level of the organization. This can mean that usage data may not display organization-level usage when viewed at a sub-<em>account</em> level."
      },
      "id": "603e8947196a67511ca83d92"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/new-relic-license-key": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.62408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 331.3318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.18706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/accounts-billing/account-setup/troubleshoot-new-relics-password-email-address-login-problems": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 342.62387,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 331.3316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.18694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/accounts-billing/account-structure/mastersub-account-structure": [
    {
      "sections": [
        "New Relic account structure"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "6d55a17040a28a28a616e9bb953214a1e2d1c0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-users/new-relic-account-structure/",
      "published_at": "2021-05-05T04:26:44Z",
      "updated_at": "2021-05-05T04:26:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some tips for understanding New Relic account/user structure: At the top level of New Relic's account hierarchy is the concept of the \"organization.\" A New Relic customer's group of related accounts are considered to be inside a single \"New Relic organization.\" For accounts with New Relic One pricing: The Standard pricing edition of Full Stack Observability allows for a single account per organization. The Pro and Enterprise editions allows master/sub-account structures within an organization. New Relic offers you a view of data from across accounts in the same organization. For more details, see Account access. You may have access to multiple New Relic accounts, with multiple associated email addresses. For more on issues related to this, see Account access. Some organizations can have master/sub-account structures. Billing-related usage is calculated at the level of the organization. This can mean that usage data may not display organization-level usage when viewed at a sub-account level.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.98175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> <em>structure</em>",
        "sections": "New Relic <em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some tips for understanding New Relic <em>account</em>&#x2F;user <em>structure</em>: At the top level of New Relic&#x27;s <em>account</em> hierarchy is the concept of the &quot;organization.&quot; A New Relic customer&#x27;s group of related <em>accounts</em> are considered to be inside a single &quot;New Relic organization.&quot; For <em>accounts</em> with New Relic One"
      },
      "id": "603e8947196a67511ca83d92"
    },
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58446,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "New Relic One pricing and billing",
        "Important",
        "How the New Relic One pricing plan works",
        "Tip",
        "Billing and usage in the UI",
        "Billing calculation details",
        "Data usage calculation",
        "Full user count billing details",
        "Data retention",
        "Billing periods",
        "Free tier",
        "Usage plan details",
        "Query and alert on usage data",
        "Cancel or downgrade"
      ],
      "title": "New Relic One pricing and billing ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One pricing and billing"
      ],
      "external_id": "03d43f14ae24579c81b601571242aef540833c8c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-billing/new-relic-one-pricing-billing/",
      "published_at": "2021-05-05T22:20:55Z",
      "updated_at": "2021-05-05T22:20:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "An explanation of how New Relic One pricing works, and how to view and manage billing. Important This document explains the New Relic One pricing plan. If you’re on our original pricing plan, see Product-based pricing. Not sure which you're on? See Overview of pricing. How the New Relic One pricing plan works Tip To use our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Starting July 30, 2020, all of our new customers are on a pricing plan that we call New Relic One pricing. Customers on our original pricing plan are able to transition to this pricing. For New Relic One pricing, billing is based on these factors: The pricing edition (Standard, Pro, Enterprise). Higher editions give access to more account-related admin features, more support, longer data retention, and other features (learn more). The amount of data ingested. 100 GBs per month is free. $0.25 per GB ingested above that. The total number of provisioned full users (users with access to everything available at that edition). Basic users are free. Standard edition includes one full user for free, and a max of five. For Applied Intelligence, our intelligent alert/detection system: the number of incident events above the free 1000 per month. (Note that our alerting functionality is available for free and doesn't count towards this limit.) For a summary of what's included for free, see Free edition. For an overview of pricing, see our Pricing page. Keep reading for details about New Relic One pricing and billing. Billing and usage in the UI Your user role permissions determine whether you have the ability to edit billing-related settings.For users on the New Relic One user model, this requires the Billing user role. For users on the original user model, this requires an Owner or Admin role. For how to view and manage billing and usage in the UI, see Pricing and billing UI. You can also do in-depth queries of your usage data and set up alerts. Billing calculation details For accounts on New Relic One pricing, some high-level billing information is displayed in the UI. Here are some more details about how billing works: Data usage calculation One pricing factor is your ingested data. In this context, “ingested” refers to the data actually saved to your account after we apply various data trimming and data transformation rules. In other words, it’s not the size of the raw data sent to New Relic, but the size of the data that actually ends up stored. To view and manage your usage, go to the usage UI. Other calculation details: In the context of our pricing plan, a GB is defined as 1 billion bytes. Monthly data ingested is rounded down to the nearest integer. For example, if your account uses 100.9 GBs during a month, that’s counted as 100 GBs. For more on how data is ingested, see Manage data ingest. For how to query usage, see Query and alert on usage. Full user count billing details For accounts with New Relic One pricing, the monthly count of provisioned full users is one billing factor. To give an example: if you're on the Pro pricing edition and your organization has 100 full users during the month of January, you'd be billed for 100 full users for that month. A full user counts as a billable user the moment they're added to a New Relic organization (provisioned), whether or not that user has logged into or used New Relic yet. A user's user type is meant to be long-term setting determined by a user's expected New Relic duties and responsibilities. Because user type is a billing factor, we have restrictions around how often a full user can be downgraded to a basic user: a full user can downgrade to a basic user a maximum of two times in a rolling 12-month period. If a full user has been changed to a basic user two times in that 12-month period, that user won't be able to return to being a basic user until the start of the next 12-month period. To learn reasons for assigning one user type or another, see Tips on assigning user type. Other user-related billing details: You can see your full user count in the UI. The count of full users is prorated based on the start of a subscription term and/or when a user is provisioned as full user or switched to a full user. The Standard edition of the New Relic One pricing plan includes one free full user. Users with duplicate email addresses are only counted once. For organizations on our original user model, a user may be set as a basic user in one account, and as a full user in another account. In such cases, the full user status takes precedence and that user is considered a full user. For organizations that have a master/sub-account structure, the billable users are counted on the main account responsible for payment. This can mean that if you’re viewing or querying your user count when in a sub-account, you won’t see the complete user count for that organization. For how to query usage data, see Query and alert on usage. For more on user capabilities, see Users and roles. Data retention See Data retention. Billing periods For pay-as-you-go customers, billing occurs at the end of the month (UTC), and you can see this tracked in the UI. When you input your credit card and start to be charged, your end-of-month bill will take into account all activity (billable data usage and users) that occurred since the beginning of that month. For example: if you input your credit card in the middle of the month, and so far at that point your account has 200 GBs of usage for that month, that 200 GBs counts towards your end-of-month bill. For how to query user-related usage, see Query and alert on usage. Free tier If your organization is on New Relic One pricing and on the Standard pricing edition for Full Stack Observability, you can use New Relic free, forever, if you stay under the free allowed limits. Here's a summary of what Standard edition gets access to for free: A single account (Pro and Enterprise Full Stack Observability editions can have multiple accounts per organization). Up to 100 GBs of ingested data per month. One full user, and unlimited basic users. Access to alerts and Applied Intelligence (up to 1,000 Incident Intelligence events per month). To upgrade to Pro or Enterprise, or to learn more about pricing, see New Relic pricing. Usage plan details There are two New Relic One pricing usage plans: Pay-as-you-go: This plan bills at the end of each month. There are no commitments and you can cancel at any time. For details, see Usage plans. Annual pool of funds: This plan applies to some customers who have subscribed for a year or more. For details, see Usage plans. For some frequently asked questions, see Pricing FAQs. Query and alert on usage data To create detailed queries of your usage, and get notifications when you are close to hitting certain usage levels, see Query usage data. Cancel or downgrade See Downgrade account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 176.57533,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic One pricing <em>and</em> <em>billing</em> ",
        "sections": "New Relic One pricing <em>and</em> <em>billing</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " retention See Data retention. <em>Billing</em> periods For pay-as-you-go customers, <em>billing</em> occurs at the end of the month (UTC), and you can see this tracked in the UI. When you input your credit card and start to be charged, your end-of-month <em>bill</em> will take into <em>account</em> all activity (billable data usage"
      },
      "id": "6043f69a64441f7b26378eda"
    }
  ],
  "/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting": [
    {
      "sections": [
        "Introduction to account settings",
        "Pricing and billing settings",
        "New Relic One pricing UI",
        "Original pricing UI",
        "Manage users",
        "New Relic One user model",
        "Original user model",
        "Add accounts",
        "General account settings"
      ],
      "title": "Introduction to account settings",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "1dbac104fa7e60637c32a61a80b8b709f6fd84c2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings/",
      "published_at": "2021-05-06T04:56:01Z",
      "updated_at": "2021-03-30T14:17:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view and edit account-related settings, go to one.newrelic.com and in the top right corner, select the account dropdown. Keep reading for tips on how to find different kinds of account settings in the UI. Pricing and billing settings To view and edit some billing-related settings, you must be a full user. Basic users have some restrictions. How you access billing-related UI depends on which pricing plan your New Relic account is on: New Relic One pricing UI View and manage billing information based on your user model: New Relic One user model: click the account dropdown, click Administration, and click Plan and usage. From there, you can view your usage data, and view and edit billing information. The ability to manage billing requires the Billing user role, which is included in the default Admin group. Original user model: click the account dropdown and click Account settings. Billing management requires an Owner or Admin role. To learn more about how New Relic One pricing works, see Pricing. Original pricing UI If your account is on the original pricing plan, to view and edit billing details: Click the account dropdown, and click Account settings. On the right, there are details about your subscription. For more about your subscription, click Subscription. To view and edit billing details, click Billing. To learn more about original pricing, see Pricing. Manage users How you manage users depends on which user model your users are on: New Relic One user model For managing users on the New Relic One user model, see Manage users. Original user model To manage users on the original user model: from the account dropdown, click Account settings and then click Users and roles. For more on managing these users, see Original users. Add accounts How you add accounts depends on which user model you're on. This is because the user model has impacts on account structure and management. Learn more about adding accounts. General account settings For how to edit things like user preferences and email settings, see the various account settings docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 202.6967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>account</em> <em>settings</em>",
        "sections": "<em>General</em> <em>account</em> <em>settings</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " on which user model you&#x27;re on. This is because the user model has impacts on <em>account</em> structure and management. Learn more about adding <em>accounts</em>. <em>General</em> <em>account</em> <em>settings</em> For how to edit things like user preferences and email <em>settings</em>, see the various <em>account</em> <em>settings</em> docs."
      },
      "id": "6043f38a196a679ae4960f5e"
    },
    {
      "sections": [
        "Set or change password",
        "Change your password",
        "Important",
        "Reset password"
      ],
      "title": "Set or change password",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "817d8d17dca7f361429109d8364eff931a1cb392",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-03-16T13:10:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains information on New Relic password requirements. Change your password New Relic account passwords don't expire. However, users can or change their own password and other personal account information anytime. Your ability to change your password from the UI may depend on your user and organization level settings. To change your password from the UI: From one.newrelic.com, click the account dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters in length At least one letter (a-z, A-Z) At least one number (0-9), special character, or space Special characters allowed include ~ ` ! @ # $ % ^ & * ( ) _ - + = { [ } ] : ; \" ' < , > . ? / | \\. Spaces are also allowed. Important In addition to New Relic's requirements, follow your organization's guidelines for password length, use of upper or lower case letters, numbers, and special characters. Reset password If you forgot your own password or need to request a password reset, you can use New Relic's self-service options. Admins can't reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.45543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Set</em> or change password",
        "sections": "<em>Set</em> or change password",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " user and organization level <em>settings</em>. To change your password from the UI: From one.newrelic.com, click the <em>account</em> dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters"
      },
      "id": "603eb55a64441f9f8f4e889c"
    },
    {
      "sections": [
        "Change account or user name",
        "Change user name",
        "Change account name",
        "Important"
      ],
      "title": "Change account or user name",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "328b3ae3afa62555d246baee53ec49add7ad470c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-your-new-relic-account-name/",
      "published_at": "2021-05-06T04:52:48Z",
      "updated_at": "2021-03-11T13:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Change user name To change your user name: From the account dropdown, select User preferences. On the right side, click Full name. Change account name Only users on our original user model are able to change their New Relic account name at this time. To do this: From the account dropdown, select Account settings. On the right side, edit the Name field. Important If you're on our New Relic One user model and want to change your account name, contact your account representative or support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14008,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change <em>account</em> or user name",
        "sections": "Change <em>account</em> or user name",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " <em>Account</em> <em>settings</em>. On the right side, edit the Name field. Important If you&#x27;re on our New Relic One user model and want to change your <em>account</em> name, contact your <em>account</em> representative or support."
      },
      "id": "6043ce92e7b9d215e55799e4"
    }
  ],
  "/docs/accounts/accounts-billing/general-account-settings/factors-affecting-access-features-data": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.11298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "sections": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> <em>structure</em> with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    },
    {
      "sections": [
        "New Relic account structure"
      ],
      "title": "New Relic account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "6d55a17040a28a28a616e9bb953214a1e2d1c0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-users/new-relic-account-structure/",
      "published_at": "2021-05-05T04:26:44Z",
      "updated_at": "2021-05-05T04:26:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some tips for understanding New Relic account/user structure: At the top level of New Relic's account hierarchy is the concept of the \"organization.\" A New Relic customer's group of related accounts are considered to be inside a single \"New Relic organization.\" For accounts with New Relic One pricing: The Standard pricing edition of Full Stack Observability allows for a single account per organization. The Pro and Enterprise editions allows master/sub-account structures within an organization. New Relic offers you a view of data from across accounts in the same organization. For more details, see Account access. You may have access to multiple New Relic accounts, with multiple associated email addresses. For more on issues related to this, see Account access. Some organizations can have master/sub-account structures. Billing-related usage is calculated at the level of the organization. This can mean that usage data may not display organization-level usage when viewed at a sub-account level.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.98157,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>account</em> <em>structure</em>",
        "sections": "New Relic <em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some tips for understanding New Relic <em>account</em>&#x2F;user <em>structure</em>: At the top level of New Relic&#x27;s <em>account</em> hierarchy is the concept of the &quot;organization.&quot; A New Relic customer&#x27;s group of related <em>accounts</em> are considered to be inside a single &quot;New Relic organization.&quot; For <em>accounts</em> with New Relic One"
      },
      "id": "603e8947196a67511ca83d92"
    },
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    }
  ],
  "/docs/accounts/accounts-billing/general-account-settings/introduction-account-settings": [
    {
      "sections": [
        "Set or change password",
        "Change your password",
        "Important",
        "Reset password"
      ],
      "title": "Set or change password",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "817d8d17dca7f361429109d8364eff931a1cb392",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-passwords-user-preferences/",
      "published_at": "2021-05-06T04:52:58Z",
      "updated_at": "2021-03-16T13:10:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains information on New Relic password requirements. Change your password New Relic account passwords don't expire. However, users can or change their own password and other personal account information anytime. Your ability to change your password from the UI may depend on your user and organization level settings. To change your password from the UI: From one.newrelic.com, click the account dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters in length At least one letter (a-z, A-Z) At least one number (0-9), special character, or space Special characters allowed include ~ ` ! @ # $ % ^ & * ( ) _ - + = { [ } ] : ; \" ' < , > . ? / | \\. Spaces are also allowed. Important In addition to New Relic's requirements, follow your organization's guidelines for password length, use of upper or lower case letters, numbers, and special characters. Reset password If you forgot your own password or need to request a password reset, you can use New Relic's self-service options. Admins can't reset passwords for other users. If you need to reset someone else's password, get support at support.newrelic.com, or send an email to account_recovery@newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 193.45541,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Set</em> or change password",
        "sections": "<em>Set</em> or change password",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " user and organization level <em>settings</em>. To change your password from the UI: From one.newrelic.com, click the <em>account</em> dropdown and select User preferences. When creating a password, adhere to the password requirements below. Your password must meet these minimum requirements: 8 to 50 characters"
      },
      "id": "603eb55a64441f9f8f4e889c"
    },
    {
      "sections": [
        "Default time zone setting",
        "Change your default time zone",
        "Tip",
        "Exceptions"
      ],
      "title": "Default time zone setting",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "3a7abaee77b5d140836c96007766fa8eb9109b6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/general-account-settings/default-time-zone-setting/",
      "published_at": "2021-05-05T14:59:35Z",
      "updated_at": "2021-03-11T13:31:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your personal timezone setting controls most time-related settings in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your account settings and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To change your default time zone for your New Relic account: Go to one.newrelic.com. Select the account dropdown, then select User preferences. Exceptions Some New Relic features do not rely on the time zone settings in your User preferences. The following use Coordinated Universal Time (UTC) and aren't controlled by the time zone setting: Alerts REST API v2 There may be other features where the time zone doesn't rely on your default time zone settings.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Default time zone <em>setting</em>",
        "sections": "Default time zone <em>setting</em>",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": "Your personal timezone setting controls most time-related <em>settings</em> in the New Relic UI, with a few exceptions, as explained in this document. If you change your timezone setting, this may take up to 24 hours to be reflected in the UI. Change your default time zone Tip To use your <em>account</em> <em>settings</em>"
      },
      "id": "6043f38a28ccbc97e62c6090"
    },
    {
      "sections": [
        "Change account or user name",
        "Change user name",
        "Change account name",
        "Important"
      ],
      "title": "Change account or user name",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "General account settings"
      ],
      "external_id": "328b3ae3afa62555d246baee53ec49add7ad470c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/change-your-new-relic-account-name/",
      "published_at": "2021-05-06T04:52:48Z",
      "updated_at": "2021-03-11T13:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Change user name To change your user name: From the account dropdown, select User preferences. On the right side, click Full name. Change account name Only users on our original user model are able to change their New Relic account name at this time. To do this: From the account dropdown, select Account settings. On the right side, edit the Name field. Important If you're on our New Relic One user model and want to change your account name, contact your account representative or support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 191.14006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change <em>account</em> or user name",
        "sections": "Change <em>account</em> or user name",
        "tags": "<em>General</em> <em>account</em> <em>settings</em>",
        "body": " <em>Account</em> <em>settings</em>. On the right side, edit the Name field. Important If you&#x27;re on our New Relic One user model and want to change your <em>account</em> name, contact your <em>account</em> representative or support."
      },
      "id": "6043ce92e7b9d215e55799e4"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-pricing-billing/new-relic-one-pricing-billing": [
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.30963,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "sections": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " <em>Relic</em> <em>account</em>, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the <em>New</em> <em>Relic</em> <em>One</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    },
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.2915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> user groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> user model)",
        "sections": "Tutorial: Add <em>new</em> user groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> user model)",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": ", click Administration, click Organizations and access, and then click <em>Accounts</em>. Grant groups access to roles and <em>accounts</em> Groups are used to manage what your users are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;user structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    },
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Tip",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add and edit users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-05-06T03:40:32Z",
      "updated_at": "2021-05-06T03:40:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements Tip To quickly check if you can access these user management features, go to the user management UI and see what you have access to. Requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. Some capabilities require the Organization manager role and some require the Authentication domain manager role. For details, see Standard roles. Full Stack Observability edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise is required. To import users from an identity provider: Enterprise is required A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants. Important If you can't use or access these UI pages, it may be because your users are on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add and edit users To add or edit users, use the User management UI. To add users there: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 364.2237,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> manage users, groups, <em>and</em> roles",
        "sections": "Create <em>new</em> groups <em>and</em> roles",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-pricing-users/new-relic-account-structure": [
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 311.11258,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "sections": "Master&#x2F;sub-<em>account</em> <em>structure</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> <em>structure</em> with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    },
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58408,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "New Relic One pricing and billing",
        "Important",
        "How the New Relic One pricing plan works",
        "Tip",
        "Billing and usage in the UI",
        "Billing calculation details",
        "Data usage calculation",
        "Full user count billing details",
        "Data retention",
        "Billing periods",
        "Free tier",
        "Usage plan details",
        "Query and alert on usage data",
        "Cancel or downgrade"
      ],
      "title": "New Relic One pricing and billing ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One pricing and billing"
      ],
      "external_id": "03d43f14ae24579c81b601571242aef540833c8c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-billing/new-relic-one-pricing-billing/",
      "published_at": "2021-05-05T22:20:55Z",
      "updated_at": "2021-05-05T22:20:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "An explanation of how New Relic One pricing works, and how to view and manage billing. Important This document explains the New Relic One pricing plan. If you’re on our original pricing plan, see Product-based pricing. Not sure which you're on? See Overview of pricing. How the New Relic One pricing plan works Tip To use our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Starting July 30, 2020, all of our new customers are on a pricing plan that we call New Relic One pricing. Customers on our original pricing plan are able to transition to this pricing. For New Relic One pricing, billing is based on these factors: The pricing edition (Standard, Pro, Enterprise). Higher editions give access to more account-related admin features, more support, longer data retention, and other features (learn more). The amount of data ingested. 100 GBs per month is free. $0.25 per GB ingested above that. The total number of provisioned full users (users with access to everything available at that edition). Basic users are free. Standard edition includes one full user for free, and a max of five. For Applied Intelligence, our intelligent alert/detection system: the number of incident events above the free 1000 per month. (Note that our alerting functionality is available for free and doesn't count towards this limit.) For a summary of what's included for free, see Free edition. For an overview of pricing, see our Pricing page. Keep reading for details about New Relic One pricing and billing. Billing and usage in the UI Your user role permissions determine whether you have the ability to edit billing-related settings.For users on the New Relic One user model, this requires the Billing user role. For users on the original user model, this requires an Owner or Admin role. For how to view and manage billing and usage in the UI, see Pricing and billing UI. You can also do in-depth queries of your usage data and set up alerts. Billing calculation details For accounts on New Relic One pricing, some high-level billing information is displayed in the UI. Here are some more details about how billing works: Data usage calculation One pricing factor is your ingested data. In this context, “ingested” refers to the data actually saved to your account after we apply various data trimming and data transformation rules. In other words, it’s not the size of the raw data sent to New Relic, but the size of the data that actually ends up stored. To view and manage your usage, go to the usage UI. Other calculation details: In the context of our pricing plan, a GB is defined as 1 billion bytes. Monthly data ingested is rounded down to the nearest integer. For example, if your account uses 100.9 GBs during a month, that’s counted as 100 GBs. For more on how data is ingested, see Manage data ingest. For how to query usage, see Query and alert on usage. Full user count billing details For accounts with New Relic One pricing, the monthly count of provisioned full users is one billing factor. To give an example: if you're on the Pro pricing edition and your organization has 100 full users during the month of January, you'd be billed for 100 full users for that month. A full user counts as a billable user the moment they're added to a New Relic organization (provisioned), whether or not that user has logged into or used New Relic yet. A user's user type is meant to be long-term setting determined by a user's expected New Relic duties and responsibilities. Because user type is a billing factor, we have restrictions around how often a full user can be downgraded to a basic user: a full user can downgrade to a basic user a maximum of two times in a rolling 12-month period. If a full user has been changed to a basic user two times in that 12-month period, that user won't be able to return to being a basic user until the start of the next 12-month period. To learn reasons for assigning one user type or another, see Tips on assigning user type. Other user-related billing details: You can see your full user count in the UI. The count of full users is prorated based on the start of a subscription term and/or when a user is provisioned as full user or switched to a full user. The Standard edition of the New Relic One pricing plan includes one free full user. Users with duplicate email addresses are only counted once. For organizations on our original user model, a user may be set as a basic user in one account, and as a full user in another account. In such cases, the full user status takes precedence and that user is considered a full user. For organizations that have a master/sub-account structure, the billable users are counted on the main account responsible for payment. This can mean that if you’re viewing or querying your user count when in a sub-account, you won’t see the complete user count for that organization. For how to query usage data, see Query and alert on usage. For more on user capabilities, see Users and roles. Data retention See Data retention. Billing periods For pay-as-you-go customers, billing occurs at the end of the month (UTC), and you can see this tracked in the UI. When you input your credit card and start to be charged, your end-of-month bill will take into account all activity (billable data usage and users) that occurred since the beginning of that month. For example: if you input your credit card in the middle of the month, and so far at that point your account has 200 GBs of usage for that month, that 200 GBs counts towards your end-of-month bill. For how to query user-related usage, see Query and alert on usage. Free tier If your organization is on New Relic One pricing and on the Standard pricing edition for Full Stack Observability, you can use New Relic free, forever, if you stay under the free allowed limits. Here's a summary of what Standard edition gets access to for free: A single account (Pro and Enterprise Full Stack Observability editions can have multiple accounts per organization). Up to 100 GBs of ingested data per month. One full user, and unlimited basic users. Access to alerts and Applied Intelligence (up to 1,000 Incident Intelligence events per month). To upgrade to Pro or Enterprise, or to learn more about pricing, see New Relic pricing. Usage plan details There are two New Relic One pricing usage plans: Pay-as-you-go: This plan bills at the end of each month. There are no commitments and you can cancel at any time. For details, see Usage plans. Annual pool of funds: This plan applies to some customers who have subscribed for a year or more. For details, see Usage plans. For some frequently asked questions, see Pricing FAQs. Query and alert on usage data To create detailed queries of your usage, and get notifications when you are close to hitting certain usage levels, see Query usage data. Cancel or downgrade See Downgrade account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 176.57498,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic One pricing <em>and</em> <em>billing</em> ",
        "sections": "New Relic One pricing <em>and</em> <em>billing</em>",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " retention See Data retention. <em>Billing</em> periods For pay-as-you-go customers, <em>billing</em> occurs at the end of the month (UTC), and you can see this tracked in the UI. When you input your credit card and start to be charged, your end-of-month <em>bill</em> will take into <em>account</em> all activity (billable data usage"
      },
      "id": "6043f69a64441f7b26378eda"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-pricing-users/usage-queries-alerts": [
    {
      "sections": [
        "New Relic One pricing and billing",
        "Important",
        "How the New Relic One pricing plan works",
        "Tip",
        "Billing and usage in the UI",
        "Billing calculation details",
        "Data usage calculation",
        "Full user count billing details",
        "Data retention",
        "Billing periods",
        "Free tier",
        "Usage plan details",
        "Query and alert on usage data",
        "Cancel or downgrade"
      ],
      "title": "New Relic One pricing and billing ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One pricing and billing"
      ],
      "external_id": "03d43f14ae24579c81b601571242aef540833c8c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-pricing-billing/new-relic-one-pricing-billing/",
      "published_at": "2021-05-05T22:20:55Z",
      "updated_at": "2021-05-05T22:20:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "An explanation of how New Relic One pricing works, and how to view and manage billing. Important This document explains the New Relic One pricing plan. If you’re on our original pricing plan, see Product-based pricing. Not sure which you're on? See Overview of pricing. How the New Relic One pricing plan works Tip To use our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Starting July 30, 2020, all of our new customers are on a pricing plan that we call New Relic One pricing. Customers on our original pricing plan are able to transition to this pricing. For New Relic One pricing, billing is based on these factors: The pricing edition (Standard, Pro, Enterprise). Higher editions give access to more account-related admin features, more support, longer data retention, and other features (learn more). The amount of data ingested. 100 GBs per month is free. $0.25 per GB ingested above that. The total number of provisioned full users (users with access to everything available at that edition). Basic users are free. Standard edition includes one full user for free, and a max of five. For Applied Intelligence, our intelligent alert/detection system: the number of incident events above the free 1000 per month. (Note that our alerting functionality is available for free and doesn't count towards this limit.) For a summary of what's included for free, see Free edition. For an overview of pricing, see our Pricing page. Keep reading for details about New Relic One pricing and billing. Billing and usage in the UI Your user role permissions determine whether you have the ability to edit billing-related settings.For users on the New Relic One user model, this requires the Billing user role. For users on the original user model, this requires an Owner or Admin role. For how to view and manage billing and usage in the UI, see Pricing and billing UI. You can also do in-depth queries of your usage data and set up alerts. Billing calculation details For accounts on New Relic One pricing, some high-level billing information is displayed in the UI. Here are some more details about how billing works: Data usage calculation One pricing factor is your ingested data. In this context, “ingested” refers to the data actually saved to your account after we apply various data trimming and data transformation rules. In other words, it’s not the size of the raw data sent to New Relic, but the size of the data that actually ends up stored. To view and manage your usage, go to the usage UI. Other calculation details: In the context of our pricing plan, a GB is defined as 1 billion bytes. Monthly data ingested is rounded down to the nearest integer. For example, if your account uses 100.9 GBs during a month, that’s counted as 100 GBs. For more on how data is ingested, see Manage data ingest. For how to query usage, see Query and alert on usage. Full user count billing details For accounts with New Relic One pricing, the monthly count of provisioned full users is one billing factor. To give an example: if you're on the Pro pricing edition and your organization has 100 full users during the month of January, you'd be billed for 100 full users for that month. A full user counts as a billable user the moment they're added to a New Relic organization (provisioned), whether or not that user has logged into or used New Relic yet. A user's user type is meant to be long-term setting determined by a user's expected New Relic duties and responsibilities. Because user type is a billing factor, we have restrictions around how often a full user can be downgraded to a basic user: a full user can downgrade to a basic user a maximum of two times in a rolling 12-month period. If a full user has been changed to a basic user two times in that 12-month period, that user won't be able to return to being a basic user until the start of the next 12-month period. To learn reasons for assigning one user type or another, see Tips on assigning user type. Other user-related billing details: You can see your full user count in the UI. The count of full users is prorated based on the start of a subscription term and/or when a user is provisioned as full user or switched to a full user. The Standard edition of the New Relic One pricing plan includes one free full user. Users with duplicate email addresses are only counted once. For organizations on our original user model, a user may be set as a basic user in one account, and as a full user in another account. In such cases, the full user status takes precedence and that user is considered a full user. For organizations that have a master/sub-account structure, the billable users are counted on the main account responsible for payment. This can mean that if you’re viewing or querying your user count when in a sub-account, you won’t see the complete user count for that organization. For how to query usage data, see Query and alert on usage. For more on user capabilities, see Users and roles. Data retention See Data retention. Billing periods For pay-as-you-go customers, billing occurs at the end of the month (UTC), and you can see this tracked in the UI. When you input your credit card and start to be charged, your end-of-month bill will take into account all activity (billable data usage and users) that occurred since the beginning of that month. For example: if you input your credit card in the middle of the month, and so far at that point your account has 200 GBs of usage for that month, that 200 GBs counts towards your end-of-month bill. For how to query user-related usage, see Query and alert on usage. Free tier If your organization is on New Relic One pricing and on the Standard pricing edition for Full Stack Observability, you can use New Relic free, forever, if you stay under the free allowed limits. Here's a summary of what Standard edition gets access to for free: A single account (Pro and Enterprise Full Stack Observability editions can have multiple accounts per organization). Up to 100 GBs of ingested data per month. One full user, and unlimited basic users. Access to alerts and Applied Intelligence (up to 1,000 Incident Intelligence events per month). To upgrade to Pro or Enterprise, or to learn more about pricing, see New Relic pricing. Usage plan details There are two New Relic One pricing usage plans: Pay-as-you-go: This plan bills at the end of each month. There are no commitments and you can cancel at any time. For details, see Usage plans. Annual pool of funds: This plan applies to some customers who have subscribed for a year or more. For details, see Usage plans. For some frequently asked questions, see Pricing FAQs. Query and alert on usage data To create detailed queries of your usage, and get notifications when you are close to hitting certain usage levels, see Query usage data. Cancel or downgrade See Downgrade account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 635.81946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em> ",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "body": " <em>pricing</em>. Customers on our original <em>pricing</em> plan are able to transition to this <em>pricing</em>. For <em>New</em> <em>Relic</em> <em>One</em> <em>pricing</em>, <em>billing</em> is based on these factors: The <em>pricing</em> edition (Standard, Pro, Enterprise). Higher editions give access to more <em>account</em>-related admin features, more support, longer data retention"
      },
      "id": "6043f69a64441f7b26378eda"
    },
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.3094,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "sections": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": " <em>Relic</em> <em>account</em>, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the <em>New</em> <em>Relic</em> <em>One</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    },
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.29126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> user groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> user model)",
        "sections": "Tutorial: Add <em>new</em> user groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> user model)",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": ", click Administration, click Organizations and access, and then click <em>Accounts</em>. Grant groups access to roles and <em>accounts</em> Groups are used to manage what your users are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;user structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles": [
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 682.15247,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "sections": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": ", click Administration, click Organizations and access, and then click <em>Accounts</em>. Grant groups access to roles and <em>accounts</em> Groups are used to manage what your users are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    },
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 676.1293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "sections": "Source of <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "Important This doc is for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model. For managing users on our original <em>user</em> model, see Original users. Learn about <em>user</em> models. To manage their users, <em>New</em> <em>Relic</em> organizations can configure &quot;authentication domains,&quot; which control how users are added to a <em>New</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    },
    {
      "sections": [
        "New Relic One user model: Understand the user structure",
        "Important",
        "Overview",
        "User type: basic and full",
        "Compare full vs basic capabilities",
        "Tips on choosing user type",
        "Understand user-related billing",
        "Default groups: Admin and User",
        "Relationship between user type, roles, and groups",
        "Roles and capabilities",
        "Standard (default) roles",
        "Capabilities",
        "Manage users",
        "2020 user model changes"
      ],
      "title": "New Relic One user model: Understand the user structure ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "169383c2678ce973404db07195b2dee6eda9163d",
      "image": "https://docs.newrelic.com/static/565d4ebddf52a4592c594032696516b9/c1b63/New-Relic-capabilities-UI-screenshot.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/",
      "published_at": "2021-05-05T03:59:35Z",
      "updated_at": "2021-05-05T03:59:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In mid-2020, New Relic released a newer user model, referred to as the New Relic One user model. Important If you had a New Relic organization created before July 30 2020 and you haven't gone through a user migration process, your users are likely on our original user model. For more on this, see Pricing and user model changes. Overview This doc will explain the structure of the New Relic One user model, including: User type (basic user vs full user) Default user groups User roles and capabilities For how to add and manage users in the UI, see User management. User type: basic and full Important This section is for users on our New Relic One user model. If you're on our original user model, see Original users. The user type (basic user or full user) determines whether a user has access to our Full Stack Observability features. A user's type is something you set long-term based on that user's expected New Relic responsibilities. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. Basic user. Details: These users are free and have access to a wide range of features, including running queries of data, making custom charts and dashboards, and setting up alerts. Unlike full users, they do not have access to our Full-Stack Observability features and some advanced Applied Intelligence features (for a comparison of abilities, see Capabilities). No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Basic users will see prompts for upgrading to a full user when they attempt to access unavailable features. For details, see Upgrade. Full user. Details: Full users have access to our Full-Stack Observability features, which include curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, synthetic monitors, access to New Relic One apps, and more. For details, see Capabilities. Standard edition includes one free full user and up to five total full users. A full user can downgrade to a basic user twice in a 12-month period. Learn more about basic user versus full user differences: Compare full vs basic capabilities Below is a table comparing what basic users and full users can do. In short: basic users have access to our Telemetry Data Platform and some Applied Intelligence features, while full users have theoretical access to all features (dependent on any group-related restrictions). Features Full user Basic user Full-Stack Observability (Curated UI experiences) Application performance monitoring (APM) UI Infrastructure monitoring UI Digital Experience Monitoring UI (browser, mobile, synthetics) Serverless monitoring UI Logs in context with other UI experiences Synthetics checks Assorted curated UI experiences (distributed tracing, Kubernetes cluster explorer, workloads, etc.) Infinite Tracing (Pro and Enterprise) Access to New Relic One apps Can build apps but can't access other apps Applied Intelligence Automatic anomaly detection Correlated alerts and events Anomaly/alert analysis Root cause details in issues Telemetry Data Platform Data ingest from any source (our agents, integrations, and APIs) Query your data Create custom charts and dashboards (not New Relic-built) Alerts and notifications Our APIs, including NerdGraph (GraphQL) (with some restrictions) Logs UI Build New Relic One apps (but cannot access other apps) Encryption at rest Standard data retention Security and compliance Data management Note that your Full Stack Observability edition will also affect what features you have access to. For accounts on New Relic One pricing, learn more about user-related billing calculations. Tips on choosing user type A user's type (basic user vs full user) is meant to be a long-term assignment, based on the New Relic responsibilities that user is expected to perform. A full user can be downgraded to a basic user only twice in one year. Below are tips for why you'd choose full user versus basic user. Reasons to make someone a full user: They play a key role in the development, testing, deployment, and maintenance phases of the application development lifecycle. They break/fix code regularly; they are responsible for triaging workflows, troubleshooting, or managing users and roles for their team. They have DevOps practices (i.e. version control systems and implement CI/CD). They need to use New Relic's curated dashboards and experiences (not just the ability to create their own custom queries and charts); in other words, they need full access to our platform. They need to be able to manage users and/or billing. Reasons to make someone a basic user: They play a key role in the planning phase of the application development lifecycle. They use and configure New Relic agents, APIs, and integrations to send us data, and access, configure, and use alerts on such data (not necessarily responsible for triaging workflows, troubleshooting, or managing users and roles for their team). They want to see high-level analytics and business metrics for future planning (such as C-Suite executives). They do not need to use our curated experiences and dashboards, but would benefit from the ability to create their own custom queries and charts of data; in other words, they don't need full access to the platform. They don't manage users. For accounts on New Relic One pricing, learn more about user-related billing calculations. Understand user-related billing If you're on the New Relic One pricing plan, full users are billable, and there are restrictions around how often a full user can downgrade to a basic user. For details, see Calculations. For how to query and alert on usage data, see Query usage data. Default groups: Admin and User Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. A user group allows managing multiple users at the same time. Your New Relic users are assigned to a group and that group is granted access to specific roles and specific accounts. Full users can be added to one of two default groups: User: This group allows a user to use and configure monitoring/analysis features but not perform account-related tasks like managing billing or users. Admin: This group has all standard roles. Organizations with Pro and Enterprise edition can create custom groups, and control access to roles and accounts using access grants. To change the group a user is in, use the User management UI. Relationship between user type, roles, and groups Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. Here's a table explaining how user type (basic vs full user), roles, and groups relate to each other: Full user Basic user Group Full users can be assigned to default groups (User and Admin) or custom groups. Basic users, no matter what group they're assigned to, always have basic user abilities, no more and no less. Role Here are the roles our default groups have: User group: has the All product admin standard role, which includes some feature-related administrative abilities but not more advanced organization-level or user management admin abilities. Admin group: has complete admin capabilities, which is the equivalent of all our standard roles, including the more advanced organization-level and user management roles. Custom groups can have either our default standard roles, or custom roles. A basic user's abilities aren't directly related to roles. A basic user can best be described as having the All product admin role but without access to most of our curated UI experiences (learn more about user type). Roles and capabilities Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. Roles are a set of capabilities. A capability is defined as the ability to do a specific New Relic task, like 'Delete alert conditions' (learn more about capabilities). We provide some default standard roles (below). Organizations on Pro or Enterprise edition can also create custom roles. Standard (default) roles Our standard roles are default sets of capabilities that satisfy some commonly needed use cases. Important Note that some of our standard roles have hidden capabilities that aren't available for selection when creating a custom role. The only standard roles that can be replicated with a custom role are Standard user and Read only; all others have special hidden abilities. Our standard roles include: Standard roles Scope Description All product admin Account Provides admin-level access to the platform. This includes all New Relic capabilities with the exception of managing users (Authentication domain manager role) and managing account-structure settings (Organization manager role). Standard user Account Provides access to use most of the platform, but lacks configuration and administration-level abilities (like account-level configuration or synthetic monitor secure credentials). Billing user Account Provides ability to manage subscriptions and billing, and read-only access to the rest of the platform. Organization manager Organization Provides the ability to manage organization settings, including organization structure, name, and preferences. Due to our recent switch to the New Relic One account/user model, this role currently has few abilities but more will be added over time. For how to grant this role, see Add user management capability. Organization read only Organization Provides the ability to view organization-level settings. For how to grant this role, see Add user management capability. Authentication domain manager Organization Provides ability to add and manage users, and configure authentication domains for users on the New Relic One user model. For how to grant this role, see Add user management capability. Authentication domain read only Organization Provides the ability to view users in your organization and view the configuration of authentication domains. For how to grant this role, see Add user management capability. Read only Account Provides read-only access to the New Relic platform (except for synthetic monitor secure credentials). Manage v1 users Account For New Relic organizations that existed before July 30 2020 and have users on our original user model, this role lets you manage those \"v1\" users. Capabilities A role, whether one of our standard roles or a custom one, is defined as a set of capabilities. In the Organization and access UI, when you choose a role or create a custom role, you can see the available capabilities. Important Some of our standard roles have hidden capabilities that aren't available for selection when creating a custom role. For details, see Standard roles. Here's a view of the capabilities associated with the All product admin role. When creating a custom role, you can select a custom set of capabilities. Note that our list of capabilities changes over time: this screenshot was taken April 2021. For how to set up roles with custom capabilities, see the user management tutorial. Manage users To learn how to add users, assign them to groups, and create custom groups and roles, see Manage users. 2020 user model changes If you'd like to understand how our user model changed in 2020 and what the impacts of that change were, see User model changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 638.2019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model: Understand the <em>user</em> structure ",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model: Understand the <em>user</em> structure",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": " affect what features you have access to. For <em>accounts</em> on <em>New</em> <em>Relic</em> <em>One</em> pricing, learn more about <em>user</em>-related <em>billing</em> calculations. Tips on choosing <em>user</em> type A <em>user</em>&#x27;s type (basic <em>user</em> vs full <em>user</em>) is meant to be a long-term assignment, based on the <em>New</em> <em>Relic</em> responsibilities that <em>user</em> is expected"
      },
      "id": "603e88e328ccbcfcbaeba7a8"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more": [
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Tip",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add and edit users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-05-06T03:40:32Z",
      "updated_at": "2021-05-06T03:40:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements Tip To quickly check if you can access these user management features, go to the user management UI and see what you have access to. Requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. Some capabilities require the Organization manager role and some require the Authentication domain manager role. For details, see Standard roles. Full Stack Observability edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise is required. To import users from an identity provider: Enterprise is required A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants. Important If you can't use or access these UI pages, it may be because your users are on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add and edit users To add or edit users, use the User management UI. To add users there: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 686.68384,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "sections": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model, we provide various <em>user</em> <em>management</em> features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to <em>user</em> groups Create custom <em>user</em> groups Grant <em>user</em> groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    },
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 682.15247,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "sections": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": ", click Administration, click Organizations and access, and then click <em>Accounts</em>. Grant groups access to roles and <em>accounts</em> Groups are used to manage what your users are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    },
    {
      "sections": [
        "New Relic One user model: Understand the user structure",
        "Important",
        "Overview",
        "User type: basic and full",
        "Compare full vs basic capabilities",
        "Tips on choosing user type",
        "Understand user-related billing",
        "Default groups: Admin and User",
        "Relationship between user type, roles, and groups",
        "Roles and capabilities",
        "Standard (default) roles",
        "Capabilities",
        "Manage users",
        "2020 user model changes"
      ],
      "title": "New Relic One user model: Understand the user structure ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "169383c2678ce973404db07195b2dee6eda9163d",
      "image": "https://docs.newrelic.com/static/565d4ebddf52a4592c594032696516b9/c1b63/New-Relic-capabilities-UI-screenshot.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/",
      "published_at": "2021-05-05T03:59:35Z",
      "updated_at": "2021-05-05T03:59:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In mid-2020, New Relic released a newer user model, referred to as the New Relic One user model. Important If you had a New Relic organization created before July 30 2020 and you haven't gone through a user migration process, your users are likely on our original user model. For more on this, see Pricing and user model changes. Overview This doc will explain the structure of the New Relic One user model, including: User type (basic user vs full user) Default user groups User roles and capabilities For how to add and manage users in the UI, see User management. User type: basic and full Important This section is for users on our New Relic One user model. If you're on our original user model, see Original users. The user type (basic user or full user) determines whether a user has access to our Full Stack Observability features. A user's type is something you set long-term based on that user's expected New Relic responsibilities. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. Basic user. Details: These users are free and have access to a wide range of features, including running queries of data, making custom charts and dashboards, and setting up alerts. Unlike full users, they do not have access to our Full-Stack Observability features and some advanced Applied Intelligence features (for a comparison of abilities, see Capabilities). No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Basic users will see prompts for upgrading to a full user when they attempt to access unavailable features. For details, see Upgrade. Full user. Details: Full users have access to our Full-Stack Observability features, which include curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, synthetic monitors, access to New Relic One apps, and more. For details, see Capabilities. Standard edition includes one free full user and up to five total full users. A full user can downgrade to a basic user twice in a 12-month period. Learn more about basic user versus full user differences: Compare full vs basic capabilities Below is a table comparing what basic users and full users can do. In short: basic users have access to our Telemetry Data Platform and some Applied Intelligence features, while full users have theoretical access to all features (dependent on any group-related restrictions). Features Full user Basic user Full-Stack Observability (Curated UI experiences) Application performance monitoring (APM) UI Infrastructure monitoring UI Digital Experience Monitoring UI (browser, mobile, synthetics) Serverless monitoring UI Logs in context with other UI experiences Synthetics checks Assorted curated UI experiences (distributed tracing, Kubernetes cluster explorer, workloads, etc.) Infinite Tracing (Pro and Enterprise) Access to New Relic One apps Can build apps but can't access other apps Applied Intelligence Automatic anomaly detection Correlated alerts and events Anomaly/alert analysis Root cause details in issues Telemetry Data Platform Data ingest from any source (our agents, integrations, and APIs) Query your data Create custom charts and dashboards (not New Relic-built) Alerts and notifications Our APIs, including NerdGraph (GraphQL) (with some restrictions) Logs UI Build New Relic One apps (but cannot access other apps) Encryption at rest Standard data retention Security and compliance Data management Note that your Full Stack Observability edition will also affect what features you have access to. For accounts on New Relic One pricing, learn more about user-related billing calculations. Tips on choosing user type A user's type (basic user vs full user) is meant to be a long-term assignment, based on the New Relic responsibilities that user is expected to perform. A full user can be downgraded to a basic user only twice in one year. Below are tips for why you'd choose full user versus basic user. Reasons to make someone a full user: They play a key role in the development, testing, deployment, and maintenance phases of the application development lifecycle. They break/fix code regularly; they are responsible for triaging workflows, troubleshooting, or managing users and roles for their team. They have DevOps practices (i.e. version control systems and implement CI/CD). They need to use New Relic's curated dashboards and experiences (not just the ability to create their own custom queries and charts); in other words, they need full access to our platform. They need to be able to manage users and/or billing. Reasons to make someone a basic user: They play a key role in the planning phase of the application development lifecycle. They use and configure New Relic agents, APIs, and integrations to send us data, and access, configure, and use alerts on such data (not necessarily responsible for triaging workflows, troubleshooting, or managing users and roles for their team). They want to see high-level analytics and business metrics for future planning (such as C-Suite executives). They do not need to use our curated experiences and dashboards, but would benefit from the ability to create their own custom queries and charts of data; in other words, they don't need full access to the platform. They don't manage users. For accounts on New Relic One pricing, learn more about user-related billing calculations. Understand user-related billing If you're on the New Relic One pricing plan, full users are billable, and there are restrictions around how often a full user can downgrade to a basic user. For details, see Calculations. For how to query and alert on usage data, see Query usage data. Default groups: Admin and User Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. A user group allows managing multiple users at the same time. Your New Relic users are assigned to a group and that group is granted access to specific roles and specific accounts. Full users can be added to one of two default groups: User: This group allows a user to use and configure monitoring/analysis features but not perform account-related tasks like managing billing or users. Admin: This group has all standard roles. Organizations with Pro and Enterprise edition can create custom groups, and control access to roles and accounts using access grants. To change the group a user is in, use the User management UI. Relationship between user type, roles, and groups Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. Here's a table explaining how user type (basic vs full user), roles, and groups relate to each other: Full user Basic user Group Full users can be assigned to default groups (User and Admin) or custom groups. Basic users, no matter what group they're assigned to, always have basic user abilities, no more and no less. Role Here are the roles our default groups have: User group: has the All product admin standard role, which includes some feature-related administrative abilities but not more advanced organization-level or user management admin abilities. Admin group: has complete admin capabilities, which is the equivalent of all our standard roles, including the more advanced organization-level and user management roles. Custom groups can have either our default standard roles, or custom roles. A basic user's abilities aren't directly related to roles. A basic user can best be described as having the All product admin role but without access to most of our curated UI experiences (learn more about user type). Roles and capabilities Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. Roles are a set of capabilities. A capability is defined as the ability to do a specific New Relic task, like 'Delete alert conditions' (learn more about capabilities). We provide some default standard roles (below). Organizations on Pro or Enterprise edition can also create custom roles. Standard (default) roles Our standard roles are default sets of capabilities that satisfy some commonly needed use cases. Important Note that some of our standard roles have hidden capabilities that aren't available for selection when creating a custom role. The only standard roles that can be replicated with a custom role are Standard user and Read only; all others have special hidden abilities. Our standard roles include: Standard roles Scope Description All product admin Account Provides admin-level access to the platform. This includes all New Relic capabilities with the exception of managing users (Authentication domain manager role) and managing account-structure settings (Organization manager role). Standard user Account Provides access to use most of the platform, but lacks configuration and administration-level abilities (like account-level configuration or synthetic monitor secure credentials). Billing user Account Provides ability to manage subscriptions and billing, and read-only access to the rest of the platform. Organization manager Organization Provides the ability to manage organization settings, including organization structure, name, and preferences. Due to our recent switch to the New Relic One account/user model, this role currently has few abilities but more will be added over time. For how to grant this role, see Add user management capability. Organization read only Organization Provides the ability to view organization-level settings. For how to grant this role, see Add user management capability. Authentication domain manager Organization Provides ability to add and manage users, and configure authentication domains for users on the New Relic One user model. For how to grant this role, see Add user management capability. Authentication domain read only Organization Provides the ability to view users in your organization and view the configuration of authentication domains. For how to grant this role, see Add user management capability. Read only Account Provides read-only access to the New Relic platform (except for synthetic monitor secure credentials). Manage v1 users Account For New Relic organizations that existed before July 30 2020 and have users on our original user model, this role lets you manage those \"v1\" users. Capabilities A role, whether one of our standard roles or a custom one, is defined as a set of capabilities. In the Organization and access UI, when you choose a role or create a custom role, you can see the available capabilities. Important Some of our standard roles have hidden capabilities that aren't available for selection when creating a custom role. For details, see Standard roles. Here's a view of the capabilities associated with the All product admin role. When creating a custom role, you can select a custom set of capabilities. Note that our list of capabilities changes over time: this screenshot was taken April 2021. For how to set up roles with custom capabilities, see the user management tutorial. Manage users To learn how to add users, assign them to groups, and create custom groups and roles, see Manage users. 2020 user model changes If you'd like to understand how our user model changed in 2020 and what the impacts of that change were, see User model changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 638.2019,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model: Understand the <em>user</em> structure ",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model: Understand the <em>user</em> structure",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": " affect what features you have access to. For <em>accounts</em> on <em>New</em> <em>Relic</em> <em>One</em> pricing, learn more about <em>user</em>-related <em>billing</em> calculations. Tips on choosing <em>user</em> type A <em>user</em>&#x27;s type (basic <em>user</em> vs full <em>user</em>) is meant to be a long-term assignment, based on the <em>New</em> <em>Relic</em> responsibilities that <em>user</em> is expected"
      },
      "id": "603e88e328ccbcfcbaeba7a8"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/introduction-managing-users": [
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Tip",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add and edit users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-05-06T03:40:32Z",
      "updated_at": "2021-05-06T03:40:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements Tip To quickly check if you can access these user management features, go to the user management UI and see what you have access to. Requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. Some capabilities require the Organization manager role and some require the Authentication domain manager role. For details, see Standard roles. Full Stack Observability edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise is required. To import users from an identity provider: Enterprise is required A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants. Important If you can't use or access these UI pages, it may be because your users are on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add and edit users To add or edit users, use the User management UI. To add users there: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 686.68335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "sections": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model, we provide various <em>user</em> <em>management</em> features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to <em>user</em> groups Create custom <em>user</em> groups Grant <em>user</em> groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    },
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 682.152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "sections": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": ", click Administration, click Organizations and access, and then click <em>Accounts</em>. Grant groups access to roles and <em>accounts</em> Groups are used to manage what your users are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    },
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 676.1288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "sections": "Source of <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "Important This doc is for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model. For managing users on our original <em>user</em> model, see Original users. Learn about <em>user</em> models. To manage their users, <em>New</em> <em>Relic</em> organizations can configure &quot;authentication domains,&quot; which control how users are added to a <em>New</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure": [
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Tip",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add and edit users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-05-06T03:40:32Z",
      "updated_at": "2021-05-06T03:40:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements Tip To quickly check if you can access these user management features, go to the user management UI and see what you have access to. Requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. Some capabilities require the Organization manager role and some require the Authentication domain manager role. For details, see Standard roles. Full Stack Observability edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise is required. To import users from an identity provider: Enterprise is required A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants. Important If you can't use or access these UI pages, it may be because your users are on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add and edit users To add or edit users, use the User management UI. To add users there: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 686.68286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "sections": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model, we provide various <em>user</em> <em>management</em> features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to <em>user</em> groups Create custom <em>user</em> groups Grant <em>user</em> groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    },
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 682.1515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "sections": "Tutorial: Add <em>new</em> <em>user</em> groups <em>and</em> roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model)",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": ", click Administration, click Organizations and access, and then click <em>Accounts</em>. Grant groups access to roles and <em>accounts</em> Groups are used to manage what your users are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    },
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 676.12836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "sections": "Source of <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "Important This doc is for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model. For managing users on our original <em>user</em> model, see Original users. Learn about <em>user</em> models. To manage their users, <em>New</em> <em>Relic</em> organizations can configure &quot;authentication domains,&quot; which control how users are added to a <em>New</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    }
  ],
  "/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model": [
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Tip",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add and edit users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-05-06T03:40:32Z",
      "updated_at": "2021-05-06T03:40:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements Tip To quickly check if you can access these user management features, go to the user management UI and see what you have access to. Requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. Some capabilities require the Organization manager role and some require the Authentication domain manager role. For details, see Standard roles. Full Stack Observability edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise is required. To import users from an identity provider: Enterprise is required A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants. Important If you can't use or access these UI pages, it may be because your users are on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add and edit users To add or edit users, use the User management UI. To add users there: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 686.68286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "sections": "Add <em>and</em> <em>manage</em> <em>users</em>, groups, <em>and</em> roles",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "For users on our <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model, we provide various <em>user</em> <em>management</em> features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to <em>user</em> groups Create custom <em>user</em> groups Grant <em>user</em> groups access to specific roles and <em>accounts</em> Important"
      },
      "id": "603e7bce28ccbc415beba74c"
    },
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 676.12836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Authentication domain settings: SAML SSO, SCIM, <em>and</em> more",
        "sections": "Source of <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": "Important This doc is for managing users on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model. For managing users on our original <em>user</em> model, see Original users. Learn about <em>user</em> models. To manage their users, <em>New</em> <em>Relic</em> organizations can configure &quot;authentication domains,&quot; which control how users are added to a <em>New</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    },
    {
      "sections": [
        "New Relic One user model: Understand the user structure",
        "Important",
        "Overview",
        "User type: basic and full",
        "Compare full vs basic capabilities",
        "Tips on choosing user type",
        "Understand user-related billing",
        "Default groups: Admin and User",
        "Relationship between user type, roles, and groups",
        "Roles and capabilities",
        "Standard (default) roles",
        "Capabilities",
        "Manage users",
        "2020 user model changes"
      ],
      "title": "New Relic One user model: Understand the user structure ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "169383c2678ce973404db07195b2dee6eda9163d",
      "image": "https://docs.newrelic.com/static/565d4ebddf52a4592c594032696516b9/c1b63/New-Relic-capabilities-UI-screenshot.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/new-relic-one-user-model-understand-user-structure/",
      "published_at": "2021-05-05T03:59:35Z",
      "updated_at": "2021-05-05T03:59:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In mid-2020, New Relic released a newer user model, referred to as the New Relic One user model. Important If you had a New Relic organization created before July 30 2020 and you haven't gone through a user migration process, your users are likely on our original user model. For more on this, see Pricing and user model changes. Overview This doc will explain the structure of the New Relic One user model, including: User type (basic user vs full user) Default user groups User roles and capabilities For how to add and manage users in the UI, see User management. User type: basic and full Important This section is for users on our New Relic One user model. If you're on our original user model, see Original users. The user type (basic user or full user) determines whether a user has access to our Full Stack Observability features. A user's type is something you set long-term based on that user's expected New Relic responsibilities. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. Basic user. Details: These users are free and have access to a wide range of features, including running queries of data, making custom charts and dashboards, and setting up alerts. Unlike full users, they do not have access to our Full-Stack Observability features and some advanced Applied Intelligence features (for a comparison of abilities, see Capabilities). No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Basic users will see prompts for upgrading to a full user when they attempt to access unavailable features. For details, see Upgrade. Full user. Details: Full users have access to our Full-Stack Observability features, which include curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, synthetic monitors, access to New Relic One apps, and more. For details, see Capabilities. Standard edition includes one free full user and up to five total full users. A full user can downgrade to a basic user twice in a 12-month period. Learn more about basic user versus full user differences: Compare full vs basic capabilities Below is a table comparing what basic users and full users can do. In short: basic users have access to our Telemetry Data Platform and some Applied Intelligence features, while full users have theoretical access to all features (dependent on any group-related restrictions). Features Full user Basic user Full-Stack Observability (Curated UI experiences) Application performance monitoring (APM) UI Infrastructure monitoring UI Digital Experience Monitoring UI (browser, mobile, synthetics) Serverless monitoring UI Logs in context with other UI experiences Synthetics checks Assorted curated UI experiences (distributed tracing, Kubernetes cluster explorer, workloads, etc.) Infinite Tracing (Pro and Enterprise) Access to New Relic One apps Can build apps but can't access other apps Applied Intelligence Automatic anomaly detection Correlated alerts and events Anomaly/alert analysis Root cause details in issues Telemetry Data Platform Data ingest from any source (our agents, integrations, and APIs) Query your data Create custom charts and dashboards (not New Relic-built) Alerts and notifications Our APIs, including NerdGraph (GraphQL) (with some restrictions) Logs UI Build New Relic One apps (but cannot access other apps) Encryption at rest Standard data retention Security and compliance Data management Note that your Full Stack Observability edition will also affect what features you have access to. For accounts on New Relic One pricing, learn more about user-related billing calculations. Tips on choosing user type A user's type (basic user vs full user) is meant to be a long-term assignment, based on the New Relic responsibilities that user is expected to perform. A full user can be downgraded to a basic user only twice in one year. Below are tips for why you'd choose full user versus basic user. Reasons to make someone a full user: They play a key role in the development, testing, deployment, and maintenance phases of the application development lifecycle. They break/fix code regularly; they are responsible for triaging workflows, troubleshooting, or managing users and roles for their team. They have DevOps practices (i.e. version control systems and implement CI/CD). They need to use New Relic's curated dashboards and experiences (not just the ability to create their own custom queries and charts); in other words, they need full access to our platform. They need to be able to manage users and/or billing. Reasons to make someone a basic user: They play a key role in the planning phase of the application development lifecycle. They use and configure New Relic agents, APIs, and integrations to send us data, and access, configure, and use alerts on such data (not necessarily responsible for triaging workflows, troubleshooting, or managing users and roles for their team). They want to see high-level analytics and business metrics for future planning (such as C-Suite executives). They do not need to use our curated experiences and dashboards, but would benefit from the ability to create their own custom queries and charts of data; in other words, they don't need full access to the platform. They don't manage users. For accounts on New Relic One pricing, learn more about user-related billing calculations. Understand user-related billing If you're on the New Relic One pricing plan, full users are billable, and there are restrictions around how often a full user can downgrade to a basic user. For details, see Calculations. For how to query and alert on usage data, see Query usage data. Default groups: Admin and User Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. A user group allows managing multiple users at the same time. Your New Relic users are assigned to a group and that group is granted access to specific roles and specific accounts. Full users can be added to one of two default groups: User: This group allows a user to use and configure monitoring/analysis features but not perform account-related tasks like managing billing or users. Admin: This group has all standard roles. Organizations with Pro and Enterprise edition can create custom groups, and control access to roles and accounts using access grants. To change the group a user is in, use the User management UI. Relationship between user type, roles, and groups Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. Here's a table explaining how user type (basic vs full user), roles, and groups relate to each other: Full user Basic user Group Full users can be assigned to default groups (User and Admin) or custom groups. Basic users, no matter what group they're assigned to, always have basic user abilities, no more and no less. Role Here are the roles our default groups have: User group: has the All product admin standard role, which includes some feature-related administrative abilities but not more advanced organization-level or user management admin abilities. Admin group: has complete admin capabilities, which is the equivalent of all our standard roles, including the more advanced organization-level and user management roles. Custom groups can have either our default standard roles, or custom roles. A basic user's abilities aren't directly related to roles. A basic user can best be described as having the All product admin role but without access to most of our curated UI experiences (learn more about user type). Roles and capabilities Important This applies to users on our New Relic One user model. For users on our original user model, see Original user docs. Roles are a set of capabilities. A capability is defined as the ability to do a specific New Relic task, like 'Delete alert conditions' (learn more about capabilities). We provide some default standard roles (below). Organizations on Pro or Enterprise edition can also create custom roles. Standard (default) roles Our standard roles are default sets of capabilities that satisfy some commonly needed use cases. Important Note that some of our standard roles have hidden capabilities that aren't available for selection when creating a custom role. The only standard roles that can be replicated with a custom role are Standard user and Read only; all others have special hidden abilities. Our standard roles include: Standard roles Scope Description All product admin Account Provides admin-level access to the platform. This includes all New Relic capabilities with the exception of managing users (Authentication domain manager role) and managing account-structure settings (Organization manager role). Standard user Account Provides access to use most of the platform, but lacks configuration and administration-level abilities (like account-level configuration or synthetic monitor secure credentials). Billing user Account Provides ability to manage subscriptions and billing, and read-only access to the rest of the platform. Organization manager Organization Provides the ability to manage organization settings, including organization structure, name, and preferences. Due to our recent switch to the New Relic One account/user model, this role currently has few abilities but more will be added over time. For how to grant this role, see Add user management capability. Organization read only Organization Provides the ability to view organization-level settings. For how to grant this role, see Add user management capability. Authentication domain manager Organization Provides ability to add and manage users, and configure authentication domains for users on the New Relic One user model. For how to grant this role, see Add user management capability. Authentication domain read only Organization Provides the ability to view users in your organization and view the configuration of authentication domains. For how to grant this role, see Add user management capability. Read only Account Provides read-only access to the New Relic platform (except for synthetic monitor secure credentials). Manage v1 users Account For New Relic organizations that existed before July 30 2020 and have users on our original user model, this role lets you manage those \"v1\" users. Capabilities A role, whether one of our standard roles or a custom one, is defined as a set of capabilities. In the Organization and access UI, when you choose a role or create a custom role, you can see the available capabilities. Important Some of our standard roles have hidden capabilities that aren't available for selection when creating a custom role. For details, see Standard roles. Here's a view of the capabilities associated with the All product admin role. When creating a custom role, you can select a custom set of capabilities. Note that our list of capabilities changes over time: this screenshot was taken April 2021. For how to set up roles with custom capabilities, see the user management tutorial. Manage users To learn how to add users, assign them to groups, and create custom groups and roles, see Manage users. 2020 user model changes If you'd like to understand how our user model changed in 2020 and what the impacts of that change were, see User model changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 638.2012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model: Understand the <em>user</em> structure ",
        "sections": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> model: Understand the <em>user</em> structure",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>management</em>",
        "body": " affect what features you have access to. For <em>accounts</em> on <em>New</em> <em>Relic</em> <em>One</em> pricing, learn more about <em>user</em>-related <em>billing</em> calculations. Tips on choosing <em>user</em> type A <em>user</em>&#x27;s type (basic <em>user</em> vs full <em>user</em>) is meant to be a long-term assignment, based on the <em>New</em> <em>Relic</em> responsibilities that <em>user</em> is expected"
      },
      "id": "603e88e328ccbcfcbaeba7a8"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/google-app-engine-environment": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58359,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.63193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.51273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/heroku-install-new-relic-add": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58359,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.63193,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.51273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/log-install-new-relic-partners": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58347,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.63184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.51263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/rackspace-cloud-load-balancer-plugin": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58347,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.63184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.51263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/rightscale-users-new-relic": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.63171,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.51251,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/install-new-relic/partner-based-installation/windows-azure-users-new-relic": [
    {
      "sections": [
        "Account ID"
      ],
      "title": "Account ID",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "d6628feaab128caac7a8e8240cca1985951e0042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/account-id/",
      "published_at": "2021-05-06T03:48:14Z",
      "updated_at": "2021-05-06T03:48:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic procedures require use of your account ID (for example, some API calls). Your account ID is the ID number we assign to your New Relic account. Note that some New Relic organizations will contain multiple accounts. Options for finding your account ID: If your organization has multiple accounts: From one.newrelic.com, use the account selector dropdown near the top of the page to switch between accounts and see their IDs. There are other options, depending on which account/user model you're on: Original user model: Click the account dropdown, click Account settings, and then click API keys. The account ID is displayed there. New Relic One user model: Click the account dropdown and then click Administration. Click Organization and access and then Accounts to see account IDs. For more on how account access works, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.58333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Account</em> ID",
        "sections": "<em>Account</em> ID",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Some New Relic procedures require use of your <em>account</em> ID (for example, some API calls). Your <em>account</em> ID is the ID number we assign to your New Relic <em>account</em>. Note that some New Relic organizations will contain multiple <em>accounts</em>. Options for finding your <em>account</em> ID: If your organization has multiple"
      },
      "id": "6043c79964441f2c34378ef5"
    },
    {
      "sections": [
        "Downgrade or cancel account/organization",
        "Reduce data ingest",
        "Downgrade organization",
        "Pro or Enterprise edition downgrade",
        "Standard edition downgrade",
        "Cancel organization",
        "Pro or Enterprise edition cancel",
        "Standard edition: cancel simple organization",
        "Standard edition: cancel other organizations"
      ],
      "title": "Downgrade or cancel account/organization",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account setup"
      ],
      "external_id": "3a75d74fd723f17050d69fe6da4fe162b6965bc8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-setup/downgradecancel-account/",
      "published_at": "2021-05-05T13:44:48Z",
      "updated_at": "2021-05-05T13:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related accounts). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall and/or delete agents or other integrations. For details, see the documentation for the specific New Relic tool you're using: you can search New Relic tools here. For more on controlling data ingest, see Manage your data. Downgrade organization Options for downgrading your New Relic organization will differ depending on your pricing edition: Pro or Enterprise edition downgrade To downgrade your Pro or Enterprise organization, contact your New Relic account representative. Standard edition downgrade Options for downgrading for Standard edition: If you're being billed and want to downgrade: From one.newrelic.com, click the account dropdown, click Manage your plan, and then click Downgrade account. Once you are downgraded, you’ll still be able to access New Relic via the login page. If you're not being billed and haven't input your credit card, you don’t need to downgrade and can continue using New Relic at a free level. Cancel organization Options for cancelling your New Relic organization depend on your pricing edition: Pro or Enterprise edition cancel To cancel your Pro or Enterprise organization, contact your New Relic account representative. Standard edition: cancel simple organization If you've created a new New Relic organization that you don't need, and if it meets some requirements (below), you can delete that organization with these steps: click the account dropdown, select Organization and access, and then click Delete organization. Requirements for being able to self-delete an organization: Organization has a single account, and single user. Was created after July 2020 (and hence is on the new pricing plan and the New Relic One user model). Standard edition: cancel other organizations First consider removing monitoring tools or downgrading. If you still have questions, contact support.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.63171,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "sections": "Downgrade or cancel <em>account</em>&#x2F;organization",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "Depending on your pricing edition and other factors, you have various options for downgrading or cancelling your New Relic organization (your group of related <em>accounts</em>). Reduce data ingest If you want to stop reporting some data to New Relic without downgrading or cancelling, you can uninstall"
      },
      "id": "6043f3c4196a677821960f65"
    },
    {
      "sections": [
        "Master/sub-account structure",
        "Requirements",
        "Master and sub-account hierarchy",
        "Tip",
        "License keys for sub-accounts",
        "Create sub-accounts",
        "Add users to sub-accounts",
        "Set up accounts with SAML SSO",
        "Update sub-account applications"
      ],
      "title": "Master/sub-account structure",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "Account structure"
      ],
      "external_id": "9d20fe2d6cbc8ee1c04d3c026949aec7f710ba00",
      "image": "https://docs.newrelic.com/static/39bb3897a2634f9871309411872ac7b5/d7abb/Master-Sub_Hierarchy.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/mastersub-account-structure/",
      "published_at": "2021-05-05T13:26:49Z",
      "updated_at": "2021-05-05T13:26:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have Pro or Enterprise edition, you can create a more complex account structure with multiple accounts in one organization. Requirements How you manage accounts and users differs based on which account/user model your organization is on. To learn more about the account/user structures, see User models. The major differences are: New Relic One user model: The Standard edition includes only one account per organization, and higher editions allow you to have multiple accounts. To add more accounts to your organization, currently you must be helped by a New Relic representative. To add users to accounts, see Manage users. Original user model: You can create your own sub-accounts. Keep reading to learn how this account structure works. Master and sub-account hierarchy For organizations with multiple accounts, each sub-account is attached to a single master account and can have multiple apps reporting to it. The master account may also have applications reporting to it, but not all data sent from sub-account applications rolls-up into the master account data. To learn how to switch between accounts in the UI, see Account access. To understand how sub-accounts and master accounts scale with EU region accounts, see EU region account hierarchy. Tip If you have a partnership account structure, see Partnership accounts. Master accounts can have their own apps reporting data. However, an app reporting to a sub-account may not report data to a master account. License keys for sub-accounts In a New Relic organization, your main New Relic account serves as the master account with its own license key. Each sub-account has their own individual license keys (and their own API keys). Each application can use only one license key, so each application can report to only one account. Create sub-accounts To add accounts to your New Relic organization, you must have Pro or Enterprise edition. How to add an account depends on which user model your users are on: New Relic One user model: work with your New Relic account representative. Original user model: Follow these instructions: Go to: account dropdown > Account settings > Account > Summary. From Sub-accounts, select Add account. Type the sub-account name, then select Add this account. Continue with the procedures to add users to sub-accounts. Add users to sub-accounts To have a New Relic organization with more than one account, you must have Pro or Enterprise edition. How to add users to a sub-account in your organization depends on which user model your users are on: New Relic One user model: you must create an access grant that gives users access to a specific account. To learn more, see User management concepts. Original user model: In general, permissions for a user on a master account are automatically inherited for that user on sub-accounts. To add users: Go to: account dropdown > Account settings > Account > Summary. From the master account's Sub-accounts list, select the sub-account's link. From the sub-account's Active users section, select Add user, fill in the user's email, name, role, and title as appropriate, and then select Add this user. Optional: Change the Owner or Admin roles for the sub-account as appropriate. Set up accounts with SAML SSO How to set up SAML SSO will depend on which user model your users are on: Original user model: If you set up SAML SSO at the master account level, your sub-account users will also be able to sign in using SSO. If you don't set SAML SSO at the master level, you can set it at the sub-account level. However, do not set SAML SSO at both levels. For more information, see Configuring SAML with multiple accounts. New Relic One user model: see SAML SSO. Update sub-account applications Requirements: Pro or Enterprise edition. Your must be on our original user model (if you're on our New Relic One user model, you need assistance from New Relic). Must be Owner or Admin. When you change the app's config file to move it from one account to another, New Relic treats it as a new app in the new sub-account. New Relic does not move any historical data for the app. To install a new app for your sub-account: Make sure you have selected the master account: From the account dropdown, select Switch account > (master account). Follow standard procedures to install new applications. OR Change the license key in the existing application's configuration file to move it to another sub-account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.51251,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Master&#x2F;sub-<em>account</em> structure",
        "sections": "Master <em>and</em> sub-<em>account</em> hierarchy",
        "tags": "<em>Accounts</em> <em>and</em> <em>billing</em>",
        "body": "If you have Pro or Enterprise edition, you can create a more complex <em>account</em> structure with multiple <em>accounts</em> in one organization. Requirements How you manage <em>accounts</em> and users differs based on which <em>account</em>&#x2F;user model your organization is on. To learn more about the <em>account</em>&#x2F;user structures, see"
      },
      "id": "6043f64b196a67737b960f1d"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.03033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "Synthetics subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "General attributes",
        "Synthetics attributes",
        "Query examples",
        "Billable checks for the last month",
        "Account hierarchy"
      ],
      "title": "Synthetics subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "e44875ddb623f28b20215dda9ffd226b535e1e52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage/",
      "published_at": "2021-05-06T04:49:35Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Synthetics accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. Once per day, every Synthetics monitor location will generate an NrDailyUsage event for every monitor type. This event will summarize Synthetics usage for that location and monitor type over the last 24 hours. All Synthetics usage events have a productLine attribute value of Synthetics. For more information, see the Synthetics query examples. Usage calculations A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. If your monitor checks are fairly steady over time, you can estimate the current month's eventual usage. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Synthetics usage page, set the time picker to Last 30 days. Multiply the Avg daily paid checks by the number of days in the current month. The Synthetics usage chart displays the daily count of monitor checks. The table value Avg daily paid checks displays the total number of monitor checks for the selected time period, divided by the number of days. For more information about the usage UI, see Introduction to subscription usage data. General attributes The following are general (not Synthetics-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Synthetics attributes The following are usage-related attributes generated by New Relic Synthetics. To query this data, use a productLine attribute value of Synthetics. Attribute Description productLine The New Relic product the usage data is from. Synthetics data will have the value Synthetics. Use this value when querying Synthetics usage data. syntheticsFailedCheckCount Number of failed checks that ran on the given day for the given Synthetics monitor and location. Failed checks count toward subscription usage for Synthetics. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsSuccessCheckCount Number of successful checks that ran on the given day for the given Synthetics monitor and location. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsLocation Location the check ran in. syntheticsLocationLabel Human-readable label for the location of the check. syntheticsType The type of Synthetics monitor. Possible values: SIMPLE, BROWSER, SCRIPT_BROWSER, SCRIPT_API. For more information, see Monitor types. syntheticsTypeLabel Human-readable label for syntheticsType. Possible values: Ping, Simple Browser, Scripted Browser, Scripted API. syntheticsMonitorName Name of the monitor. syntheticsMonitorId Unique ID of the monitor. usageType The type of entity for which this event records usage data. This value is Check for Synthetics. Query examples Here are some examples of NRQL queries you can use with your Synthetics subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. Billable checks for the last month This query produces a chart of the billable monitor checks over the last month. Remember that a syntheticsType of SIMPLE refers to a ping monitor, which doesn't count towards paid usage. FROM NrDailyUsage SELECT sum(syntheticsFailedCheckCount) + sum(syntheticsSuccessCheckCount) AS 'Paid checks' where productLine='Synthetics' AND syntheticsType != 'SIMPLE' SINCE last month UNTIL this month Copy Account hierarchy This is a non-product-specific query useful for seeing your account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetics subscription <em>usage</em>",
        "sections": "Synthetics subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a6196a672f33a83dd7"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.03033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    },
    {
      "sections": [
        "Synthetics subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "General attributes",
        "Synthetics attributes",
        "Query examples",
        "Billable checks for the last month",
        "Account hierarchy"
      ],
      "title": "Synthetics subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "e44875ddb623f28b20215dda9ffd226b535e1e52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage/",
      "published_at": "2021-05-06T04:49:35Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Synthetics accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. Once per day, every Synthetics monitor location will generate an NrDailyUsage event for every monitor type. This event will summarize Synthetics usage for that location and monitor type over the last 24 hours. All Synthetics usage events have a productLine attribute value of Synthetics. For more information, see the Synthetics query examples. Usage calculations A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. If your monitor checks are fairly steady over time, you can estimate the current month's eventual usage. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Synthetics usage page, set the time picker to Last 30 days. Multiply the Avg daily paid checks by the number of days in the current month. The Synthetics usage chart displays the daily count of monitor checks. The table value Avg daily paid checks displays the total number of monitor checks for the selected time period, divided by the number of days. For more information about the usage UI, see Introduction to subscription usage data. General attributes The following are general (not Synthetics-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Synthetics attributes The following are usage-related attributes generated by New Relic Synthetics. To query this data, use a productLine attribute value of Synthetics. Attribute Description productLine The New Relic product the usage data is from. Synthetics data will have the value Synthetics. Use this value when querying Synthetics usage data. syntheticsFailedCheckCount Number of failed checks that ran on the given day for the given Synthetics monitor and location. Failed checks count toward subscription usage for Synthetics. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsSuccessCheckCount Number of successful checks that ran on the given day for the given Synthetics monitor and location. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsLocation Location the check ran in. syntheticsLocationLabel Human-readable label for the location of the check. syntheticsType The type of Synthetics monitor. Possible values: SIMPLE, BROWSER, SCRIPT_BROWSER, SCRIPT_API. For more information, see Monitor types. syntheticsTypeLabel Human-readable label for syntheticsType. Possible values: Ping, Simple Browser, Scripted Browser, Scripted API. syntheticsMonitorName Name of the monitor. syntheticsMonitorId Unique ID of the monitor. usageType The type of entity for which this event records usage data. This value is Check for Synthetics. Query examples Here are some examples of NRQL queries you can use with your Synthetics subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. Billable checks for the last month This query produces a chart of the billable monitor checks over the last month. Remember that a syntheticsType of SIMPLE refers to a ping monitor, which doesn't count towards paid usage. FROM NrDailyUsage SELECT sum(syntheticsFailedCheckCount) + sum(syntheticsSuccessCheckCount) AS 'Paid checks' where productLine='Synthetics' AND syntheticsType != 'SIMPLE' SINCE last month UNTIL this month Copy Account hierarchy This is a non-product-specific query useful for seeing your account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetics subscription <em>usage</em>",
        "sections": "Synthetics subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a6196a672f33a83dd7"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage": [
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    },
    {
      "sections": [
        "Synthetics subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "General attributes",
        "Synthetics attributes",
        "Query examples",
        "Billable checks for the last month",
        "Account hierarchy"
      ],
      "title": "Synthetics subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "e44875ddb623f28b20215dda9ffd226b535e1e52",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage/",
      "published_at": "2021-05-06T04:49:35Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Synthetics accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. Once per day, every Synthetics monitor location will generate an NrDailyUsage event for every monitor type. This event will summarize Synthetics usage for that location and monitor type over the last 24 hours. All Synthetics usage events have a productLine attribute value of Synthetics. For more information, see the Synthetics query examples. Usage calculations A New Relic Synthetics subscription level is based on the number of non-ping monitor checks used during a calendar month. If your monitor checks are fairly steady over time, you can estimate the current month's eventual usage. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Synthetics usage page, set the time picker to Last 30 days. Multiply the Avg daily paid checks by the number of days in the current month. The Synthetics usage chart displays the daily count of monitor checks. The table value Avg daily paid checks displays the total number of monitor checks for the selected time period, divided by the number of days. For more information about the usage UI, see Introduction to subscription usage data. General attributes The following are general (not Synthetics-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Synthetics attributes The following are usage-related attributes generated by New Relic Synthetics. To query this data, use a productLine attribute value of Synthetics. Attribute Description productLine The New Relic product the usage data is from. Synthetics data will have the value Synthetics. Use this value when querying Synthetics usage data. syntheticsFailedCheckCount Number of failed checks that ran on the given day for the given Synthetics monitor and location. Failed checks count toward subscription usage for Synthetics. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsSuccessCheckCount Number of successful checks that ran on the given day for the given Synthetics monitor and location. Only checks with syntheticsType not equal to SIMPLE count toward billable subscription usage. syntheticsLocation Location the check ran in. syntheticsLocationLabel Human-readable label for the location of the check. syntheticsType The type of Synthetics monitor. Possible values: SIMPLE, BROWSER, SCRIPT_BROWSER, SCRIPT_API. For more information, see Monitor types. syntheticsTypeLabel Human-readable label for syntheticsType. Possible values: Ping, Simple Browser, Scripted Browser, Scripted API. syntheticsMonitorName Name of the monitor. syntheticsMonitorId Unique ID of the monitor. usageType The type of entity for which this event records usage data. This value is Check for Synthetics. Query examples Here are some examples of NRQL queries you can use with your Synthetics subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. Billable checks for the last month This query produces a chart of the billable monitor checks over the last month. Remember that a syntheticsType of SIMPLE refers to a ping monitor, which doesn't count towards paid usage. FROM NrDailyUsage SELECT sum(syntheticsFailedCheckCount) + sum(syntheticsSuccessCheckCount) AS 'Paid checks' where productLine='Synthetics' AND syntheticsType != 'SIMPLE' SINCE last month UNTIL this month Copy Account hierarchy This is a non-product-specific query useful for seeing your account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Synthetics subscription <em>usage</em>",
        "sections": "Synthetics subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a6196a672f33a83dd7"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/insights-subscription-usage": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.03033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/introduction-new-relic-subscription-usage-data": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.03032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/mobile-subscription-usage": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.03032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02982,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    }
  ],
  "/docs/accounts/new-relic-account-usage/getting-started-usage/synthetics-subscription-usage": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.03032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.0298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-data-retention/event-data-retention-original-pricing-plan": [
    {
      "sections": [
        "Overview of data retention (original pricing plan)",
        "Important",
        "Limits on editing and deleting data",
        "Product and API data retention policies",
        "APM",
        "APM data retention policies",
        "Legacy APM data retention policies",
        "Browser",
        "Infrastructure",
        "Tip",
        "Infrastructure downsampling and data retention",
        "Integration compute unit event limits",
        "Insights",
        "Logs",
        "Logs in context data retention",
        "Mobile",
        "Mobile data retention policies",
        "Standard Mobile (legacy) data retention policies",
        "Plugins",
        "Plugins data retention",
        "Legacy Plugins data retention",
        "Synthetics",
        "Synthetics data retention policies",
        "Metric API",
        "Trace API",
        "Data components",
        "Event data: reported by most products",
        "Metric timeslice data: reported by APM, Browser, and Mobile",
        "Aggregate metric timeslice data: reported by APM, Browser, and Mobile",
        "Key metrics: reported by APM, Browser, and Mobile",
        "Trace data: reported by APM, Browser, and Mobile"
      ],
      "title": "Overview of data retention (original pricing plan)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original data retention"
      ],
      "external_id": "22d5ab9f4d623ead28ee7bb82c118d91804dee22",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/overview-data-retention-components/",
      "published_at": "2021-05-05T02:29:59Z",
      "updated_at": "2021-03-11T13:22:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on our New Relic One pricing plan, see Manage your data. Not sure which you're on? See Overview of pricing plans. If you're on the original product-based pricing plan, you retain your existing subscriptions and data retention values. You manage these existing retention settings from the Data management hub in New Relic One. To manage your retention settings, in New Relic One, click your user name, select Manage your data, and then select Data retention. You'll see your existing retention settings. Adjust retention values by clicking the Edit retention button. New Relic stores different types of data for different periods of time. The retention period for a type of data will vary depending on the product, the subscription level, and the feature. Limits on editing and deleting data Once telemetry data (events, metrics, logs, traces) is reported to New Relic and available for querying, that data cannot be edited or deleted. This is a purposeful design decision that optimizes New Relic's speed and performance. Data will expire after its data retention ends. If you sent unwanted data or sensitive data to New Relic that must be removed, contact your account representative at New Relic, or get support at support.newrelic.com. Product and API data retention policies Select a New Relic product to see details about its data retention: APM Specific retention policies apply to each New Relic APM subscription level, including Lite, Essentials, Pro, and Enterprise. This includes metric timeslice data, key metrics, trace data, and event data. In addition to retention limits, your data is subject to aggregation (averaging) after certain elapsed time periods. For more information, see the aggregate metric data description. APM data retention policies For accounts on our original product-based pricing, APM data retention policies depend on your APM product subscription level. Component Lite Essentials Pro Metric timeslice data 24 hours 3 days 90 days Key metrics none forever forever Distributed tracing and logs in context none none 8 days Other trace data * 1 day 3 days 7 days Event data * * 1 day 3 days 8 days * If you view a transaction trace in the New Relic UI, New Relic stores that trace data for up to one year. * * Learn about how to extend the retention of event data. Legacy APM data retention policies Component Standard Startup Small Business Enterprise Metric timeslice data 7 days 14 days 30 days 90 days Key metrics none none none forever Trace data 7 days 7 days 7 days 7 days Event data none 8 days 8 days 8 days Browser For accounts on our original product-based pricing, Browser data is stored depending on your subscription level: Component Lite Pro Metric data 24 hours 90 days Key metrics 24 hours forever Trace data 7 days 7 days Event data * 1 day 8 days SPA data Unavailable 8 days * Learn about how to extend the retention of event data. Infrastructure For accounts on our original product-based pricing, Infrastructure data retention policies depend on your Infrastructure subscription level and your New Relic Infrastructure compute units pricing model. Data retention rules apply the same whether that data is displayed in the UI or queried. Tip Infrastructure data retention is not governed by your Insights subscription. Infrastructure downsampling and data retention Types of data are stored depending on your subscription level: Component Essentials Pro Infrastructure data 3 months 13 months Host count Host count will stop reflecting a host whose agent is no longer reporting after three minutes. However, host data will be available, subject to other retention criteria. 3 minutes 3 minutes Inventory attributes removed Inventory attributes for a host are retained for 24 hours after the agent stops reporting. 24 hours 24 hours Integration data Not available with Essentials Limit of 2275 integration events per compute unit per month In addition, Infrastructure downsamples your data on the fly, as it's generated. All Infrastructure metric data types (including On-Host Integrations metrics) will display different granularity depending on the age of the data and the size of the time window. The following table illustrates when different downsampled buckets will be used, both in the Infrastructure UI and for queries: Bucket Size Used For Time Windows Covering... Data Retained For... Raw (5, 10 or 15 second) 0 to 59 minutes 7 days 1 minute 60 minutes to 6 hours 30 days 10 minutes 6 hours to 3 days Full account retention period 1 hour 3 days to 14 days Full account retention period 3 hours 14+ days Full account retention period Integration compute unit event limits The 2275 limit on integration events per compute unit per month is a limit on total Infrastructure integration events. It's not a limit of 2275 for each integration's events. Additional details and clarifications about this limit: This limit applies to all events from all integrations (cloud integrations and on-host integrations). The events are all handled the same. Default data received by the Infrastructure agent does not count against the 2275 event per compute unit limit. If you exceed your limit, we do not enforce this limit. If you exceed your limit, we'll review pricing options with you to ensure you get the most cost-effective pricing for your organization's integrations. Insights For accounts on our original product-based pricing, an Insights subscription extends your event data retention. An Insights Pro subscription allows you to customize the length of your event data retention. Logs For accounts on our original product-based pricing, log data can be retained for up to 30 days by New Relic. Shorter retention periods of 8 or 15 days are also available. Logs in context data retention New Relic Logs logs in context data retention policy is based on your current APM product subscription level. For more information, see APM data retention. Mobile For accounts on our original product-based pricing, Mobile data retention policies depend on your New Relic Mobile product subscription level. This includes data components such as metric data, aggregate metrics, key metrics, trace data, and event data. For information about your subscription-related data usage, see Mobile subscription usage. Mobile data retention policies Component Lite Enterprise Overview page data 24 hours 90 days Crash data and stack traces 24 hours 90 days HTTP requests (except errors) as metric data Unavailable 90 days HTTP request errors as metric data Unavailable 3 days Interaction traces Unavailable 90 days Custom events * Unavailable 1 day Mobile events * 1 day 8 days MobileBreadcrumb events * Unavailable 3 days MobileCrash events * 1 day 90 days MobileHandledException events * Unavailable 3 days MobileJSError events (React Native beta) * Unavailable 3 days MobileRequest events * Unavailable 3 days MobileRequestError events * Unavailable 3 days MobileSession events * 1 day 90 days * Learn how to extend retention of event data. Standard Mobile (legacy) data retention policies Unless otherwise noted, Insights event data is unavailable for Standard subscriptions. Component Standard Overview page data 7 days Crash data and stack traces 7 days HTTP requests (except errors) as metric data 7 days HTTP request errors as metric data 3 days Interaction traces Unavailable MobileCrash events 8 days MobileSession events 8 days Plugins The retention period for historical data depends on the product and subscription level. The following data retention periods exist for New Relic Plugins. Important Plugins is not supported with accounts that host data in the EU region data center. Plugins data retention Component Lite Essentials Pro Enterprise Metric data 24 hours 3 days 90 days 90 days Legacy Plugins data retention Component Standard Startup Small Business Metric data 7 days 14 days 30 days Synthetics For accounts on our original product-based pricing, Synthetics data retention policies depend on your Synthetics product subscription level. This includes data components such as metric data, aggregate metrics, key metrics, trace data, and Insights events. Tip Synthetics events do not count against an Insights Pro subscription. Your current subscription level appears in the right column of the Account summary page: Go to synthetics.newrelic.com > (account dropdown) > Account settings > Account > Summary. Synthetics data retention policies Component Lite Pro Synthetics monitor data 2 weeks 13 months Event data 2 weeks 13 months Also see the data retention details for APIs, including: Metric API All raw metric data points will be retained for 30 days. All additional aggregated data derived from the raw metric data points (for example, one-minute rollups) will be retained for 13 months. Any change to the retention period beyond such periods may result in a charge to you. Trace API See Trace API general requirements and limits. Data components For accounts on our original product-based pricing, the section below provides an explanation of some types of data components governed by the data retention rules of specific products: Event data: reported by most products See Event data retention for information on the event data type. Metric timeslice data: reported by APM, Browser, and Mobile Metric timeslice data is a specific type of data that is used for most metric charts and reports in New Relic APM, Mobile, and Browser. Important Note that metric timeslice data differs from other metric data types. All metric timeslice data is aggregated, but New Relic deals with fresh data and old data in different ways. Fresh data has specific policies applied to the data to keep granular views of performance as aggregate metrics. As data ages and becomes less useful in a granular state, we summarize that data and only keep key metrics. Aggregate metric timeslice data: reported by APM, Browser, and Mobile Aggregate metric timeslice data summarizes calls to specific methods in your application: how many times each one was called and response times. In the New Relic UI, you see the class and method names along with their aggregate numbers. Metric data aggregation depends on your subscription level. Subscription Level Aggregate retention Enterprise Aggregates (averages) to 1-hour periods after 8 days. After 90 days, the permanent metric data continues to be stored in 1-hour periods. This means you cannot obtain data granularity of less than 1 hour after 8 days, and only a subset of metrics are available after 90 days. Pro After 8 days Essentials After 3 days. Legacy Small Business, Startup, and Standard After 3 days. Lite After 2 hours. We retain your most recent data in one-minute increments. We also aggregate permanent metric data to day-size increments after 90 days. When looking at older data in small time windows, you may notice that charts show less detail. As data ages, it is aggregated into larger segments. Key metrics: reported by APM, Browser, and Mobile New Relic retains certain \"key\" metric timeslice data aggregations forever for Enterprise and Pro customers, for any number of applications. New Relic aggregates permanent key metric data to hour-size increments after 90 days. Product Key metrics APM Apdex, for app server Throughput and page views Response time, plus breakdown into tiers or categories on your app's main Overview chart Page load time, plus breakdown into segments Error rate CPU usage Memory usage Browser Apdex, for browser Browser page load time Throughput total. After 90 days, there is no breakout by browser type, and only the combined average value is available for the time range requested. Mobile Crash rate: For iOS and for Android Network throughput Network response time Network error rates Interaction traces Trace data: reported by APM, Browser, and Mobile Depending on the product, New Relic retains different types of trace data: Product Trace data APM Types of trace data: Transaction traces Distributed tracing Slow query samples Error details See APM data retention details. Browser Types of trace data: Session traces Browser traces JavaScript errors* See Browser data retention details. Mobile Types of trace data: App crash stack traces Interaction traces See Mobile data retention details. * JavaScript errors in the stack trace UI are saved as trace data. JS errors are also saved as events.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 238.50948,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "sections": "Overview of <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " metric <em>data</em> description. APM <em>data</em> <em>retention</em> policies For <em>accounts</em> on our <em>original</em> product-based pricing, APM <em>data</em> <em>retention</em> policies depend on your APM product subscription level. Component Lite Essentials Pro Metric timeslice <em>data</em> 24 hours 3 days 90 days Key metrics none forever forever Distributed"
      },
      "id": "6043f75364441f6967378ec6"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.38892,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> user model",
        "sections": "<em>Account</em>&#x2F;user model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " remain on our <em>original</em> user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the <em>account</em> dropdown, and select Manage your plan. If you see <em>billing</em> information about <em>data</em> ingested and the number of billable users, you’re on the new pricing"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Users and roles (original user model)",
        "Requirements",
        "Migrate users to the new account/user model",
        "View and manage users in UI",
        "Tip",
        "View pending SAML SSO users",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users and roles (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-05-04T17:32:51Z",
      "updated_at": "2021-04-21T16:18:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Migrate users to the new account/user model In April of 2021, we began allowing some New Relic organizations to migrate their original user model users to the newer New Relic One user model. This new user model offers many benefits in simplifying and improving how you manage your users' roles and access to accounts. To learn how to find out if you qualify for this and how to start, see Migrate users. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorer's Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard pricing tier includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.8154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users <em>and</em> roles (<em>original</em> user model)",
        "sections": "Users <em>and</em> roles (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " how you manage your users&#x27; roles and access to <em>accounts</em>. To learn how to find out if you qualify for this and how to start, see Migrate users. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-pricing-plan-usage/browser-subscription-usage": [
    {
      "sections": [
        "Infrastructure subscription usage",
        "Important",
        "Data generation",
        "Usage calculation",
        "Tip",
        "Table definitions",
        "General attributes",
        "Infrastructure attributes",
        "Query examples",
        "Compute units for last month",
        "Detailed host report (reproducing old usage report)",
        "Account hierarchy"
      ],
      "title": "Infrastructure subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "036858ab7d7fb54da536202e11788d0fc1029460",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/infrastructure-subscription-usage/",
      "published_at": "2021-05-06T04:56:54Z",
      "updated_at": "2021-03-16T14:44:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this document explains how we calculate billable usage for Infrastructure accounts. This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, a New Relic Infrastructure account will generate an NrDailyUsage event for every unique host on which an application instance existed over the last 24 hours. All Infrastructure events have a productLine attribute value of Infrastructure. For more information, see query examples. Usage calculation Monthly billable CUs for a host are calculated by the size of the host running Infrastructure (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. If your usage is fairly steady over time, you can estimate usage for the current month. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To view usage information in the UI: Go to: account dropdown > Account settings > Usage. On the Infrastructure usage page, set the time picker to Last 30 days. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Introduction to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns displayed depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not Infrastructure-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. Infrastructure attributes The following are usage-related attributes generated by Infrastructure. To query this data, use a productLine attribute value of Infrastructure. Attribute Description agentHostname ID used to uniquely identify the host for which this usage is reported. Any given hour of usage for this host will be counted only once when calculating infrastructureHoursUsed. There are several possible host identifiers reported by the New Relic agent. The usage reporting system will always use the agent-reported hostname to uniquely identify the host for the Infrastructure product, but will also record the cloudInstanceId, if present, for informational purposes. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This will not be present if no cloud provider was detected by the agent. cloudInstanceSize Size of the cloud instance for this host for CU billing purposes, as calculated according to the formula for infrastructureBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. infrastructureAgentVersion Version of the Infrastructure agent running on the host reporting this usage. If multiple agents are reporting from the same host, the version from the first agent seen in a given hour will be used. infrastructureAgentMemoryBytes Bytes of RAM available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureAgentProcessorCount Number of logical CPU cores available to the host, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedMemoryBytes Bytes of RAM available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureCloudDerivedProcessorCount Number of logical CPU cores available to the host, as reported by the cloud provider, used to calculate infrastructureBillingInstanceSize. infrastructureBillingInstanceSize Size of the host, for CU billing purposes. Calculated as: number of processors multiplied by memory in GiB. infrastructureHoursUsed Number of hours for which usage was recorded for the given host. When a host is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. infrastructureComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as: infrastructureHoursUsed multiplied by infrastructureBillingInstanceSize. For more about compute unit calculation, see CU pricing. infrastructureComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an agent and operating system combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData True if the Infrastructure agent reports no CPU count. missingRamData True if the Infrastructure agent reports no memory count. productLine The New Relic product the usage data is from. Always use the value Infrastructure when querying for Infrastructure usage data. usageType The type of entity this event records values for. This value is Host for Infrastructure. Query examples Here are some examples of NRQL queries you can use with your Infrastructure subscription usage data. You can run NRQL queries, and use the resulting charts in dashboards. For general information about how to use NRQL queries to get focused usage data, see Intro to usage data. Compute units for last month This query produces a count of the CUs used over the last month: SELECT sum(infrastructureComputeUnits) FROM NrDailyUsage WHERE productLine='Infrastructure' AND usageType='Host' SINCE last month UNTIL this month Copy Detailed host report (reproducing old usage report) This query reproduces as closely as possible the report you would have gotten by downloading the CSV from the previously available Infrastructure subscription usage UI: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID',agentHostname,cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type',infrastructureBillingInstanceSize AS 'Instance size',infrastructureHoursUsed AS 'Hours used',infrastructureComputeUnits AS 'Usage (CU)', infrastructureCloudDerivedMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureCloudDerivedProcessorCount AS 'Logical processors',infrastructureAgentMemoryBytes/(1024*1024*1024) AS 'Total RAM',infrastructureAgentProcessorCount AS 'Logical processors',infrastructureComputeUnitRule AS 'Business rule',missingCpuData, missingRamData, instanceSizeCapped,cloudZone,cloudInstanceId WHERE productLine='Infrastructure' AND usageType='Host' SINCE 1 day ago LIMIT 1000 Copy This NRQL query is different than the legacy usage report: Detailed host query Comments Time period This query includes only the last day of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to 1000 NRQL limits the results to 1000. If you have more than 1000 hosts and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE agentHostname LIKE ... to divide the data into groups). Business rule Business rule has been replaced with two attributes: infrastructureComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are now boolean flags describing what the value missing_data means when it is present in the infrastructureComputeUnitRule attribute. Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 1000 SINCE 1 day ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.0303,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Infrastructure subscription <em>usage</em>",
        "sections": "Infrastructure subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this document explains how we calculate billable <em>usage</em>"
      },
      "id": "603e87a7196a676ed2a83db4"
    },
    {
      "sections": [
        "APM (host-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (host-based)",
        "Query examples",
        "Usage for last month",
        "Usage per host per application",
        "Instance-hours per application",
        "Agent version information",
        "Account hierarchy",
        "Legacy per-host usage report",
        "Legacy host usage report (application listing)",
        "Use of Docker and other containers"
      ],
      "title": "APM (host-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "afaa1272f61e4c003e687d26e904438c0391cda1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-host-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, this doc explains how New Relic calculates billable usage for APM accounts that have host-based pricing (not CU-based pricing). This document also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance that existed during the last 24 hours Every unique host on which an application instance ran during the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations For host-based APM pricing, monthly billable usage is determined by the number of equivalent hosts used during that month. An equivalent host is defined as: 750 hours (standardized number of monthly hours) of connection to New Relic by a host or multiple hosts. For more on this calculation, see host-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's billable usage: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. See the Avg daily equivalent hosts for an account or grouping of accounts. The UI is meant to estimate your host usage but, especially for cloud environments, your usage may go up or down over time. For more information about the usage UI, see Introduction to New Relic subscription usage data. Table definitions Here are definitions of the column headers in the UI table and CSV files. The columns you see depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Account ID New Relic account ID. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily equivalent hosts Average equivalent hosts for that day. Calculated as the total number of hours reported for all unique hosts in a day, divided by 24. For more on how this is calculated, see Host-based pricing. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (host-based) The following are usage-related attributes generated by host-based APM accounts (not CU-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. When calculating monthly APM host usage, the calculation for equivalent hosts for a month assumes that a standard month has 750 hours: ` apmHoursUsed / 750 ` . apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. productLine The New Relic product the usage data is from. Always use the value APM when querying for APM CU usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage data can be analyzed in several ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. You can run NRQL queries and use the resulting charts in dashboards. Usage for last month This query uses New Relic’s standard number of hours per month (750) for the purpose of calculating APM equivalent hosts over the last month. SELECT sum(apmHoursUsed)/750 AS 'Equivalent hosts' FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Usage per host per application New Relic records usage per application instance, not strictly per application. This query gives an approximation of the usage for a given application on a given host. If unique application instances run sequentially on a host within a given day, this query could return an underestimate (this would be likely, for example, in a container environment). SELECT max(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName,hostId SINCE 1 day ago LIMIT 2000 Copy Instance-hours per application This query measures the total number of hours used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmHoursUsed) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have seen in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with other attributes. It no longer is used to describe whether the agent needs to be updated. Legacy host usage report (application listing) This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Use of Docker and other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of host-based usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02979,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (host-based) subscription <em>usage</em>",
        "sections": "APM (host-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, this doc explains how New Relic calculates billable"
      },
      "id": "603e834128ccbc66fdeba78b"
    },
    {
      "sections": [
        "APM (CU-based) subscription usage",
        "Important",
        "Data generation",
        "Usage calculations",
        "Tip",
        "Table definitions",
        "General attributes",
        "APM attributes (CU-based)",
        "Query examples",
        "Usage for last month",
        "Monthly usage for last year",
        "Instance-CUs per application",
        "Legacy host usage report",
        "Legacy per-host usage report",
        "Agent version information",
        "Agents needing updates for container tracking",
        "Account hierarchy",
        "Use of Docker or other containers"
      ],
      "title": "APM (CU-based) subscription usage",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original pricing plan usage"
      ],
      "external_id": "702d7b309f5c54a536605bf4fc7853c0d2bc5e20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/new-relic-account-usage/getting-started-usage/apm-cu-based-subscription-usage/",
      "published_at": "2021-05-06T04:48:29Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. For accounts on our original pricing plan, our usage UI lets you predictably track your data usage, and see how that may affect your pricing. This document explains how New Relic calculates billable usage for APM accounts that have CU-based pricing (not host-based pricing), and also provides available subscription usage attributes and example NRQL queries to use in the New Relic UI or with API calls. Data generation Once per day, an APM account will generate an NrDailyUsage event for: Every application instance created over the last 24 hours Every unique host on which an application instance existed over the last 24 hours These two types of events allow your usage data to be queried and analyzed in many different ways. To query the application events, use a usageType attribute value of Application. To query the host events, use a usageType attribute value of Host. All APM events use a productLine attribute value of APM. For more information, see APM query examples. Usage calculations Monthly billable CUs for a host are calculated by the size of the host running APM (number of CPUs + GBs of RAM) multiplied by the number of hours the host is connected to New Relic during that month. For more on how this is calculated, see CU-based pricing. Tip Only the account Owner and Admins can view the usage UI. However, anyone in your account can query usage data using the NrDailyUsage event. To get an estimate of the current month's eventual billable CUs: Go to: account dropdown > Account settings > Usage. On the APM usage page, set the time picker to Current month. Multiply the Avg daily compute units by the number of days in the current month. For more information about the usage UI, see Intro to subscription usage data. Table definitions Here are definitions of the column headers displayed in the UI table and CSV files. The columns visible depend on the Group by option selected at the top of the page. Header Definition Account name The name of the account. This can be a standalone account, a master account or a customer partnership. Host ID The unique identifier for that host. If the host is in AWS, we use the AWS-provided instance ID. For other hosts, New Relic assigns a host ID. For more about how this value is created, see hostID. Agent hostname The name of the host, as reported by the agent. For more about this value, see agentHostname. Average daily compute units The average daily compute units used. % of total usage The percentage of the total usage used. General attributes The following are general (not APM-specific) account-related attributes. These attributes can help you understand how your accounts and sub-accounts are using New Relic products. Attribute Description consumingAccountId ID of the New Relic account that is directly responsible for the stored events, as determined from the license key used. consumingAccountName Name of the New Relic account that is directly responsible for the stored events, as determined from the license key used. masterAccountId The ID of the master account that is either responsible for stored events or that is the parent of the consuming account. When a master account is the consuming account, masterAccountId is the consumingAccountId. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. masterAccountName Name of the master account that is either responsible for stored events, or that is the parent of the consuming account. When a master account is the consuming account, masterAccountName is the consumingAccountName. This attribute is present even for accounts that do not have a master account. This is to ensure continued reporting if the account is later made a master account. partnershipId Partner ID of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a New Relic customer partnership. partnershipName Name of the New Relic customer partnership associated with the account responsible for the stored events. This attribute is only present if the consuming account is associated with a customer partnership. subAccountId ID of the sub-account that is responsible for the stored event. When this attribute is present, subAccountId is the consumingAccountId. This attribute is only present if the consuming account is a sub-account (not a master account). subAccountName Name of the sub-account responsible for stored events. When present, this attribute is the same as the consumingAccountName. This attribute is only present if the consuming account is a sub-account (not a master account). timestamp UNIX timestamp (seconds since epoch) of the day and time when event generation was initiated. APM attributes (CU-based) The following are usage-related attributes generated by CU-based APM accounts (not host-based APM). To query APM-specific data, use a productLine attribute value of APM. Attribute Description agentHostname ID reported by the agent to uniquely identify the host for which this usage event is reported. This value can come from several sources in the application’s environment, but commonly is the value returned by the gethostname Linux syscall. In Docker environments, this attribute can take on the value (sometimes truncated) of the Docker container ID. agentHostname is one of three possible providers for the hostId value. apmAgentMemoryBytes Bytes of RAM available to the host, as detected by the New Relic agent from the host OS. apmAgentProcessorCount Number of logical CPU cores available to the host, as detected by the New Relic agent from the host OS. apmAgentVersion Version of the New Relic APM agent running in the application instance reporting this usage. Present only for events where usageType equals Application. To update your agent version, see Update the New Relic agent. apmAppId ID uniquely identifying the application that is reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmAppInstanceId ID uniquely identifying the application instance (the process running the New Relic APM agent). apmAppName Name of the application reporting this usage, as it appears in the APM product. Present only for events where usageType equals Application. apmBillingInstanceSize Size of the host, for CU-based billing purposes. Calculated as apmProcessorCount plus (apmMemoryBytes/(1024^3)), or the number of processors plus memory (GiB). apmCloudDerivedMemoryBytes Bytes of RAM available to the host, as defined by the cloud provider for the host’s instance type. apmCloudDerivedProcessorCount Number of logical processors available to the host, as defined by the cloud provider for the host’s instance type. apmComputeUnits Number of compute units (CUs) recorded for the given host. CUs are calculated as apmHoursUsed multiplied by apmBillingInstanceSize. For more information, see CU-based pricing. apmComputeUnitRule Describes the algorithm used to calculate the host size for CU usage. Values include: agent_collected_calculated_data: Use the host size data collected by the agent from the OS environment. cloud_provider_data: Use the host size data from the cloud provider. missing_data: Some host size data was missing. This could be due to an older agent that doesn't support reporting CPU and memory sizes, or an agent and OS combination for which CPU and memory sizes are not supported. This will result in the default host size (16) being applied. apmContainerCount The number of unique container IDs associated with this host. Present only for events where usageType equals Host. apmHoursUsed Number of hours for which usage was recorded for the given entity. When an entity is connected to New Relic for any amount of time within a given hour, that hour is counted toward usage. apmLanguage Name of the language that the usage-reporting application is written in, as reported by the New Relic agent. Examples: ruby, java, python. Present only for events where usageType equals Application. apmMemoryBytes Bytes of RAM available to the host. Used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedMemoryBytes, apmAgentMemoryBytes. apmProcessorCount Number of logical processors available to the host, used to calculate apmBillingInstanceSize. The value of one of these attributes will be used: apmCloudDerivedProcessorCount, apmAgentProcessorCount. bootId Linux boot ID of host for which this usage is reported, which is unique for each boot lifetime of each Linux operating system instance. Will only be present when the New Relic agent is one of the following versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher bootId is one of three possible providers for the hostId value. cloudInstanceId ID uniquely identifying the cloud host instance (example: an AWS EC2 instance) for which this usage is reported. (For example, for an AWS EC2 instance, the value would look like i-1234abcd5678ef900.) This is used to uniquely identify the host if the apmComputeUnitRule is cloud_provider_data. This will not be present if no cloud provider was detected by the agent. Agents with these versions will detect cloud provider data for AWS: Go: 1.11 or higher Java: 3.18.0 or higher .NET: 5.1.72.0 or higher Node.js: 1.21.0 or higher PHP: 5.5.0 or higher Python: 2.54.0.41 or higher Ruby: 3.12.1.298 or higher cloudInstanceId is one of three possible providers for the hostId value. cloudInstanceSize Size of the cloud instance for this host for CU-based APM billing purposes, as calculated according to the formula for apmBillingInstanceSize, using the CPU and memory sizes associated with the instance type defined by the cloud provider. Will not be present if no cloud provider was detected by the agent. cloudInstanceType Instance type of the host as defined by the cloud provider and detected by the agent. For example: c4.2xlarge. This will not be present if no cloud provider was detected by the agent. cloudProvider Name of the cloud provider for this host. Example values: aws, azure. This will not be present if no cloud provider was detected by the agent. cloudZone Name of the zone that a cloud provider host is located in. For example: eu-central-1b. This will not be present if no cloud provider was detected by the agent. containerId ID of the Docker or other Linux container in which the application instance is running. This will not be present if a container was not detected by the agent. Present only for events where usageType equals Application. This attribute is not used to uniquely identify hosts for billing purposes. hostId ID used to uniquely identify the host for which this usage is reported. Any given hour of APM usage for this host will be counted only once when calculating apmHoursUsed. There are several possible host identifiers reported by the New Relic agent. The attributes, if present, will be chosen to use in this order of precedence: cloudInstanceId, bootId, agentHostname. instanceSizeCapped This is True if the calculated host size was greater than 16 and therefore capped. missingCpuData This is True if the APM agent reports no CPU count. missingRamData This is True if the APM agent reports no memory count. productLine The New Relic product the usage data is from. APM usage data will have the value APM. Use this value when querying APM usage data. usageType For APM, this value can be either Application or Host, depending on the type of entity this event records usage for (other New Relic products will have different values for usageType). Events with both values are recorded so that usage can be broken down in many ways. For Application: the event represents usage for a single unique application instance for that day. For Host: the event represents usage for a single unique host for that day. Only Host entities are used to calculate billable usage. Application entities are useful for comparing usage between applications, but are not used for billing or contract purposes. Query examples Here are some examples of NRQL queries you can use with your account usage data. Usage for last month SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' SINCE last month UNTIL this month Copy Monthly usage for last year SELECT SUM(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Host' AND productLine='APM' FACET monthOf(timestamp) SINCE 12 month ago limit 13 Copy Instance-CUs per application This query measures the total number of CUs used by all instances (processes) of an application in the last 24 hours. It's useful for determining which applications are responsible for APM usage, but does not return results that match precisely how New Relic prices APM usage. Each application instance is counted separately in this query, even if it runs concurrently with another application instance on the same host, so the number of application instance-hours is likely to be greater than the number of host-hours (the billable quantity). SELECT sum(apmComputeUnits) FROM NrDailyUsage WHERE usageType='Application' AND productLine='APM' FACET consumingAccountName,consumingAccountId,apmAppName SINCE 1 day ago LIMIT 2000 Copy Legacy host usage report This query returns data once provided in the \"host usage report\": a listing of applications running on each host. Note that while APM usage is counted on an hour-by-hour basis, per-hour usage data is no longer available via the API or UI. FROM NrDailyUsage SELECT min(timestamp) AS 'Earliest reporting day',max(timestamp) AS 'Latest reporting day' FACET apmAppName,hostId,agentHostname,consumingAccountName,consumingAccountId WHERE usageType='Application' AND productLine='APM' SINCE 1 month ago LIMIT 2000 Copy Legacy per-host usage report This query produces a close approximation of the CSV report you would have gotten in the deprecated UI system: FROM NrDailyUsage SELECT consumingAccountId AS 'Account ID', hostId, cloudProvider AS 'Host provider', cloudInstanceType AS 'Instance type', apmBillingInstanceSize AS 'Instance size', apmHoursUsed AS 'Hours used', apmComputeUnits AS 'Usage (CU)', apmMemoryBytes/(1024*1024*1024) AS 'Total RAM', apmProcessorCount AS 'Logical processors', apmContainerCount AS 'Container count', apmComputeUnitRule AS 'Business rule', missingCpuData, missingRamData, instanceSizeCapped, cloudZone, cloudInstanceId WHERE productLine='APM' AND usageType='Host' SINCE 1 day ago LIMIT 2000 Copy This NRQL query is different than the legacy usage report: Per-host query Comments Time period This query includes only the last 24 hours of usage. To see the usage aggregated over a longer time period, change the SINCE clause. Results limited to a maximum number of rows NRQL limits the number of rows returned. If you have more hosts than the maximum number of rows returned and want to get the complete set of hosts, you can narrow your query with more WHERE clauses to return subsets of the data (for example, WHERE cloudInstanceId LIKE “%0”) to divide the data into up to 16 groups, modulo the last character in the AWS instance ID. Docker container IDs A single Docker container ID does not appear in this report. A Docker container ID is reported only at the application instance level of granularity (usageType='Application'). For the host (usageType='Host'), a count of unique containers is reported, since there are often very many. While choosing just one container ID to report for a host had been informative, now there is more data reported at the appropriate level of granularity. Business rule Business rule has been replaced with two attributes: apmComputeUnitRule defines how the size of the host was calculated, depending on what data was available from the agent. It no longer describes whether the agent needs to be updated to provide more accurate host naming in a container environment (update_agent_for_container_environment). missingCpuData, missingRamData, and instanceSizeCapped are boolean flags describing what the value missing_data means when it is present in the apmComputeUnitRule attribute. Agent version information Use this query to see which agent versions are running on your applications in the last 24 hours. This information can be useful in determining whether the agent needs to be upgraded to report a more accurate host name in a Docker container environment (either a Linux boot ID or a cloud provider instance ID). FROM NrDailyUsage SELECT count(*) WHERE productLine='APM' AND usageType='Application' FACET consumingAccountId, consumingAccountName, apmAppName, apmAgentVersion, apmLanguage SINCE 1 day ago LIMIT 2000 Copy Agents needing updates for container tracking This query helps identify applications where an agent is reporting a hostname that may be the same as a container ID. The result of the query is not a definitive list of such applications, but helps you determine which applications may be affected. Hosts that are inaccurately named after a Docker container will have a hostId value that is the same as the first part of the containerId value. The apmComputeUnitRule != ‘cloud_provider_data’ clause removes from consideration hosts that are named by the cloud provider and thus not named after an ephemeral container. FROM NrDailyUsage SELECT latest(hostId) WHERE containerId is not null AND apmComputeUnitRule != 'cloud_provider_data' AND productLine='APM' AND usageType='Application' FACET consumingAccountId,apmAppName,apmAgentVersion,apmLanguage,containerId SINCE 1 day ago LIMIT 2000 Copy Account hierarchy This query is useful for seeing the account hierarchy (partnership, master, sub-accounts). SELECT count(*) FROM NrDailyUsage FACET partnershipName,masterAccountName,masterAccountId,consumingAccountName,consumingAccountId LIMIT 2000 SINCE 1 day ago Copy Use of Docker or other containers Some previous New Relic APM agents may miscount containers as hosts, which may lead to over-reporting of compute unit (CU) usage. To fix this calculation for Linux-based containers (including Docker), upgrade your APM agent to these versions: Go: 1.11 or higher Java: 3.42.0 or higher .NET: 6.19.330.0 or higher Node.js: 2.1.0 or higher PHP: 7.5.0.199 or higher Python: 2.90.0.75 or higher Ruby: 4.4.0.336 or higher",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 244.02324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM (CU-based) subscription <em>usage</em>",
        "sections": "APM (CU-based) subscription <em>usage</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important This doc is for <em>accounts</em> on our <em>original</em> Product-based <em>pricing</em>. If you&#x27;re on the newer <em>pricing</em> <em>plan</em>, see New Relic One <em>pricing</em> <em>plan</em>. Not sure which you&#x27;re on? See Overview of <em>pricing</em> plans. For <em>accounts</em> on our <em>original</em> <em>pricing</em> <em>plan</em>, our <em>usage</em> UI lets you predictably track your data <em>usage</em>"
      },
      "id": "603e834128ccbc709beba790"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model": [
    {
      "sections": [
        "Set session timeouts",
        "Requirements",
        "Overview",
        "Features",
        "Tip",
        "Select the session timeout value",
        "Select SAML SSO browser re-authentication",
        "Redirect after SAML timeout"
      ],
      "title": "Set session timeouts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "a61d4c61f52ee18be0763a9cd526634d9d2f50f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/set-session-timeouts/",
      "published_at": "2021-05-06T04:52:48Z",
      "updated_at": "2021-03-30T15:37:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's session configuration feature allows you to set limits on idle time before your users' browser sessions automatically expire. Requirements This doc is for users on our original user model. If you're on the New Relic One user model, see Session settings. Overview Session configuration allows you to set limits on idle time before your users' browser sessions automatically expire. A message appears three minutes before the system logs them out. Users then need to sign back in to continue. For accounts configured with SAML Single Sign On (SSO), an additional option is available to set how often the users' browser sessions are re-authenticated. Users and Restricted Users can view the time period for automatic timeout, but they cannot change it. To view the timeout value: Go to account dropdown > Account settings > Authentication > Session configuration. Features Tip Owner or Admins The session configuration options provide an additional level of security to ensure that unattended browsers will automatically time out. Session values are automatically stored in the session cookie. Additional features include: Feature Notes Easy setup Admins use the slide bar in New Relic's user interface to select predefined time periods. Default is two weeks. Separate options available by role Admins can choose for Restricted User sessions to never time out even if they select a session timeout setting. This is useful, for example, when you use a Restricted User login for demos. Automatic inheritance for sub-accounts By default, sub-accounts inherit the same session configuration as their master account. Most restrictive by default If users have multiple accounts, the most restrictive setting applies, regardless of which account the user currently is using. Integration with SAML SSO logout URL If the account's SAML SSO configuration does not include a logout URL, New Relic includes a link from Session configuration for the Owner to set it up. If the Admin is not also the Owner, a message about the SAML SSO logout URL requirement appears. Additional re-authentication setting for SAML SSO In addition to the session timeout option, Admins can select the time (15 minutes to 2 weeks, or never) for how often a SAML-authenticated browser session must be re-authenticated. Select the session timeout value The process to select the session timeout value is the same for both SAML and non-SAML configurations. For additional SAML configuration options, see SAML SSO browser reauthentication. To select a predefined period for session timeouts with SAML SSO accounts, the account Owner must have previously identified the logout URL in the SAML SSO configuration settings. If this has not been set up, the account Admin can view the session timeout slide bar but not change it. If the Admin is also the account Owner, the Session configuration includes a link to go directly to New Relic's SAML SSO Configuration and identify the logout URL. For more information, see Setting up SSO. To select a predefined period for session timeouts: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the slide bar to select a time period for idle sessions to expire and log out automatically. Optional: Select the checkbox option if you do not want restricted users' browser sessions to expire. Select Save my changes. Changes take effect immediately. Select SAML SSO browser re-authentication To select a predefined period for SAML SSO-authenticated browser sessions to be re-authenticated: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the SAML re-authentication time slide bar to select a time period for New Relic to check the browser session. Select Save my changes. Redirect after SAML timeout If you are logged out due to a session idle timeout on an account configured for SAML, you will be sent to the New Relic login page. Because your account is configured for SAML, you do not have a direct New Relic login. To be redirected to your SAML provider for authentication: Enter your email address in the Email field. Leave the Password field blank. Click the Sign In button. You will then be redirected to your SAML provider. Once reauthorized, you will then be returned to the New Relic website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.9163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". Automatic inheritance for sub-<em>accounts</em> By default, sub-<em>accounts</em> inherit the same session configuration as their master <em>account</em>. Most restrictive by default If users have multiple <em>accounts</em>, the most restrictive setting applies, regardless of which <em>account</em> the user currently is using. Integration with SAML"
      },
      "id": "603e8914196a678f45a83de3"
    },
    {
      "sections": [
        "Trial and Lite accounts",
        "Important",
        "Trial accounts",
        "Trial lengths",
        "End of trial period",
        "Caution"
      ],
      "title": "Trial and Lite accounts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "050d5fa2eea990cf75a7d4de2c15bebd612860f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated/",
      "published_at": "2021-05-06T05:00:33Z",
      "updated_at": "2021-03-16T09:14:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This document applies to our original product-based pricing, which is no longer available for new accounts. For an explanation of pricing plans, see Overview of pricing. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. Accounts not upgraded with a subscription before the end of the trial period become Lite accounts, losing many key features and data. Trial accounts When you start a free trial, you gain access to all the features of a Pro account including full access to support. Our products allow you to view and track trends. Pro level data retention allows you to track how changes in your business, such as marketing approaches or new technology, affect trends. Trial lengths Trial lengths depend on the product: Product Trial Length Alerts 30 days APM 14 days Browser 14 days Infrastructure 30 days Insights 30 days Mobile 30 days Synthetics 14 days End of trial period Once the trial ends, your account becomes a Lite account. Lite accounts can access all of our products except Infrastructure and Insights, but lose access to most product features and support. Caution Lite accounts retain only very recent data, which could cause the loss of valuable trend data. Avoid this by subscribing before your trial ends.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 240.27231,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Trial <em>and</em> Lite <em>accounts</em>",
        "sections": "Trial <em>and</em> Lite <em>accounts</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": "Important This document applies to our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em>, which is no longer available for new <em>accounts</em>. For an explanation of <em>pricing</em> plans, see Overview of <em>pricing</em>. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. <em>Accounts</em>"
      },
      "id": "603ec29a196a67b153a83dad"
    },
    {
      "sections": [
        "Original product-based pricing and billing",
        "Important",
        "Overview of original pricing",
        "Annual vs monthly pricing plans",
        "APM and Infrastructure: Compute-unit vs host-based pricing",
        "Compute unit pricing",
        "Host-based pricing",
        "Tip",
        "How is a \"host\" defined?",
        "Prorated billing",
        "Manage subscription and billing settings",
        "View summary information",
        "View or change current subscription",
        "View usage",
        "View or update billing information"
      ],
      "title": "Original product-based pricing and billing",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "92a9a2aaacf80af45767d6f8f15283c541b2bf08",
      "image": "https://docs.newrelic.com/static/a5a6fd548a3c62e03183f13e6be6688a/77a9e/Accounts_CU-calculation_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-pricing/product-based-pricing/",
      "published_at": "2021-05-05T13:47:24Z",
      "updated_at": "2021-03-11T03:16:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc explains our original product-based pricing plan. For more on pricing and user-related changes, see Overview of changes. Overview of original pricing New Relic has two pricing plans: a newer one called New Relic One pricing, and our original pricing plan. Our original pricing plan was based on subscriptions to specific products, like APM, Mobile, and Infrastructure. If you are on this pricing plan, your users are likely on our original user model and use these original user docs. To understand more about the new pricing and user changes, see Overview of changes. For accounts on original pricing, this doc includes: Explanation of how our original pricing plan works How to manage subscription and billing settings Annual vs monthly pricing plans Here are the differences between billed-annually and billed-monthly plans: Pricing plans Details Annual (best price) New Relic charges your credit card each month for a year for a committed number of hosts or compute units. You can increase this amount at any time, and charges will adjust with the next monthly bill. Your account will automatically renew at the end of the year unless you change your subscription. Early termination, downgrade, or decrease in service: Unless your order form states otherwise, you will be charged at the level and quantity of service ordered until the end of the then-current term if you cancel or downgrade to a lower level of service or fewer hosts during your commitment year. Monthly (no commitment) New Relic charges your credit card each month for a specified number of hosts or compute units. The account Owner can change the credit card number at any time: From the New Relic UI's account dropdown, select Account settings > Subscription. Your billing will adjust with your next monthly bill. Your account automatically renews each month unless you change your subscription. You can cancel service or downgrade to a lower level of service without penalty. APM and Infrastructure: Compute-unit vs host-based pricing New Relic APM offers a choice between two pricing models: compute unit (CU) based pricing and host-based pricing. New Relic Infrastructure offers only CU-based pricing. This section shows how both options are calculated, and explains what \"host\" means in these pricing contexts: Compute unit pricing CU-based pricing is available for these New Relic products: New Relic APM (choice of either CU-based pricing or host-based pricing) New Relic Infrastructure: only CU-based pricing With CU-based pricing, your monthly price is determined by the size of the host (computing power and memory) running New Relic and the number of hours it connects to New Relic during the month. If a host is connected to New Relic at any time during an hour, that hour counts towards the CU calculation. Each host is counted separately for each New Relic account the host reports data to. For example, if you have a master account with two sub-accounts, each running applications on the same host for 3,000 CUs in a given month, the usage for the master account will be 6,000 CUs. For New Relic APM, CU-based pricing is the best choice if you have many cloud-based dynamic computing resources. For this reason, CU-based pricing is sometimes referred to as cloud pricing. CUs are calculated as follows: The maximum size of a given host (CPUs + GB RAM) is capped at 16. Examples: If a host has 2 CPU cores, 2GB RAM, and connects to New Relic for one hour (or less than one hour), it consumes 4 CUs. If a host has 2 CPU cores, 2GB RAM, and connects to New Relic for an entire month (750 hours used as standard month size), it consumes 3,000 CUs. You can purchase blocks of CUs to be consumed on a monthly basis. The total number of CUs purchased monthly is calculated by adding up the estimated CU consumption for all hosts for the month. There is no month-to-month rollover of unused CUs. Also, New Relic does not charge by JVMs, containers (such as Docker or Cloud Foundry), or application instances--it charges by the hosts running those containers or application instances. Price points vary, depending on the New Relic product and subscription level. You can view CU-based account usage from the New Relic UI. For more on product-specific pricing: see the APM pricing and Infrastructure pricing pages. Host-based pricing Tip Pricing for your New Relic APM account can be either CU-based or host-based. New Relic Infrastructure uses only CU-based pricing. With host-based pricing, New Relic charges based on the number of equivalent hosts used in a month. One equivalent host is defined as: a host connected to New Relic for 750 hours (750 hours used as standard month size). If a host is connected to New Relic at any time during an hour, that hour counts towards the host calculation. These hours can be divided across multiple hosts. For example, you might have three hosts that are each connected to New Relic for 250 hours during one month: these hours would add up to equal one equivalent host. Each host is counted separately for each New Relic account the host reports data to. For example, if you have a master account with two subaccounts, each running applications on the same single host for 750 hours in a given month, the usage for the master account will be 2 equivalent hosts. Once connected to New Relic, hosts are distinguished by their unique hostnames. A host is connected to New Relic when the language agent is active and is deployed on the host. New Relic does not charge by containers (such as Docker or Cloud Foundry), JVMs, or application instances; it charges by the hosts running those containers or application instances. New Relic APM gives you a choice between host-based pricing and CU-based pricing. Host-based pricing is ideal if you have mainly static environments, consisting of hosts you manage in your own data center. For specifics on pricing amounts, see the APM pricing page. How is a \"host\" defined? To understand how New Relic computes both host-based pricing and CU-based pricing, it's important to understand how the word host is used. A host can be one of the following: A physical machine is a hardware-based device with dedicated physical resources, including memory, processing, and storage. Each machine has its own OS which applications run on. A virtual machine (VM) is the software implementation of a physical machine that executes programs like a physical machine. One or more virtual machines can run on a physical machine. Each virtual machine has its own OS and allocated virtual machine resources such as RAM and CPU. A cloud instance is a type of virtual machine that is run in the public cloud. In this context, virtual machines and cloud instances are different from Java Virtual Machines (JVMs) and containers. For New Relic's pricing calculation purposes, a month is defined as 750 hours. Prorated billing If you upgrade your subscription partway through your billing period, you will be subject to a prorated charge for the higher level of service over the remainder of your billing period. This will be invoiced or charged to your credit card when the upgrade is submitted. You will be notified about this charge as part of the subscription change process. If you have questions, contact your New Relic account representative. If you need to report billing issues, contact New Relic's Billing Department. Manage subscription and billing settings Important Note that as of July 30 2020, we have a newer pricing plan. To learn more, see Overview of pricing. The account Owner can perform many subscription self-service functions directly from the user interface: From one.newrelic.com, select the account dropdown. Select your choice of self-service options. When making subscription changes, be sure to save any changes, agree to New Relic's Terms of Service and Supplemental Payment Terms as appropriate, and select Pay now. Optional: If you downgrade your subscription, complete New Relic's survey. Here is a summary of the available options from your account dropdown in the New Relic user interface: View summary information To view summary information about your subscription: From the account dropdown, select Account settings > Account > Summary. This includes: Account users and their roles (User, Admin, and Owner) or add-on roles Account name Subscription usage information Agent versions Billing credit card email License key Sub-accounts if applicable Subscriptions to New Relic products Tip Your account ID (which is not the same as your license key) is part of the URL after you sign in to New Relic. View or change current subscription To view or change your current subscription options: From the account dropdown, select Upgrade subscription/Change subscription. OR From the account dropdown, select Account settings > Account > Subscription. Options include: Upgrade or downgrade your pricing and subscription levels Cancel your subscription or delete your account Change your account's tax location for billing purposes If you need more help, contact your New Relic account representative, or contact New Relic's Billing Department. View usage To view your subscription usage information: From the account dropdown, select Account settings > Usage. View or update billing information To view or update your New Relic account's billing information: From the account dropdown, select Account settings > Account > Billing. Billing settings include: Account contact information, including name, organization, address, phone, email, purchase order number, etc. Billing history, including invoices and receipts Credit card or other payment method",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.27164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "sections": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". For <em>accounts</em> on <em>original</em> <em>pricing</em>, this doc includes: Explanation of how our <em>original</em> <em>pricing</em> plan works How to manage subscription and <em>billing</em> settings Annual vs monthly <em>pricing</em> plans Here are the differences between billed-annually and billed-monthly plans: <em>Pricing</em> plans Details Annual (best <em>price</em>) New Relic"
      },
      "id": "6043f753e7b9d212085799da"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-users-roles/user-migration": [
    {
      "sections": [
        "Authentication domain settings: SAML SSO, SCIM, and more",
        "Important",
        "Requirements",
        "What is an authentication domain?",
        "Configure authentication domain via UI",
        "Source of users",
        "Tip",
        "Authentication",
        "Configure SAML SSO",
        "Other settings"
      ],
      "title": "Authentication domain settings: SAML SSO, SCIM, and more",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "8690bc2587ac53c35203d51075e1a2df0de33bc4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/authentication-domains-saml-sso-scim-more/",
      "published_at": "2021-05-06T04:51:53Z",
      "updated_at": "2021-05-06T04:51:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for managing users on the New Relic One user model. For managing users on our original user model, see Original users. Learn about user models. To manage their users, New Relic organizations can configure \"authentication domains,\" which control how users are added to a New Relic account, how they’re authenticated, and more. Requirements To check if you have access to these features, you can go to the authentication domain settings UI and see if you can configure settings. Requirements to configure these settings: These features are for managing users on the New Relic One user model. For users on our original user model, see Original account management. Pro tier is required for all options except automated user management, which requires Enterprise tier. You must be in a user group that has the Authentication domain manager role. SAML support: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 What is an authentication domain? An \"authentication domain\" is a grouping of New Relic users governed by specific settings, like how they are provisioned (added to New Relic), how they are authenticated (logged in), and more. When someone creates a New Relic account, the default authentication settings are: Users are manually added to New Relic Users manually log in using their username and password Those default settings would be under one \"authentication domain.\" Another authentication domain might be set up like this: Users are added and managed automatically from an identity provider (like Okta or Azure AD) Users are logged in using SAML single sign-on (SSO) from an identity provider When you add users to New Relic, they’re added within a specific authentication domain. Users in one authentication domain are not available for management when in another domain. Typically organizations will have either one or two authentication domains: one for the manual, default methods and one for the methods tied to their identity provider. Configurable elements of an authentication domain include: Source of users (managed manually via the UI or managed automatically via identity provider) Authentication method (using manual username/password login or using SSO). Session management (how long a user can stay logged in, how long a browser session can be idle) Configure authentication domain via UI If you meet the requirements, you can add and manage authentication domains. To do this: from the account dropdown, click Organization and access, and then click Authentication domains. For more about the configuration options, keep reading. Source of users Tip Before configuring SCIM, please read our AUM docs. From the authentication domain UI, you can set one of two options for how users are added to New Relic: Manual: this means that your users are added manually to New Relic. SCIM: enabling SCIM lets you use our automated user management (AUM) to import/manage users from your identity provider. Please read requirements and impacts before enabling. Authentication The authentication method is the method by which New Relic users log in to New Relic. All users in an authentication domain have a single authentication method. Once a user authenticates with New Relic, they have access to any account they've been granted permissions for. There are two authentication options: Username/password: your users log in via standard username and password. SAML SSO: your users log in via SAML single sign-on (SSO) via your identity provider. Tip How users authenticate to New Relic is independent of how they're added (manually or SCIM). SCIM-added users require SAML SSO but manually-added users may or may not use SAML SSO. Configure SAML SSO Tip Recommended: first read the requirements. If you're using Azure, Okta, or OneLogin, your first step is to get and enable the New Relic integration for that service. To do this, follow the \"Add SCIM/SSO application\" instructions in these docs and then return here for more instructions: Azure | Okta | OneLogin. If you're using a custom SAML 2.0 integration, note that when configuring SAML manually, we require the option for signed SAML assertions to be enabled. Next, you'll enable SAML SSO from New Relic's authentication domain UI: Under Authentication, click Configure. Under Method of authenticating users, select SAML SSO. Under Provided by New Relic, review your New Relic SAML service provider details. Under Provided by you, set the source of SAML metadata with a URL pointing to your SAML metadata (recommended). This URL is supplied by your identity provider and should conform to SAML V2.0 metadata standards. Tip Alternatively, set the source of SAML metadata by selecting Upload a certificate and selecting Choose file. This should be a PEM encoded x509 certificate. A certificate should only be uploaded if your identity provider does not support dynamic configuration. Under Provided by you, set the SSO target URL supplied by your identity provider. If your organization's SAML integration provides a redirect URL for logout, enter the Logout redirect URL; otherwise, leave it blank. Next, you'll need to give your users access to New Relic. This usually takes the form of creating groups and adding users to groups and accounts. Other settings In the authentication domain UI, you can control several other settings for the users in that domain, including: Length of time users can remain logged in. Amount of idle time before a users' session expires. User access requests: This controls how basic users become full users. You can either allow basic users to self-upgrade or you can require review by admins (users with the Authentication domain manager role). Allowing users to self-upgrade allows them to quickly respond to issues. If Require review is set, admins receive an email when an upgrade request is made, and can manage requests in the User management UI. For more about basic users and full users, see User type. (Note that upgrade works differently for users on our original user model.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 401.72006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Source of <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> management",
        "body": "Important This doc is for managing <em>users</em> on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>model</em>. For managing <em>users</em> on our original <em>user</em> <em>model</em>, see Original <em>users</em>. Learn about <em>user</em> models. To manage their <em>users</em>, <em>New</em> <em>Relic</em> organizations can configure &quot;authentication domains,&quot; which control how <em>users</em> are added to a <em>New</em>"
      },
      "id": "6043f69a196a67380e960f4c"
    },
    {
      "sections": [
        "Tutorial: Add new user groups and roles (New Relic One user model)",
        "Requirements",
        "Overview",
        "View available accounts",
        "Grant groups access to roles and accounts",
        "Tip",
        "Create custom role",
        "Add users"
      ],
      "title": "Tutorial: Add new user groups and roles (New Relic One user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "b1e5f303b6446f264c9d8c5020871a6990e052fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/tutorial-add-new-user-groups-roles-new-relic-one-user-model/",
      "published_at": "2021-05-06T04:50:42Z",
      "updated_at": "2021-05-06T04:50:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This tutorial will walk you through some common procedures for managing users on the New Relic One user model. Requirements Some notes on who this tutorial is for and requirements: This tutorial is for managing users on our New Relic One user model. Assigning new group access grants requires Pro or Enterprise edition. For details, see user management requirements. Role requirements: Using the Organization and access UI to manage group access requires Authentication domain manager and Organization manager roles. Using the User management UI to add/edit users requires Authentication domain manager role. Overview Before using this tutorial, we first recommend reading these docs: Where to find user management features in the UI Important user management concepts This tutorial will walk you through how to: View available accounts How to grant groups access to roles and accounts How to create custom roles How to add users to groups View available accounts Understanding the accounts in your New Relic organization is important for granting groups access, because you must choose what accounts to grant them access to. To view the accounts in your organization: go to the account dropdown, click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what your users are able to do in New Relic. By default, organizations on the New Relic One account/user structure have two available groups: Admin and User. These default groups automatically have access to specific standard roles and are assigned to the account in which they were initially added. If you have Pro or Enterprise edition, you have the ability to create new groups and new roles, and to assign groups to other accounts in your organization. Tip Note that you can also import users from your identity provider. To view existing group access grants: from the account dropdown, click Administration, and then click Organization and access. To grant a user group access to a role and an account: From the Organization and access UI, click Group access. Complete the UI prompts to assign an existing group or a new group access to a specific role on a specific account. If you have questions about these concepts, see User management concepts. Optional: To give a group the ability to manage other users, under Scope, select Organization and choose the Authentication domain manager role. For more on the difference between organization- and account-scoped roles, see Standard roles. (Note that these users must also have an account-scoped role. Without that, you may see a message that the user doesn't belong to an organization.) Optional: to continue adding access for the same group, select Add another at the bottom before clicking Add access. Some important tips to understand when managing groups: If a group has basic users in it, their basic user status overrides any group-related restrictions. When you create a new group, note that your users don't have access to that group until both of these steps are done: 1) The group has been granted access, and 2) Users have been added to that group. Create custom role When granting a group access to roles and accounts, you can use our default standard roles that have default capabilities, or you can create your own roles with unique sets of capabilities. To view existing roles: from the account dropdown, click Administration, then click Organization and access, and then click Roles. To create a custom role, click Add new custom role. Note that there are some hidden capabilities that are not available for adding to a custom role. For details, see Capabilities. To learn more about how roles and groups relate, see User management concepts. Add users If you've created a new group, you must make sure that the users are added to that group. If users don't have the group assigned, no access will be granted. To view or manage users: from the account dropdown, click Administration, and click User management. If you don’t see that option, review the requirements. Groups reside within the boundaries of an authentication domain. If your organization has more than one authentication domain, the domain switcher in the top left will show which one you’re in. To add a user, click Add user. Complete the prompts in the UI, including choosing the user type and group. Any custom groups you’ve added should be available from the group dropdown. If the custom group you choose has been granted access to a role and an account, once you add the user to that group, that user will now have access. To edit a user’s group or other details: click on the user you want to edit and make changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 401.70013,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Add <em>new</em> <em>user</em> groups and roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>model</em>)",
        "sections": "Tutorial: Add <em>new</em> <em>user</em> groups and roles (<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>model</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> management",
        "body": ", click Administration, click Organizations and access, and then click Accounts. Grant groups access to roles and accounts Groups are used to manage what <em>your</em> <em>users</em> are able to do in <em>New</em> <em>Relic</em>. By default, organizations on the <em>New</em> <em>Relic</em> <em>One</em> <em>account</em>&#x2F;<em>user</em> structure have two available groups: Admin"
      },
      "id": "603e7d67196a671e26a83dc5"
    },
    {
      "sections": [
        "Add and manage users, groups, and roles",
        "Important",
        "Requirements",
        "Tip",
        "Manage users in the UI",
        "Overview of user management concepts",
        "User management definitions",
        "Example user management tasks",
        "Add and edit users",
        "Create new groups and roles",
        "Grant users ability to manage other users",
        "Control how basic users upgrade to full users",
        "Track changes"
      ],
      "title": "Add and manage users, groups, and roles",
      "type": "docs",
      "tags": [
        "Accounts",
        "Accounts and billing",
        "New Relic One user management"
      ],
      "external_id": "9e37836740ce56302734d4af636bdbe087b4dbc3",
      "image": "https://docs.newrelic.com/static/b1c2da968a637f68569e890c8bd72a1c/c1b63/new-relic-one-user-mgmt.png",
      "url": "https://docs.newrelic.com/docs/accounts/accounts-billing/new-relic-one-user-management/add-manage-users-groups-roles/",
      "published_at": "2021-05-06T03:40:32Z",
      "updated_at": "2021-05-06T03:40:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our New Relic One user model, we provide various user management features, including the ability to: Use role based access control (RBAC) to assign default or custom roles to user groups Create custom user groups Grant user groups access to specific roles and accounts Important This doc applies to users on the New Relic One user model. For managing users on our original user model, see Original users. Not sure which user model you're on? See User models. Requirements Tip To quickly check if you can access these user management features, go to the user management UI and see what you have access to. Requirements: These features allow managing of users on the New Relic One user model. To learn more, see User models. Some capabilities require the Organization manager role and some require the Authentication domain manager role. For details, see Standard roles. Full Stack Observability edition requirements: To manage user groups, roles, and access grants: Pro or Enterprise is required. To import users from an identity provider: Enterprise is required A New Relic user can have a maximum of either three concurrent active sessions, or three unique IP addresses in use at any given time. Manage users in the UI For users on the New Relic One user model, to find your user management options: From the account dropdown, select Administration. There are two user management UI pages there: User management: Use this to add users, update user information, and approve upgrade requests. Organization and access: Use this page to create and manage groups, roles, and access grants. Important If you can't use or access these UI pages, it may be because your users are on our original user model or because you don't have the required user management role. Overview of user management concepts To optimally use our more advanced user management features, it's important to first understand the concept of the \"access grant.\" An access grant gives a group of users access to a) a role and b) an account. For a New Relic organization that has many accounts, groups typically require more than one access grant because users in a group usually need access to multiple accounts and roles. The diagram below explains the elements that make up an access grant. Note that if your organization is on Standard edition and want to assign a user to a default group (Admin or User), you don't need to create an access grant: you would simply add a user to that group and you're done. But for Pro and Enterprise edition, if you're trying to grant users access to a custom group, a custom role, or to other accounts, you must create an access grant. A diagram explaining how you can grant user groups access to roles and accounts. Note that this applies to users on our New Relic One user model (and not our original user model). Some tips on setting up access grants: It may help to first plan out how your access grants will be organized. How many accounts will you have? What user groups will get access to which roles and which accounts? Will you use our default groups and roles or create your own custom groups and roles? For smaller, flatter organizations okay with full internal transparency, you may only need a couple groups. A common configuration for organizations with many accounts (roughly 20 or more) is setting up groups with the more organization-scoped roles (Organization manager, Authentication domain manager, and Billing user) on the primary account, and then on other accounts, setting up groups with the more product-scoped roles (like All product admin, Standard user, or custom roles). User management definitions Here are some definitions of our user management terms and how they relate to each other: A capability is an ability to use or edit a specific, granular New Relic feature. Examples of capabilities: The ability to modify APM settings The ability to delete alert conditions A role is a set of capabilities. Our default standard roles have various capability sets, and you can create custom roles that have a custom set of capabilities. A user group has one or more roles associated with it. You assign your users to a group. We have default user groups (Admin and User), and you can make your own groups. An access grant is what grants a user group access to roles and specific New Relic accounts. An access grant essentially states, \"This group is assigned this role on this New Relic account.\" Adding a user to a group doesn’t do anything unless that group is included in an access grant. An authentication domain contains a set of users who are added to New Relic and who log in to New Relic in the same way. For example, you may have one authentication domain for users who log in via username/password and another authentication domain for users who log in via SAML. If a user is a basic user, this takes precedence over any role-related limitations. For more on this, see Basic user and roles. Example user management tasks In the Organization and access UI, you can create custom groups, roles, and grant access to user groups. Here are some example user management procedures: Add and edit users To add or edit users, use the User management UI. To add users there: If you have multiple authentication domains, choose one from the authentication domain dropdown. Click Add user. Complete the process, including choosing user type and user group. Create new groups and roles See our user management tutorial. Grant users ability to manage other users To grant your users the ability to manage other users, you'll need to add users to a group that has the Authentication domain manager role. Important Users cannot have only organization-scoped roles assigned; they must also be in a group that has account-scoped roles (for example, the default Admin group). You have two options: From the User management UI, you can add a user to the default Admin group, which includes both of those roles. OR You can assign those roles to a custom group. From the Organization and access UI: Select Access grants, and choose To this organization. Create an access grant that assigns the Authentication domain manager role to a custom group. From the User management UI, add users to that group. To see a tutorial on creating new groups and roles, see Tutorial. Control how basic users upgrade to full users See the authentication domain settings. Track changes To see an audit log of changes to your account, including user management actions, you can query the NrAuditEvent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 400.52594,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add and manage <em>users</em>, groups, and roles",
        "sections": "Grant <em>users</em> ability <em>to</em> manage other <em>users</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>One</em> <em>user</em> management",
        "body": " given time. Manage <em>users</em> in the UI For <em>users</em> on the <em>New</em> <em>Relic</em> <em>One</em> <em>user</em> <em>model</em>, to find <em>your</em> <em>user</em> management options: From the <em>account</em> dropdown, select Administration. There are two <em>user</em> management UI pages there: <em>User</em> management: Use this to add <em>users</em>, update <em>user</em> information, and approve upgrade"
      },
      "id": "603e7bce28ccbc415beba74c"
    }
  ],
  "/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model": [
    {
      "sections": [
        "Bulk user actions (original user model)",
        "Important",
        "Update users in bulk",
        "Example CSV file",
        "Troubleshooting",
        "If you have a backup CSV file",
        "If no backup file exists"
      ],
      "title": "Bulk user actions (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "ebfb52863fb5b57a14a2c298a2518c42f23c0908",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/roles-permissions/bulk-user-actions-add-delete-or-update-batches-users/",
      "published_at": "2021-05-05T14:42:43Z",
      "updated_at": "2021-03-13T02:57:36Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc explains how to manage users on our original user model. Not sure which user model you're on? See Overview of pricing and users. With the Bulk user actions feature, you can add, update, or delete multiple users at once. This can be helpful for: adding roles when multiple new employees start deleting roles when multiple employees leave giving multiple employees Admin roles Update users in bulk Some important rules and recommendations for making bulk user actions: You cannot make updates to your own role or an Owner role. You cannot edit an existing user's email address or name. You should avoid editing an existing user by deleting and re-adding them because this can have unintended consequences (for example, API keys associated with the original user will be lost). To add new user roles, update existing user roles, or delete user roles: Go to: account dropdown > Account settings > Users and roles, and add /bulk_actions at the end of the URL. Example URL: https://account.newrelic.com/accounts/123456789/users/bulk_actions Copy Download a Backup CSV file. Downloading a backup file keeps a record of the users in your account prior to changes being made, and allows you to easily re-add any users that may be removed accidentally. Download a CSV of users or a CSV template. Each bulk action (add, update, or delete) will require its own CSV file. New Relic recommends saving your files with an account number, date, and the bulk action being performed. For example: account_123456789_delete_users_2018-06-29 Populate that sheet with only the users whose roles you'll be applying the chosen bulk action for. Remove users from the spreadsheet whose roles you do not want to change. Bulk action Fields Add Required fields: user email, name, type, base role Optional field: add-on role Update Required fields: user email (do not edit), name (do not edit), base role Optional field: add-on role Delete Required fields: only user email Example CSV file The following is an example downloaded CSV of users that lists four users on the New Relic account. In this example, we want to delete the user Alex Datanerd. All other users must be removed before uploading the CSV. Email Name Type Base role Add-on roles Last active User1 @Company.com Jane Datanerd full Owner 2/6/20 User2 @Company.com Jamie Datanerd full Admin 6/6/20 User3 @Company.com Alex Datanerd full User apm_admin, browser_admin 7/25/20 User4 @Company.com Pat Datanerd basic User alerts_admin, insights_admin, apm_admin 4/6/20 The other three users, whose roles will remain unchanged, are removed. The final CSV only shows Alex's name. This file would then be uploaded using the Delete users in CSV option in the UI. Email Name Type Base role Add-on roles Last active User3 @Company.com Alex Datanerd full User apm_admin, browser_admin In the UI, select a CSV action: Add, Update, or Delete the users listed within the CSV file. Upload the new CSV, and select Save changes. Troubleshooting If a user is removed or changed during your CSV file upload by mistake, you can add them back through another CSV file upload. Important Be aware that associated permissions may be lost when a user is deleted and re-added. For example, associated API keys will need to be re-added. If you have a backup CSV file If you have a backup CSV file saved: Open the backup CSV file. Populate the backup CSV file with the users whose roles will be modified. Select a CSV action for the new CSV file: add, update, or delete Upload the new CSV, and select Save changes. If no backup file exists If no backup CSV file has been previously downloaded: Download the CSV file template. Populate the spreadsheet with the information required for the user to be restored. Action Required fields Add User email, name, type, base role. Optional: Add-on role Update User email, name, type, base role. Optional: Add-on role Delete User email Select a CSV action for the new CSV file: Add, Update, or Delete. Upload the new CSV, and select Save changes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.74673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Bulk <em>user</em> actions (<em>original</em> <em>user</em> model)",
        "sections": "Bulk <em>user</em> actions (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": ": <em>account_123456789_delete_users</em>_2018-06-29 Populate that sheet with only the <em>users</em> whose <em>roles</em> you&#x27;ll be applying the chosen bulk action for. Remove <em>users</em> from the spreadsheet whose <em>roles</em> you do not want to change. Bulk action Fields Add Required fields: <em>user</em> email, name, type, base <em>role</em> Optional field"
      },
      "id": "6043f605e7b9d264815799e1"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.38867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> <em>user</em> model",
        "sections": "<em>Account</em>&#x2F;<em>user</em> model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " remain on our <em>original</em> <em>user</em> model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the <em>account</em> dropdown, and select Manage your plan. If you see <em>billing</em> information about data ingested and the number of billable <em>users</em>, you’re on the new pricing"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Event data retention (original pricing plan)",
        "Important",
        "Overview of event data retention",
        "Extend your event retention",
        "Insights Pro",
        "How number of events stored is calculated",
        "Insights Pro event overage example",
        "Disable/enable Transaction and Pageview event reporting",
        "Tip",
        "Flexible data retention",
        "How it works",
        "Manage retention via UI",
        "Master and sub-accounts",
        "Glossary",
        "Manage flexible retention via API",
        "List customizable retention event namespaces",
        "List active rules on an account",
        "Show active rule on an account/namespace pair",
        "Create a new rule",
        "Delete an existing rule",
        "Copy existing sub-account rules to other sub-accounts",
        "For more help"
      ],
      "title": "Event data retention (original pricing plan)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original data retention"
      ],
      "external_id": "76d1289aad7de08b355bb8c313f9e7a42a5779d8",
      "image": "https://docs.newrelic.com/static/3071b381c71a877c79b8c9881e57c26b/8cdda/Account_usage_flex-retention.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-data-retention/event-data-retention-original-pricing-plan/",
      "published_at": "2021-05-06T04:49:35Z",
      "updated_at": "2021-03-30T13:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. New Relic products report a wide range of event data. Different products have different data retention periods, and different ways to extend event data retention. You can customize the length of your event data retention through flexible event retention. Overview of event data retention All New Relic product subscriptions come with a certain level of data retention that governs how long different types of data are retained. One type of data governed by data retention rules is event data. Event data is available in some UI charts and tables, and also available for querying via NRQL, our querying language. There are events reported from products by default, and there are custom events: each have their own retention rules, depending on the product and subscription level. Here are some examples of how different product subscriptions can affect event data retention: Free/Lite APM subscription: default-reported events available for 1 day. No custom events available. Pro APM subscription: default-reported events available for 8 days. Custom events available for 1 day (and able to be extended with Insight Pro). To see your subscriptions, go to the Account summary page. Extend your event retention Product Method APM, Browser, and Mobile Event data retention can be extended with a paid subscription to these products (see product data retention). To extend retention of both default-reported events and custom events further, you need an Insights Pro subscription. Infrastructure Event data retention can be extended with a paid Infrastructure subscription. See Infrastructure data retention rules. Synthetics Event data retention can be extended with a paid Synthetics subscription. See Synthetics data retention rules. Custom events Custom events reported by agent APIs or the Event API: Extension requires an Insights Pro subscription. Insights Pro Important As of April 12, 2021, we are upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. A paid Insights subscription is what governs the extension of event data retention for: Our APM, Browser, Mobile, and Serverless products Custom events that come from an agent API or from the Event API Important Note that having an Insights Pro subscription doesn't require use of the Insights UI (insights.newrelic.com) to query your data: there are other querying options available. To see the data retention governed by your Insights subscription, go to: account dropdown > Account settings > Usage > Event data retention. With an Insights Pro subscription, you can use flexible retention to customize how your event data is retained. This lets you keep only the data you need, for as long as you need it. How number of events stored is calculated This is an explanation of how the number of stored events are calculated by default for an Insights Pro subscription. (Note that with flexible retention, you have more fine-grained control over the retention period.) The events stored is calculated based on 1) total events stored over time (calculated based on the events generated per week) and 2) the weeks of data retention available. This equation can be represented like this: events stored = (events generated per week) * (weeks of retention) Copy An Insights Pro subscription provides a given number of weeks of data retention as well as a given number of events over that retention period. For example: (200M transactions per week) * (4 weeks of retention) = 800M events stored in Insights (16M transactions per week) * (50 weeks of retention) = 800M events stored in Insights For Insights Pro subscriptions, data is purged based on retention window, not volume. It is deleted from the system once it's past the retention window. For example: If your Insights license is for 800 million events with a 4 week retention period, your data would start being purged after it is older than four weeks. Temporary spikes in data exceeding your subscription level will still be recorded, but consistent overage should be solved by upgrading your subscription level or decreasing data collected. For customers without an Insights Pro subscription, New Relic may throttle or downsample events to a limit of not more than than 4,000 events per host per minute. Insights Pro event overage example In this example, you have an Insights Pro subscription with a license for 800 million events over 4 weeks, a rate of 200 million events per week. You have APM Pro, Browser Pro, and Mobile Enterprise. A fifth week of data is added via your subscriptions, bumping you to a total of 1 billion events stored within your plan: If you are using 975 million events, you are not over your retention. If you are using 1.25 billion events, you are over your retention. Disable/enable Transaction and Pageview event reporting Tip Owners or Admins The Insights Data summary UI page is used to see the types of events being reported. You can also use this page to enable and disable the reporting of PageView and Transaction events. To view Data summary: Go to insights.newrelic.com > Manage data. Select the Summary tab. Note: if you disable PageView or Transaction event reporting, this can affect some New Relic UI elements. You may see some empty charts on some UI pages that rely on this data. Go to insights.newrelic.com > Manage data > Summary. From the Summary tab, select Configure data sources. Toggle the appropriate switch on or off, then save. Toggling Transaction on or off will cause reporting agents to restart themselves. For more about configuring event reporting, see Event data retention. Flexible data retention With an Insights Pro subscription, you get access to flexible retention, which lets you define how some types of event data are retained. This lets you keep only the event data you need, for as long as you need it. You can manage your flexible retention through the UI or through our GraphQL API. Requirements to use this feature: An Insights Pro subscription or equivalent trial. Applies only for events governed by an Insights Pro subscription. To use this feature, you must be an account Owner or data retention add-on manager for your account. How it works To understand how standard event data retention works, first read Event data retention. With flexible retention, you specify the data retention for applicable event namespaces across your accounts. This gives you per-event namespace control of your data. The retention that you specify for an event namespace will be shared by all the event types under that namespace. If some namespaces are not relevant to you, you can avoid collecting their event data entirely. Your retention value can’t be lower than the included retention or higher than the default retention. You can control data retention either in our UI or by API. Manage retention via UI You can control data retention either using our GraphQL API or in the UI. To do this with the UI, go to Account Settings > Usage > Data management section. Your retention changes take effect within 24 hours after updating. Tip Want a demo of how the UI works? Check out our videos for UI overview and assigning a role. Go to rpm.newrelic.com > (account dropdown) > Account settings > Usage > Data management section: you can view your current retention plans, modify them, and perform overrides, all in the UI. Master and sub-accounts When it comes to master and sub-accounts with flexible retention, be aware of the following: Feature Description Account inheritance Retention set for a master account is inherited by all sub-accounts, unless a sub-account has its own custom retention override. Switch between accounts You can toggle between your master and sub-accounts by using the Account switcher in the data retention UI. Moving sub-accounts If a sub-account is moved to another master, it will adopt the retention settings of the new master account it’s under. However, if the sub-account has its own custom retention override, it’ll persist and ignore the current retention of its master account. Copy retention values from one sub-account to other sub-accounts From within a sub-account, select Copy retentions and use that sub-account as a source or template to apply those same namespace retention values to one or more other destination or target sub-accounts. Note: Source and destination sub-accounts must all be under the same master account. Glossary To understand the terms used with flexible retention, see the following: Term Description Event namespace An event's namespace corresponds to one or more event types that share a single data retention value. For more information, see Event namespaces (types). You can also use NerdGraph to get the list of customizable event namespaces. Retention value The number (in days) that specifies how long your event data is stored. Retention rule The event namespace and retention value pair that you specify to override the current retention. Licensed retention Retention period that’s determined in weeks by your Insights Pro subscription contract. Included retention Retention period for which your data is stored but not charged under the Insights Pro subscription. For details, see the data retention details for a specific product. Paid retention Retention period for which your data is stored and is charged under the Insights Pro subscription. By default, your licensed retention determines this value but Flexible retention lets you override it. Default retention Retention period that comes out of the box. This is based on the total of included retention plus licensed retention. Manage flexible retention via API You can control data retention with either NerdGraph (our GraphQL API) or in the UI. The following API examples show how to alter data retention via the NerdGraph GraphiQL explorer. Your retention changes take effect within 24 hours after updating. List customizable retention event namespaces To list the customizable retention event names spaces for your account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { customizableRetention { eventNamespaces { namespace } } } } } } Copy List active rules on an account To list active rules on an account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRules { id deletedAt deletedById createdAt createdById retentionInDays namespace } } } } } Copy Show active rule on an account/namespace pair To show the active rule on a specific account/namespace pair, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRule(namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } } } } Copy Create a new rule To create a new rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCreateEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\", retentionInDays: 8) { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Delete an existing rule If you delete a rule applied to a sub-account, that sub-account will adopt the current retention value of its master account for the given namespace. If you delete a rule applied to a master account, the default retention value will re-apply for the given namespace. To delete an existing rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementDeleteEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Copy existing sub-account rules to other sub-accounts You can specify a sub-account to be the template or source account, and have other destination sub-accounts adopt the same namespace retention values of the source sub-account. Note: all sub-accounts must be within the same master account. To copy an existing set of retentions, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCopyRetentions( sourceAccountId: SOURCE_ACCOUNT_ID, destinationAccountIds: [DESTINATION_ACCOUNT_ID_1, DESTINATION_ACCOUNT_ID_2, DESTINATION_ACCOUNT_ID_3]) { success failure } } Copy Success and failure will return lists of destination account ids which were successful (or failed) in copying rules from the source account. For more help For details about the data retention of other products or integrations, see that specific documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.5745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Event data retention (<em>original</em> pricing plan)",
        "sections": "Master <em>and</em> sub-<em>accounts</em>",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " overview and assigning a <em>role</em>. Go to rpm.newrelic.com &gt; (<em>account</em> dropdown) &gt; <em>Account</em> settings &gt; Usage &gt; Data management section: you can view your current retention plans, modify them, and perform overrides, all in the UI. Master and sub-<em>accounts</em> When it comes to master and sub-<em>accounts</em>"
      },
      "id": "6043f713e7b9d2ccee579a1d"
    }
  ],
  "/docs/accounts/original-accounts-billing/product-based-pricing/overview-data-retention-components": [
    {
      "sections": [
        "Event data retention (original pricing plan)",
        "Important",
        "Overview of event data retention",
        "Extend your event retention",
        "Insights Pro",
        "How number of events stored is calculated",
        "Insights Pro event overage example",
        "Disable/enable Transaction and Pageview event reporting",
        "Tip",
        "Flexible data retention",
        "How it works",
        "Manage retention via UI",
        "Master and sub-accounts",
        "Glossary",
        "Manage flexible retention via API",
        "List customizable retention event namespaces",
        "List active rules on an account",
        "Show active rule on an account/namespace pair",
        "Create a new rule",
        "Delete an existing rule",
        "Copy existing sub-account rules to other sub-accounts",
        "For more help"
      ],
      "title": "Event data retention (original pricing plan)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original data retention"
      ],
      "external_id": "76d1289aad7de08b355bb8c313f9e7a42a5779d8",
      "image": "https://docs.newrelic.com/static/3071b381c71a877c79b8c9881e57c26b/8cdda/Account_usage_flex-retention.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-data-retention/event-data-retention-original-pricing-plan/",
      "published_at": "2021-05-06T04:49:35Z",
      "updated_at": "2021-03-30T13:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc is for accounts on our original Product-based pricing. If you're on the newer pricing plan, see New Relic One pricing plan. Not sure which you're on? See Overview of pricing plans. New Relic products report a wide range of event data. Different products have different data retention periods, and different ways to extend event data retention. You can customize the length of your event data retention through flexible event retention. Overview of event data retention All New Relic product subscriptions come with a certain level of data retention that governs how long different types of data are retained. One type of data governed by data retention rules is event data. Event data is available in some UI charts and tables, and also available for querying via NRQL, our querying language. There are events reported from products by default, and there are custom events: each have their own retention rules, depending on the product and subscription level. Here are some examples of how different product subscriptions can affect event data retention: Free/Lite APM subscription: default-reported events available for 1 day. No custom events available. Pro APM subscription: default-reported events available for 8 days. Custom events available for 1 day (and able to be extended with Insight Pro). To see your subscriptions, go to the Account summary page. Extend your event retention Product Method APM, Browser, and Mobile Event data retention can be extended with a paid subscription to these products (see product data retention). To extend retention of both default-reported events and custom events further, you need an Insights Pro subscription. Infrastructure Event data retention can be extended with a paid Infrastructure subscription. See Infrastructure data retention rules. Synthetics Event data retention can be extended with a paid Synthetics subscription. See Synthetics data retention rules. Custom events Custom events reported by agent APIs or the Event API: Extension requires an Insights Pro subscription. Insights Pro Important As of April 12, 2021, we are upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. A paid Insights subscription is what governs the extension of event data retention for: Our APM, Browser, Mobile, and Serverless products Custom events that come from an agent API or from the Event API Important Note that having an Insights Pro subscription doesn't require use of the Insights UI (insights.newrelic.com) to query your data: there are other querying options available. To see the data retention governed by your Insights subscription, go to: account dropdown > Account settings > Usage > Event data retention. With an Insights Pro subscription, you can use flexible retention to customize how your event data is retained. This lets you keep only the data you need, for as long as you need it. How number of events stored is calculated This is an explanation of how the number of stored events are calculated by default for an Insights Pro subscription. (Note that with flexible retention, you have more fine-grained control over the retention period.) The events stored is calculated based on 1) total events stored over time (calculated based on the events generated per week) and 2) the weeks of data retention available. This equation can be represented like this: events stored = (events generated per week) * (weeks of retention) Copy An Insights Pro subscription provides a given number of weeks of data retention as well as a given number of events over that retention period. For example: (200M transactions per week) * (4 weeks of retention) = 800M events stored in Insights (16M transactions per week) * (50 weeks of retention) = 800M events stored in Insights For Insights Pro subscriptions, data is purged based on retention window, not volume. It is deleted from the system once it's past the retention window. For example: If your Insights license is for 800 million events with a 4 week retention period, your data would start being purged after it is older than four weeks. Temporary spikes in data exceeding your subscription level will still be recorded, but consistent overage should be solved by upgrading your subscription level or decreasing data collected. For customers without an Insights Pro subscription, New Relic may throttle or downsample events to a limit of not more than than 4,000 events per host per minute. Insights Pro event overage example In this example, you have an Insights Pro subscription with a license for 800 million events over 4 weeks, a rate of 200 million events per week. You have APM Pro, Browser Pro, and Mobile Enterprise. A fifth week of data is added via your subscriptions, bumping you to a total of 1 billion events stored within your plan: If you are using 975 million events, you are not over your retention. If you are using 1.25 billion events, you are over your retention. Disable/enable Transaction and Pageview event reporting Tip Owners or Admins The Insights Data summary UI page is used to see the types of events being reported. You can also use this page to enable and disable the reporting of PageView and Transaction events. To view Data summary: Go to insights.newrelic.com > Manage data. Select the Summary tab. Note: if you disable PageView or Transaction event reporting, this can affect some New Relic UI elements. You may see some empty charts on some UI pages that rely on this data. Go to insights.newrelic.com > Manage data > Summary. From the Summary tab, select Configure data sources. Toggle the appropriate switch on or off, then save. Toggling Transaction on or off will cause reporting agents to restart themselves. For more about configuring event reporting, see Event data retention. Flexible data retention With an Insights Pro subscription, you get access to flexible retention, which lets you define how some types of event data are retained. This lets you keep only the event data you need, for as long as you need it. You can manage your flexible retention through the UI or through our GraphQL API. Requirements to use this feature: An Insights Pro subscription or equivalent trial. Applies only for events governed by an Insights Pro subscription. To use this feature, you must be an account Owner or data retention add-on manager for your account. How it works To understand how standard event data retention works, first read Event data retention. With flexible retention, you specify the data retention for applicable event namespaces across your accounts. This gives you per-event namespace control of your data. The retention that you specify for an event namespace will be shared by all the event types under that namespace. If some namespaces are not relevant to you, you can avoid collecting their event data entirely. Your retention value can’t be lower than the included retention or higher than the default retention. You can control data retention either in our UI or by API. Manage retention via UI You can control data retention either using our GraphQL API or in the UI. To do this with the UI, go to Account Settings > Usage > Data management section. Your retention changes take effect within 24 hours after updating. Tip Want a demo of how the UI works? Check out our videos for UI overview and assigning a role. Go to rpm.newrelic.com > (account dropdown) > Account settings > Usage > Data management section: you can view your current retention plans, modify them, and perform overrides, all in the UI. Master and sub-accounts When it comes to master and sub-accounts with flexible retention, be aware of the following: Feature Description Account inheritance Retention set for a master account is inherited by all sub-accounts, unless a sub-account has its own custom retention override. Switch between accounts You can toggle between your master and sub-accounts by using the Account switcher in the data retention UI. Moving sub-accounts If a sub-account is moved to another master, it will adopt the retention settings of the new master account it’s under. However, if the sub-account has its own custom retention override, it’ll persist and ignore the current retention of its master account. Copy retention values from one sub-account to other sub-accounts From within a sub-account, select Copy retentions and use that sub-account as a source or template to apply those same namespace retention values to one or more other destination or target sub-accounts. Note: Source and destination sub-accounts must all be under the same master account. Glossary To understand the terms used with flexible retention, see the following: Term Description Event namespace An event's namespace corresponds to one or more event types that share a single data retention value. For more information, see Event namespaces (types). You can also use NerdGraph to get the list of customizable event namespaces. Retention value The number (in days) that specifies how long your event data is stored. Retention rule The event namespace and retention value pair that you specify to override the current retention. Licensed retention Retention period that’s determined in weeks by your Insights Pro subscription contract. Included retention Retention period for which your data is stored but not charged under the Insights Pro subscription. For details, see the data retention details for a specific product. Paid retention Retention period for which your data is stored and is charged under the Insights Pro subscription. By default, your licensed retention determines this value but Flexible retention lets you override it. Default retention Retention period that comes out of the box. This is based on the total of included retention plus licensed retention. Manage flexible retention via API You can control data retention with either NerdGraph (our GraphQL API) or in the UI. The following API examples show how to alter data retention via the NerdGraph GraphiQL explorer. Your retention changes take effect within 24 hours after updating. List customizable retention event namespaces To list the customizable retention event names spaces for your account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { customizableRetention { eventNamespaces { namespace } } } } } } Copy List active rules on an account To list active rules on an account, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRules { id deletedAt deletedById createdAt createdById retentionInDays namespace } } } } } Copy Show active rule on an account/namespace pair To show the active rule on a specific account/namespace pair, go to api.newrelic.com/graphiql and run the following: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRule(namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } } } } Copy Create a new rule To create a new rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCreateEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\", retentionInDays: 8) { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Delete an existing rule If you delete a rule applied to a sub-account, that sub-account will adopt the current retention value of its master account for the given namespace. If you delete a rule applied to a master account, the default retention value will re-apply for the given namespace. To delete an existing rule, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementDeleteEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Copy existing sub-account rules to other sub-accounts You can specify a sub-account to be the template or source account, and have other destination sub-accounts adopt the same namespace retention values of the source sub-account. Note: all sub-accounts must be within the same master account. To copy an existing set of retentions, go to api.newrelic.com/graphiql and run the following: mutation { dataManagementCopyRetentions( sourceAccountId: SOURCE_ACCOUNT_ID, destinationAccountIds: [DESTINATION_ACCOUNT_ID_1, DESTINATION_ACCOUNT_ID_2, DESTINATION_ACCOUNT_ID_3]) { success failure } } Copy Success and failure will return lists of destination account ids which were successful (or failed) in copying rules from the source account. For more help For details about the data retention of other products or integrations, see that specific documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 252.91684,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Event <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "sections": "Event <em>data</em> <em>retention</em> (<em>original</em> pricing plan)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " overview and assigning a role. Go to rpm.newrelic.com &gt; (<em>account</em> dropdown) &gt; <em>Account</em> settings &gt; Usage &gt; <em>Data</em> management section: you can view your current <em>retention</em> plans, modify them, and perform overrides, all in the UI. Master and sub-<em>accounts</em> When it comes to master and sub-<em>accounts</em>"
      },
      "id": "6043f713e7b9d2ccee579a1d"
    },
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.38855,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to pricing <em>and</em> user model",
        "sections": "<em>Account</em>&#x2F;user model changes explained",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " remain on our <em>original</em> user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the <em>account</em> dropdown, and select Manage your plan. If you see <em>billing</em> information about <em>data</em> ingested and the number of billable users, you’re on the new pricing"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Users and roles (original user model)",
        "Requirements",
        "Migrate users to the new account/user model",
        "View and manage users in UI",
        "Tip",
        "View pending SAML SSO users",
        "Add a new user",
        "Important",
        "Update user type (basic vs full)",
        "Update account roles",
        "Delete a user",
        "Update the account Owner",
        "User types: basic user and full user",
        "Account roles",
        "Add-on roles",
        "View roles",
        "Assign a managed role",
        "Create a custom role",
        "Assign a custom role",
        "Edit or delete a custom role",
        "Account permissions",
        "Alert permissions",
        "APM permissions",
        "Browser permissions",
        "Infrastructure permissions",
        "Insights permissions",
        "Mobile permissions",
        "Synthetics permissions",
        "Workloads permissions"
      ],
      "title": "Users and roles (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original users and roles"
      ],
      "external_id": "95ae42f3474b43dec394245cfc3e23628449a1ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-users-roles/users-roles-original-user-model/",
      "published_at": "2021-05-04T17:32:51Z",
      "updated_at": "2021-04-21T16:18:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For users on our original user model, an introduction to how the user model works, including user roles and permissions, and how to add and manage users. Requirements This doc and the surrounding section of docs shows you how to manage users who are on our original user model. If you were a New Relic customer before July 30 2020, you likely have users on our original user model (and not the New Relic One user model). One way to quickly check your users' user model: if you can see users in the Users and roles UI, those users are on our original user model. Want to learn more about user model changes? See Overview of user models. Migrate users to the new account/user model In April of 2021, we began allowing some New Relic organizations to migrate their original user model users to the newer New Relic One user model. This new user model offers many benefits in simplifying and improving how you manage your users' roles and access to accounts. To learn how to find out if you qualify for this and how to start, see Migrate users. View and manage users in UI If your New Relic account has users on our original user model, you can use the Users and roles UI. To access this UI: select the account dropdown, select Account settings, and select Users and roles. Some features in the UI are visible only to account Owners and Admins. Tip You can also use the New Relic REST API to obtain a list of everyone and their roles in your New Relic account. Here are some instructions and tips for adding and managing users via the UI: View pending SAML SSO users New Relic accounts with SAML Single Sign On (SSO) may have a list of Pending users. These are individuals who have been added to the SAML-enabled account but have not yet confirmed. Add a new user Tip Owner or Admins To add a new user to your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. In the upper right corner, click New user. Enter the appropriate name and email address. Select their base role as either Admin, User, or Restricted. Select Add user. The new user will receive an email notification automatically from New Relic. Important New Relic recommends a maximum of 1,000 accounts per user. Additional accounts may result in limited access to some New Relic features. Update user type (basic vs full) To update a user's type (basic user versus full user): Go to: account dropdown > Account settings > Users and roles > Users. Either select a user and edit their type or bulk update the type for multiple useres. For more about this, see User type. Update account roles Tip Owner or Admins To update a person's role and capabilities: Go to: account dropdown > Account settings > Users and roles > Users. Select the person's name. Under Roles and capabilities, select their base role as Admin, User, or Restricted. The account Owner must update the Owner role. Delete a user Tip Owner or Admins To remove a user from your New Relic account: Go to: account dropdown > Account settings > Users and roles > Users. Click on the name of the person you would like to update. Click Delete User. Tip You can also add, update, or delete users in bulk via CSV file. Update the account Owner A New Relic account can have only one Owner role at any time. You must be the current account Owner to change your role to someone who currently has an Admin role for the account. If the current Owner is unavailable, contact your account representative at New Relic, or get support at support.newrelic.com. You cannot delete or remove your assigned Owner role. However, if the account has one or more Admin role, you can change an Owner to an Admin. Go to: account dropdown > Account settings > Account > Users and roles. Above the Active users list, select Change owner. If an account has no Admins, this button won't be available. Select someone who currently has an Admin role for the account. Refresh the page for changes to take effect. Your previous Owner role automatically changes to an Admin role. To find out who is the current assigned Owner: Go to: account dropdown > Account settings > Account > Users and roles. View the Base role column to locate your account Owner. The Change owner button is only visible to the current account Owner. If the current Owner is unable to change the role (for example, that person no longer is with your organization), contact your account representative at New Relic, or get support at support.newrelic.com. User types: basic user and full user Important This section is for users on our original user model. If you're on our New Relic One user model, see our New Relic One user docs. Starting March 2021, we ended the preview period for these basic users. The preview period gave basic users the same permissions as full users. For more on this, see our Explorer's Hub post on user type changes. The user type (basic user or full user) determines what features a user has access to. Below are details on the two user types. Note that billing-related aspects only apply if you're on New Relic One pricing. If you're on our original pricing plan, billing impacts do not apply. Basic user. Details: These users have access to basic features like setting up reporting of data, running queries of data, making custom charts and dashboards, and setting up alerts. They do not have access to Full-Stack Observability features (for more details on feature access, see Capabilities). Basic users can upgrade to become full users in the UI. They will see prompts when attempting to access unavailable features. They cannot self-upgrade; they must request an upgrade. No matter what custom group a basic user is assigned to, they always have the capabilities of a basic user: no more and no less. Full user. Details: Full users have access to our Full-Stack Observability features, which include our curated UI experiences like APM, infrastructure monitoring, browser monitoring, mobile monitoring, and synthetic monitors. For details on what's available, see Capabilities. For organizations on New Relic One pricing: these users are billable. The Standard pricing tier includes one free full user and up to five total. If a user in your organization is set as a basic user in one account and a full user in another, the user has full user access for all accounts. For how to edit user type, see Manage users. Account roles A New Relic account can have only one Owner. To share an account with other users in your organization, create Admins, Users, or Restricted Users. Account role Description Owner The person who initially creates the New Relic account and receives all billing queries. The Owner has complete access to all of the account information. Admin Can add, edit, and delete users, and can enable or set up features. User Can use (and optionally set up) New Relic features. In general, Admins take responsibility for setting up features, and Users and Restricted Users can use them. Restricted User One or more individuals who can view (but not set up or change) any New Relic features. The Restricted User role is useful, for example, for demos. You can change your New Relic session settings so that Restricted User logins do not time out, and then set the user interface to Kiosk mode. Add-on roles With add-on roles, you can grant variable levels of access to all users in your account, across the entire platform of New Relic products. This allows you to tailor your account permissions levels to suit the needs of Users and Restricted Users within your account. Giving a User or Restricted User add-on manager access to a product grants them the equivalent of Admin capabilities within the product. They will continue to have User or Restricted User capabilities for all other New Relic products. For example, you could make a software engineer in your company a User in most products, but assign Admin-level access to APM. For another example, you might assign the Nerdpack manager role to a user, and that gives them the ability to subscribe and unsubscribe New Relic One applications to an account. There are two types of add-on roles: Add-on Manager roles are available to grant permissions on a per-product basis. Giving a User or Restricted User managed add-on access to a product grants them the equivalent of Admin capabilities within the product. Custom add-on roles can grant feature-specific permissions across different New Relic products. For example, a group of Users could have the ability to acknowledge incidents and close violations in New Relic Alerts, but not have the ability to modify your existing alert preferences. Individuals on a master account that has sub-accounts automatically have the same level of access for all sub-accounts. Below are options for managing both managed add-on roles and custom add-on roles: View roles To view the list of individuals assigned to your account and their current roles: Go to account dropdown > Account settings > Users and roles. Assign a managed role Tip Owner and Admins Managed add-on roles are available by default for each New Relic product. Adding a managed role for a user grants them Admin-level permissions for the assigned product. They cannot be edited or deleted. To assign a managed add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles. From the list of users associated with your account, select their name. Under Add-on roles, select the type of manager role for the user. To understand which capabilities may be added, use the Capabilities preview chart. Features in the Capabilities preview chart may not exactly match what features are available for your subscription level. Tip You can also add, update, or delete users in bulk by using a CSV file. Create a custom role To create a custom add-on role for your account: Go to account dropdown > Account settings > Users and roles > Roles. Select New custom add-on role. Select the capabilities necessary for the new custom role, then Create role. Assign a custom role Tip Owners and Admins You must create a custom role before assigning it to a user. To assign a custom add-on role for a User or Restricted User in your account: Go to account dropdown > Account settings > Users and roles > Users. From the list of users associated with your account, select their name ]. Under Add-on roles, select a custom role for the user. Click Update user. Edit or delete a custom role Tip Owners and Admins You cannot edit or delete New Relic's default roles. However, you can edit or delete custom add-on roles for your account: Go to account dropdown > Account settings > Users and roles > Roles. From the Add-on roles list, select the custom add-on role, then select Edit role or Delete role as appropriate. Account permissions Here is a summary of basic user rights for your New Relic account. Individuals on a master account with sub-accounts automatically have the same level of access for all sub-accounts. However, they will not receive email notifications for alerts or weekly reports for sub-accounts unless they are explicitly granted permission on these sub-accounts. Function Owner Admin User Restricted Maintain billing information. Change the account Owner. Add, update, and delete account Admins, Users, and Restricted Users. When the account Owner and Admins add individuals to the account, New Relic automatically sends them an email message. Update users' job titles and roles from Account settings in the New Relic UI. Create, modify and delete sub-accounts from Account settings in the New Relic UI. Update your own account information (name, password change or password reset request, default account, email preferences, etc.) from User preferences in the New Relic UI. Change someone else's password. You cannot reset passwords for anyone else on the account, even if you are an Owner or Admin. Instead, follow standard procedures to request a password reset from New Relic. View the list of individuals on the account from (account dropdown) > Account settings > Account > Summary in the New Relic UI. Manage flexible data retention. Subscribe and unsubscribe applications to New Relic One Alert permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Alerts. To allow a User or Restricted User to execute any of these functions in New Relic Alerts, assign an Alerts add-on manager role. Admin and manager capabilities for Alerts include: Create or name alert policies. Specify incident preferences. Disable or define alert conditions. Provide runbook instructions. Select product targets. Alter alert condition thresholds. Create, modify, or delete notification channels. APM permissions Here is a summary of Admin and Add-on manager capabilities with New Relic APM. To allow a User or Restricted User to execute any of these functions in New Relic APM, assign an APM add-on manager role. Admin and manager capabilities for APM include: Remove applications from the New Relic UI. Delete app traces and error traces. Browser permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Browser. To allow a User or Restricted User to execute any of these functions in New Relic Browser, assign a Browser add-on manager role. Admin and manager capabilities for Browser include: Add, rename, or delete applications. Manage whitelists. Manage domain conditions. Infrastructure permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Infrastructure. To allow a User or Restricted User to execute any of these functions in New Relic Infrastructure, assign an Infrastructure manager role. Admin and manager capabilities for Infrastructure include: Create alert conditions in New Relic Infrastructure, including conditions for host not reporting. Add or modify integrations. Insights permissions Here is a summary of Admin and Add-on manager capabilities with New Relic Insights. To allow a User or Restricted User to execute any of these functions in New Relic Insights, assign an Insights manager role. These functions include: Create, view, modify, or delete Query API keys or Insert API keys. Tip New Relic Insights includes permission levels to share your Insights dashboards with others. Mobile permissions To give permission to delete a mobile app from New Relic, you can assign an Admin or Mobile manager role. Synthetics permissions Here's a summary of Admin and Add-on manager capabilities with New Relic Synthetics. To allow a User or Restricted User to execute any of these functions in New Relic Synthetics, assign a Synthetics add-on manager role. Admin and manager capabilities for Synthetics include: Create, edit, or delete monitors. Edit monitor scripts. Create, edit, or delete private locations. Create, edit, or delete monitor downtimes. Create, view, edit, or delete secure credentials. For more information, see User roles in Synthetics. Workloads permissions Here's a summary of Admin and Add-on manager capabilities with New Relic One workloads: Create, duplicate, modify, or delete workloads. Link dashboards to workloads and save filters. To allow a User or Restricted User to execute these functions, assign the workloads manager add-on role.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.81534,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Users <em>and</em> roles (<em>original</em> user model)",
        "sections": "Users <em>and</em> roles (<em>original</em> user model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": " how you manage your users&#x27; roles and access to <em>accounts</em>. To learn how to find out if you qualify for this and how to start, see Migrate users. View and manage users in UI If your New Relic <em>account</em> has users on our <em>original</em> user model, you can use the Users and roles UI. To access this UI: select"
      },
      "id": "603e88b2e7b9d2a3f12a07d5"
    }
  ],
  "/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 423.77155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "sections": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": " organizations are able to transition to this <em>pricing</em>. Our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em> plan: this is <em>based</em> on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer <em>pricing</em> plan: in that case, their users"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Set session timeouts",
        "Requirements",
        "Overview",
        "Features",
        "Tip",
        "Select the session timeout value",
        "Select SAML SSO browser re-authentication",
        "Redirect after SAML timeout"
      ],
      "title": "Set session timeouts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "a61d4c61f52ee18be0763a9cd526634d9d2f50f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/set-session-timeouts/",
      "published_at": "2021-05-06T04:52:48Z",
      "updated_at": "2021-03-30T15:37:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's session configuration feature allows you to set limits on idle time before your users' browser sessions automatically expire. Requirements This doc is for users on our original user model. If you're on the New Relic One user model, see Session settings. Overview Session configuration allows you to set limits on idle time before your users' browser sessions automatically expire. A message appears three minutes before the system logs them out. Users then need to sign back in to continue. For accounts configured with SAML Single Sign On (SSO), an additional option is available to set how often the users' browser sessions are re-authenticated. Users and Restricted Users can view the time period for automatic timeout, but they cannot change it. To view the timeout value: Go to account dropdown > Account settings > Authentication > Session configuration. Features Tip Owner or Admins The session configuration options provide an additional level of security to ensure that unattended browsers will automatically time out. Session values are automatically stored in the session cookie. Additional features include: Feature Notes Easy setup Admins use the slide bar in New Relic's user interface to select predefined time periods. Default is two weeks. Separate options available by role Admins can choose for Restricted User sessions to never time out even if they select a session timeout setting. This is useful, for example, when you use a Restricted User login for demos. Automatic inheritance for sub-accounts By default, sub-accounts inherit the same session configuration as their master account. Most restrictive by default If users have multiple accounts, the most restrictive setting applies, regardless of which account the user currently is using. Integration with SAML SSO logout URL If the account's SAML SSO configuration does not include a logout URL, New Relic includes a link from Session configuration for the Owner to set it up. If the Admin is not also the Owner, a message about the SAML SSO logout URL requirement appears. Additional re-authentication setting for SAML SSO In addition to the session timeout option, Admins can select the time (15 minutes to 2 weeks, or never) for how often a SAML-authenticated browser session must be re-authenticated. Select the session timeout value The process to select the session timeout value is the same for both SAML and non-SAML configurations. For additional SAML configuration options, see SAML SSO browser reauthentication. To select a predefined period for session timeouts with SAML SSO accounts, the account Owner must have previously identified the logout URL in the SAML SSO configuration settings. If this has not been set up, the account Admin can view the session timeout slide bar but not change it. If the Admin is also the account Owner, the Session configuration includes a link to go directly to New Relic's SAML SSO Configuration and identify the logout URL. For more information, see Setting up SSO. To select a predefined period for session timeouts: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the slide bar to select a time period for idle sessions to expire and log out automatically. Optional: Select the checkbox option if you do not want restricted users' browser sessions to expire. Select Save my changes. Changes take effect immediately. Select SAML SSO browser re-authentication To select a predefined period for SAML SSO-authenticated browser sessions to be re-authenticated: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the SAML re-authentication time slide bar to select a time period for New Relic to check the browser session. Select Save my changes. Redirect after SAML timeout If you are logged out due to a session idle timeout on an account configured for SAML, you will be sent to the New Relic login page. Because your account is configured for SAML, you do not have a direct New Relic login. To be redirected to your SAML provider for authentication: Enter your email address in the Email field. Leave the Password field blank. Click the Sign In button. You will then be redirected to your SAML provider. Once reauthorized, you will then be returned to the New Relic website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.91626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". Automatic inheritance for sub-<em>accounts</em> By default, sub-<em>accounts</em> inherit the same session configuration as their master <em>account</em>. Most restrictive by default If users have multiple <em>accounts</em>, the most restrictive setting applies, regardless of which <em>account</em> the user currently is using. Integration with SAML"
      },
      "id": "603e8914196a678f45a83de3"
    },
    {
      "sections": [
        "Original product-based pricing and billing",
        "Important",
        "Overview of original pricing",
        "Annual vs monthly pricing plans",
        "APM and Infrastructure: Compute-unit vs host-based pricing",
        "Compute unit pricing",
        "Host-based pricing",
        "Tip",
        "How is a \"host\" defined?",
        "Prorated billing",
        "Manage subscription and billing settings",
        "View summary information",
        "View or change current subscription",
        "View usage",
        "View or update billing information"
      ],
      "title": "Original product-based pricing and billing",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "92a9a2aaacf80af45767d6f8f15283c541b2bf08",
      "image": "https://docs.newrelic.com/static/a5a6fd548a3c62e03183f13e6be6688a/77a9e/Accounts_CU-calculation_0.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-pricing/product-based-pricing/",
      "published_at": "2021-05-05T13:47:24Z",
      "updated_at": "2021-03-11T03:16:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This doc explains our original product-based pricing plan. For more on pricing and user-related changes, see Overview of changes. Overview of original pricing New Relic has two pricing plans: a newer one called New Relic One pricing, and our original pricing plan. Our original pricing plan was based on subscriptions to specific products, like APM, Mobile, and Infrastructure. If you are on this pricing plan, your users are likely on our original user model and use these original user docs. To understand more about the new pricing and user changes, see Overview of changes. For accounts on original pricing, this doc includes: Explanation of how our original pricing plan works How to manage subscription and billing settings Annual vs monthly pricing plans Here are the differences between billed-annually and billed-monthly plans: Pricing plans Details Annual (best price) New Relic charges your credit card each month for a year for a committed number of hosts or compute units. You can increase this amount at any time, and charges will adjust with the next monthly bill. Your account will automatically renew at the end of the year unless you change your subscription. Early termination, downgrade, or decrease in service: Unless your order form states otherwise, you will be charged at the level and quantity of service ordered until the end of the then-current term if you cancel or downgrade to a lower level of service or fewer hosts during your commitment year. Monthly (no commitment) New Relic charges your credit card each month for a specified number of hosts or compute units. The account Owner can change the credit card number at any time: From the New Relic UI's account dropdown, select Account settings > Subscription. Your billing will adjust with your next monthly bill. Your account automatically renews each month unless you change your subscription. You can cancel service or downgrade to a lower level of service without penalty. APM and Infrastructure: Compute-unit vs host-based pricing New Relic APM offers a choice between two pricing models: compute unit (CU) based pricing and host-based pricing. New Relic Infrastructure offers only CU-based pricing. This section shows how both options are calculated, and explains what \"host\" means in these pricing contexts: Compute unit pricing CU-based pricing is available for these New Relic products: New Relic APM (choice of either CU-based pricing or host-based pricing) New Relic Infrastructure: only CU-based pricing With CU-based pricing, your monthly price is determined by the size of the host (computing power and memory) running New Relic and the number of hours it connects to New Relic during the month. If a host is connected to New Relic at any time during an hour, that hour counts towards the CU calculation. Each host is counted separately for each New Relic account the host reports data to. For example, if you have a master account with two sub-accounts, each running applications on the same host for 3,000 CUs in a given month, the usage for the master account will be 6,000 CUs. For New Relic APM, CU-based pricing is the best choice if you have many cloud-based dynamic computing resources. For this reason, CU-based pricing is sometimes referred to as cloud pricing. CUs are calculated as follows: The maximum size of a given host (CPUs + GB RAM) is capped at 16. Examples: If a host has 2 CPU cores, 2GB RAM, and connects to New Relic for one hour (or less than one hour), it consumes 4 CUs. If a host has 2 CPU cores, 2GB RAM, and connects to New Relic for an entire month (750 hours used as standard month size), it consumes 3,000 CUs. You can purchase blocks of CUs to be consumed on a monthly basis. The total number of CUs purchased monthly is calculated by adding up the estimated CU consumption for all hosts for the month. There is no month-to-month rollover of unused CUs. Also, New Relic does not charge by JVMs, containers (such as Docker or Cloud Foundry), or application instances--it charges by the hosts running those containers or application instances. Price points vary, depending on the New Relic product and subscription level. You can view CU-based account usage from the New Relic UI. For more on product-specific pricing: see the APM pricing and Infrastructure pricing pages. Host-based pricing Tip Pricing for your New Relic APM account can be either CU-based or host-based. New Relic Infrastructure uses only CU-based pricing. With host-based pricing, New Relic charges based on the number of equivalent hosts used in a month. One equivalent host is defined as: a host connected to New Relic for 750 hours (750 hours used as standard month size). If a host is connected to New Relic at any time during an hour, that hour counts towards the host calculation. These hours can be divided across multiple hosts. For example, you might have three hosts that are each connected to New Relic for 250 hours during one month: these hours would add up to equal one equivalent host. Each host is counted separately for each New Relic account the host reports data to. For example, if you have a master account with two subaccounts, each running applications on the same single host for 750 hours in a given month, the usage for the master account will be 2 equivalent hosts. Once connected to New Relic, hosts are distinguished by their unique hostnames. A host is connected to New Relic when the language agent is active and is deployed on the host. New Relic does not charge by containers (such as Docker or Cloud Foundry), JVMs, or application instances; it charges by the hosts running those containers or application instances. New Relic APM gives you a choice between host-based pricing and CU-based pricing. Host-based pricing is ideal if you have mainly static environments, consisting of hosts you manage in your own data center. For specifics on pricing amounts, see the APM pricing page. How is a \"host\" defined? To understand how New Relic computes both host-based pricing and CU-based pricing, it's important to understand how the word host is used. A host can be one of the following: A physical machine is a hardware-based device with dedicated physical resources, including memory, processing, and storage. Each machine has its own OS which applications run on. A virtual machine (VM) is the software implementation of a physical machine that executes programs like a physical machine. One or more virtual machines can run on a physical machine. Each virtual machine has its own OS and allocated virtual machine resources such as RAM and CPU. A cloud instance is a type of virtual machine that is run in the public cloud. In this context, virtual machines and cloud instances are different from Java Virtual Machines (JVMs) and containers. For New Relic's pricing calculation purposes, a month is defined as 750 hours. Prorated billing If you upgrade your subscription partway through your billing period, you will be subject to a prorated charge for the higher level of service over the remainder of your billing period. This will be invoiced or charged to your credit card when the upgrade is submitted. You will be notified about this charge as part of the subscription change process. If you have questions, contact your New Relic account representative. If you need to report billing issues, contact New Relic's Billing Department. Manage subscription and billing settings Important Note that as of July 30 2020, we have a newer pricing plan. To learn more, see Overview of pricing. The account Owner can perform many subscription self-service functions directly from the user interface: From one.newrelic.com, select the account dropdown. Select your choice of self-service options. When making subscription changes, be sure to save any changes, agree to New Relic's Terms of Service and Supplemental Payment Terms as appropriate, and select Pay now. Optional: If you downgrade your subscription, complete New Relic's survey. Here is a summary of the available options from your account dropdown in the New Relic user interface: View summary information To view summary information about your subscription: From the account dropdown, select Account settings > Account > Summary. This includes: Account users and their roles (User, Admin, and Owner) or add-on roles Account name Subscription usage information Agent versions Billing credit card email License key Sub-accounts if applicable Subscriptions to New Relic products Tip Your account ID (which is not the same as your license key) is part of the URL after you sign in to New Relic. View or change current subscription To view or change your current subscription options: From the account dropdown, select Upgrade subscription/Change subscription. OR From the account dropdown, select Account settings > Account > Subscription. Options include: Upgrade or downgrade your pricing and subscription levels Cancel your subscription or delete your account Change your account's tax location for billing purposes If you need more help, contact your New Relic account representative, or contact New Relic's Billing Department. View usage To view your subscription usage information: From the account dropdown, select Account settings > Usage. View or update billing information To view or update your New Relic account's billing information: From the account dropdown, select Account settings > Account > Billing. Billing settings include: Account contact information, including name, organization, address, phone, email, purchase order number, etc. Billing history, including invoices and receipts Credit card or other payment method",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.27164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "sections": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em> <em>and</em> <em>billing</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". For <em>accounts</em> on <em>original</em> <em>pricing</em>, this doc includes: Explanation of how our <em>original</em> <em>pricing</em> plan works How to manage subscription and <em>billing</em> settings Annual vs monthly <em>pricing</em> plans Here are the differences between billed-annually and billed-monthly plans: <em>Pricing</em> plans Details Annual (best <em>price</em>) New Relic"
      },
      "id": "6043f753e7b9d212085799da"
    }
  ],
  "/docs/accounts/original-accounts-billing/product-pricing/product-based-pricing": [
    {
      "sections": [
        "Overview of changes to pricing and user model",
        "Overview of pricing and user models",
        "Pricing plan changes explained",
        "Determine pricing plan using UI",
        "Account/user model changes explained",
        "Determine user model using UI",
        "Impacts related to user model",
        "Transition to the new pricing plan",
        "Migrate users to new user model",
        "How pricing and user model relate"
      ],
      "title": "Overview of changes to pricing and user model",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "b19d61b5a0c65ca352e2ce0e260e2b53391b94fc",
      "image": "https://docs.newrelic.com/static/1461470cc1ef0be91120c84d76a7ccdd/c1b63/new-relic-one-pricing-plan-billing-ui.png",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/overview-changes-pricing-user-model/",
      "published_at": "2021-05-05T04:13:41Z",
      "updated_at": "2021-05-05T04:13:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In 2020, New Relic switched to a new pricing plan and a new account/user model. This doc explains: Overview of pricing and user model Pricing plan changes Account/user model changes How to transition to the new pricing plan. How to migrate users to the new user model Overview of pricing and user models In 2020, New Relic released both a newer pricing plan, which controls your billing, and a newer account/user model, which controls how you manage users and account structure. If you have a New Relic organization created after July 30, 2020, you're on our newer pricing plan and newer user model. But for older customers, your pricing plan and user model are not necessarily related. For example, you may have switched to our newer pricing plan and still have users on our original user model. Or you might be on our original pricing plan and have users on our newer user model. Keep reading to learn about our pricing plans and our user models, how to figure out which you're on, and what the impacts are. For a table showing how pricing plan and user model relate, see Pricing and user model relationship. Pricing plan changes explained New Relic organizations are on one of two pricing plans: New Relic One pricing: Our new pricing plan is simpler. It bills on which Full Stack Observability edition (Standard, Pro, Enterprise) you're on, the GBs of data ingested, and the count of billable \"full users.\" All organizations created on or after July 30 2020 are on this pricing plan. Some older organizations are able to transition to this pricing. Our original product-based pricing plan: this is based on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer pricing plan: in that case, their users remain on our original user model. Determine pricing plan using UI To determine which pricing plan you’re on: go to one.newrelic.com, select the account dropdown, and select Manage your plan. If you see billing information about data ingested and the number of billable users, you’re on the new pricing plan. If you're on New Relic One pricing, you'll see a billing UI like this. Account/user model changes explained In this context, we use \"user model\" to refer to the data structure of a New Relic user and how it interacts with the broader account/organization that it's in. We have two user models: New Relic One user model: this newer, improved user model has the following feature that are different from the original user model: All your accounts and users are contained under a top-level organization. This gives an organization strong control over managing users and what they can access. Users on this model are managed differently than are users on the original user model. There's no longer an account \"owner\" role, which was a key aspect of our original user model. Original user model: some aspects of this older model that are different from our newer model: There wasn't as much organization-level control over users. For example, a New Relic user had the ability to access multiple accounts they'd been granted access to using a single login. Users on the original user model are managed differently than are users on the newer model. To learn what user model your users are on and how that relates to pricing, see the Pricing and user model table. Here are details about upgrading to our new pricing plan and user model: Learn about switching to the new pricing planning. Learn about migrating your users to be on the new model. Determine user model using UI To determine what user model you're on, from the account dropdown select User preferences. if you see the UI below, you're on the newer New Relic One user model. If you see a different UI with much more content, you're on the original user model (see original user docs). To determine if you can manage users on the New Relic One user model, see Manage users. Impacts related to user model Users on the New Relic One user model have the following restrictions: Alert notifications: These users won’t show up as an option when choosing users to receive alert notifications. The result of this is that these users will not get New Relic mobile app push notifications. As a workaround, you can instead use their email address as the notification channel. Adding accounts: These users cannot, on their own, add accounts to their New Relic organization. They must get help from their New Relic account representative. To learn about adding users to accounts, see Manage users. Changing account name: These users cannot change the name of their organization after it has been created. Transition to the new pricing plan If you want to switch to New Relic One pricing: Have a paid account? Speak to your New Relic account representative. Have a free account? You currently have access to all of New Relic One. However, if you’d like to transition to the new pricing and user management tools, please sign up for a new account. Learn what you get for free. To learn more about pricing, see New Relic pricing. When you transition to the New Relic One pricing plan, your full users are billable. For tips on how to decide which users to make basic or full, see User type. How you change a user's type depends on the user's user model: Original user model docs. New Relic One user model docs. Migrate users to new user model Some customers who have users on the original user model can migrate them to the New Relic One user model. For how that works, see Migrate users. How pricing and user model relate As explained in the pricing and user model overview, your pricing plan and user model aren't necessarily related. This table shows how pricing and user model relate to each other: Pricing plan factors Users on original user model Users on New Relic One user model Original pricing If your organization was created before July 30 2020, you remain on our original pricing plan until you transition to New Relic One pricing. See original pricing plan docs. For original pricing accounts, your users are on the original user model, unless they were added via automated user management. See original user docs. For original pricing accounts, users added with automated user management (users imported from your identity provider) are on the New Relic One user model. Upon switching to New Relic One pricing, you'll have new roles available. New Relic One pricing An organization is on the New Relic One pricing plan if it was created on or after July 30 2020 or it's an older organization but has transitioned to New Relic One pricing. See New Relic One pricing docs. If your organization has transitioned to New Relic One pricing, your users are on our original user model (unless they were added via automated user management). These users are now also categorized by user type (full vs basic). See original user docs. If your organization was created on or after July 30 2020, your users are on this user model. See New Relic One user docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 423.77155,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "sections": "Overview of changes to <em>pricing</em> <em>and</em> user model",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": " organizations are able to transition to this <em>pricing</em>. Our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em> plan: this is <em>based</em> on subscriptions to specific products (e.g., APM, Browser, Mobile, Infrastructure). Some organizations have the option to transition to the newer <em>pricing</em> plan: in that case, their users"
      },
      "id": "603e97fa28ccbcb7c2eba754"
    },
    {
      "sections": [
        "Set session timeouts",
        "Requirements",
        "Overview",
        "Features",
        "Tip",
        "Select the session timeout value",
        "Select SAML SSO browser re-authentication",
        "Redirect after SAML timeout"
      ],
      "title": "Set session timeouts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "a61d4c61f52ee18be0763a9cd526634d9d2f50f5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/account-maintenance/set-session-timeouts/",
      "published_at": "2021-05-06T04:52:48Z",
      "updated_at": "2021-03-30T15:37:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's session configuration feature allows you to set limits on idle time before your users' browser sessions automatically expire. Requirements This doc is for users on our original user model. If you're on the New Relic One user model, see Session settings. Overview Session configuration allows you to set limits on idle time before your users' browser sessions automatically expire. A message appears three minutes before the system logs them out. Users then need to sign back in to continue. For accounts configured with SAML Single Sign On (SSO), an additional option is available to set how often the users' browser sessions are re-authenticated. Users and Restricted Users can view the time period for automatic timeout, but they cannot change it. To view the timeout value: Go to account dropdown > Account settings > Authentication > Session configuration. Features Tip Owner or Admins The session configuration options provide an additional level of security to ensure that unattended browsers will automatically time out. Session values are automatically stored in the session cookie. Additional features include: Feature Notes Easy setup Admins use the slide bar in New Relic's user interface to select predefined time periods. Default is two weeks. Separate options available by role Admins can choose for Restricted User sessions to never time out even if they select a session timeout setting. This is useful, for example, when you use a Restricted User login for demos. Automatic inheritance for sub-accounts By default, sub-accounts inherit the same session configuration as their master account. Most restrictive by default If users have multiple accounts, the most restrictive setting applies, regardless of which account the user currently is using. Integration with SAML SSO logout URL If the account's SAML SSO configuration does not include a logout URL, New Relic includes a link from Session configuration for the Owner to set it up. If the Admin is not also the Owner, a message about the SAML SSO logout URL requirement appears. Additional re-authentication setting for SAML SSO In addition to the session timeout option, Admins can select the time (15 minutes to 2 weeks, or never) for how often a SAML-authenticated browser session must be re-authenticated. Select the session timeout value The process to select the session timeout value is the same for both SAML and non-SAML configurations. For additional SAML configuration options, see SAML SSO browser reauthentication. To select a predefined period for session timeouts with SAML SSO accounts, the account Owner must have previously identified the logout URL in the SAML SSO configuration settings. If this has not been set up, the account Admin can view the session timeout slide bar but not change it. If the Admin is also the account Owner, the Session configuration includes a link to go directly to New Relic's SAML SSO Configuration and identify the logout URL. For more information, see Setting up SSO. To select a predefined period for session timeouts: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the slide bar to select a time period for idle sessions to expire and log out automatically. Optional: Select the checkbox option if you do not want restricted users' browser sessions to expire. Select Save my changes. Changes take effect immediately. Select SAML SSO browser re-authentication To select a predefined period for SAML SSO-authenticated browser sessions to be re-authenticated: Go to: account dropdown > Account settings > Authentication > Session configuration. Use the SAML re-authentication time slide bar to select a time period for New Relic to check the browser session. Select Save my changes. Redirect after SAML timeout If you are logged out due to a session idle timeout on an account configured for SAML, you will be sent to the New Relic login page. Because your account is configured for SAML, you do not have a direct New Relic login. To be redirected to your SAML provider for authentication: Enter your email address in the Email field. Leave the Password field blank. Click the Sign In button. You will then be redirected to your SAML provider. Once reauthorized, you will then be returned to the New Relic website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 251.91626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": ". Automatic inheritance for sub-<em>accounts</em> By default, sub-<em>accounts</em> inherit the same session configuration as their master <em>account</em>. Most restrictive by default If users have multiple <em>accounts</em>, the most restrictive setting applies, regardless of which <em>account</em> the user currently is using. Integration with SAML"
      },
      "id": "603e8914196a678f45a83de3"
    },
    {
      "sections": [
        "Trial and Lite accounts",
        "Important",
        "Trial accounts",
        "Trial lengths",
        "End of trial period",
        "Caution"
      ],
      "title": "Trial and Lite accounts",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "Original product-based pricing"
      ],
      "external_id": "050d5fa2eea990cf75a7d4de2c15bebd612860f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/original-accounts-billing/product-based-pricing/trial-lite-accounts-deprecated/",
      "published_at": "2021-05-06T05:00:33Z",
      "updated_at": "2021-03-16T09:14:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important This document applies to our original product-based pricing, which is no longer available for new accounts. For an explanation of pricing plans, see Overview of pricing. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. Accounts not upgraded with a subscription before the end of the trial period become Lite accounts, losing many key features and data. Trial accounts When you start a free trial, you gain access to all the features of a Pro account including full access to support. Our products allow you to view and track trends. Pro level data retention allows you to track how changes in your business, such as marketing approaches or new technology, affect trends. Trial lengths Trial lengths depend on the product: Product Trial Length Alerts 30 days APM 14 days Browser 14 days Infrastructure 30 days Insights 30 days Mobile 30 days Synthetics 14 days End of trial period Once the trial ends, your account becomes a Lite account. Lite accounts can access all of our products except Infrastructure and Insights, but lose access to most product features and support. Caution Lite accounts retain only very recent data, which could cause the loss of valuable trend data. Avoid this by subscribing before your trial ends.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 240.27228,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Trial <em>and</em> Lite <em>accounts</em>",
        "sections": "Trial <em>and</em> Lite <em>accounts</em>",
        "tags": "<em>Original</em> <em>product</em>-<em>based</em> <em>pricing</em>",
        "body": "Important This document applies to our <em>original</em> <em>product</em>-<em>based</em> <em>pricing</em>, which is no longer available for new <em>accounts</em>. For an explanation of <em>pricing</em> plans, see Overview of <em>pricing</em>. Free trials for New Relic allow you to identify which products and subscription tier best fit your business. <em>Accounts</em>"
      },
      "id": "603ec29a196a67b153a83dad"
    }
  ],
  "/docs/accounts-partnerships/accounts/saml-single-sign/configure-saml-multiple-accounts": [
    {
      "sections": [
        "Delete the SSO configuration (original user model)",
        "Important",
        "Caution"
      ],
      "title": "Delete the SSO configuration (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "f3e83fa8322e5c639a0163fdec775348030b20be",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/delete-sso-configuration/",
      "published_at": "2021-05-05T22:17:43Z",
      "updated_at": "2021-03-13T05:47:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. For requirements, including which New Relic users this feature applies to, see Requirements. Caution If you delete your SAML SSO integration with New Relic, you cannot restore it. However, you can follow standard procedures to set up your configuration again. To delete your SAML Single Sign On configuration completely: Sign in to New Relic by using your SAML SSO login URL. From the New Relic menu bar, select: account dropdown > Account settings > Security and authentication > Single sign-on. Select Delete SAML Configuration. At the confirmation prompt, select OK.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.20473,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "sections": "Delete the <em>SSO</em> configuration (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. For requirements, including which New Relic <em>users</em> this feature applies to, see Requirements. Caution If you delete your <em>SAML</em> <em>SSO</em> integration"
      },
      "id": "6043f605e7b9d22e54579a01"
    },
    {
      "sections": [
        "Add users to SAML accounts (original user model)",
        "Important",
        "Requirements",
        "Add and confirm users",
        "Caution",
        "Bypass email confirmation"
      ],
      "title": "Add users to SAML accounts (original user model)",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "1ab1cb53dc639014a77f74442c2a89c37b021cc0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/add-users-saml-accounts/",
      "published_at": "2021-05-05T00:24:28Z",
      "updated_at": "2021-03-13T03:20:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. As an additional security measure for SAML single sign-on (SSO) accounts, users are not added until they complete the email confirmation that New Relic sends automatically. Users in the pending state (not yet confirmed) will not receive notifications, such as alerts. For accounts without SAML SSO integration, the account Owner and Admins can add new users without requiring confirmation. Requirements For requirements, including which New Relic users this feature applies to, see Requirements. Add and confirm users Follow this process to add and confirm users for New Relic accounts with SAML SSO: The account's Owner or an Administrator adds new users: Go to: account dropdown > Account settings > Account > Summary. On SAML-enabled accounts, New Relic flags the users as Pending and sends an email confirmation. (Pending users will not receive notifications associated with their user role, such as alert notifications.) Users select the link in the email to confirm their account, which directs them to the SAML provider's login URL. When users successfully sign into their SAML SSO end point (Auth0, Okta, OneLogin, Ping Identity, Salesforce, etc.), New Relic flags the users as Active. Caution If you disable SAML SSO, New Relic automatically flags all of your Pending users as Active. If you decide to re-enable SAML SSO later, New Relic automatically flags all users except the Owner as Pending, and they will need to confirm their account access by email. Admin user's API keys for all users that go into a pending state will be deleted. Bypass email confirmation Depending on your subscription level, you may have the option to claim the domain names that you own and bypass the SAML SSO confirmation process. When the account Owner or Administrators add new users and their email address has a domain that matches the account's domains, New Relic automatically adds them as Active users. Benefits of identifying domain ownership include: Adds a useful feature to your account. Claims domains as your own. Makes it easier for your employees to get started with New Relic, because they do not need to confirm their account access. Maintains security when adding users outside of your organization. To flag your account as owning one or more domain names, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.14792,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "sections": "Add <em>users</em> to <em>SAML</em> <em>accounts</em> (<em>original</em> <em>user</em> model)",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. As an additional security measure for <em>SAML</em> single sign-on (<em>SSO</em>) <em>accounts</em>, <em>users</em> are not added until they complete the email confirmation"
      },
      "id": "6043f342e7b9d20ca55799fa"
    },
    {
      "sections": [
        "Intro to authentication (SAML SSO) for users on original user model",
        "Important",
        "Requirements",
        "Providers supported by New Relic",
        "SAML information in New Relic account",
        "New Relic SAML requirements"
      ],
      "title": "Intro to authentication (SAML SSO) for users on original user model ",
      "type": "docs",
      "tags": [
        "Accounts",
        "Original accounts and billing",
        "SAML SSO (original users)"
      ],
      "external_id": "80a96fa16d37d34d8f66c5564f2df32b081536ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/accounts/accounts/saml-single-sign/saml-service-providers/",
      "published_at": "2021-05-04T18:35:25Z",
      "updated_at": "2021-03-13T02:48:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important These docs are for setting up SSO for users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Single Sign On (SSO) allows a computer user to log in to multiple systems via a single portal. If you are a New Relic account Owner setting up SSO integration for your organization, you must obtain a SAML certificate that identifies the SSO login URL (and possibly logout URL) for your organization. The other types of information required for SSO integration will vary depending on the SAML service provider being used. Requirements Requirements include: These docs apply for managing users on our original user model. For SSO for users on New Relic One user model, see Authentication domains. Access to this feature depends on your subscription level. Owner user role required Providers supported by New Relic For a list of the SAML service providers that New Relic currently supports for SSO integration: From the New Relic title bar, select (account dropdown) > Account settings > Security and authentication > Single sign on. Providers include: Active Directory Federation Services (ADFS) Auth0 Azure AD (Microsoft Azure Active Directory) Okta OneLogin Ping Identity Salesforce Generic support for SSO systems that use SAML 2.0 SAML information in New Relic account To integrate with an SAML provider, the provider will need information from you about your New Relic account. Most of the information you will need is visible in your New Relic account on the Single Sign On page, such as: Metadata URL: Contains multiple pieces of information in a single XML message SAML version: 2.0 Assertion consumer URL: The endpoint to New Relic SSO (for example, https://rpm.newrelic.com/accounts/ACCOUNTID/sso/saml/finalize) Consumer binding: Transmission method is HTTP-POST NameID format: Email address Attributes: None required Entity ID: Account URL (default of rpm.newrelic.com) New Relic SAML requirements For SAML providers and service providers like New Relic to be able to work together, their processes must align in certain ways. Here are some aspects of how New Relic implements SSO integration. This will be useful if you are verifying that a specific SAML provider will be able to work with New Relic or if you are troubleshooting implementation problems. SSO considerations New Relic functions and preferences Scope of user credentials (IdP) Should be all users. Type of connection Must be both IdP initiated and SP initiated. Expected SAML profile New Relic uses a POST binding for SP-initiated requests. Expected NameID value format Must be email address. Sensitive info exchanged in SAML assertion? No, only the email address is sent. Session management and logout Does your organization use a redirect URL for logout? If not, New Relic can provide a logout landing page. Plan for users who no longer need access Typically manual deletion by the account Owner or Administrator. Clock synchronization Ensure the SAML identity provider clocks are maintained by NTP.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 237.1355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model ",
        "sections": "Intro to authentication (<em>SAML</em> <em>SSO</em>) for <em>users</em> on <em>original</em> <em>user</em> model",
        "tags": "<em>Original</em> <em>accounts</em> <em>and</em> <em>billing</em>",
        "body": "Important These docs are for setting up <em>SSO</em> for <em>users</em> on our <em>original</em> <em>user</em> model. For <em>SSO</em> for <em>users</em> on New Relic One <em>user</em> model, see Authentication domains. Single Sign On (<em>SSO</em>) allows a computer <em>user</em> to log in to multiple systems via a single portal. If you are a New Relic <em>account</em> Owner setting up"
      },
      "id": "6043f3c4196a674d5f960f88"
    }
  ],
  "/docs/adduserattribute-python-agent-api": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-05-05T12:53:11Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.notice_error (use Transaction.record_exception) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.72682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and attributes.exclude settings. 2.10.0.8 Release notes: <em>Python</em> <em>agent</em> 2.10.0.8 Deprecated <em>API</em>: Do not use the <em>agent</em> <em>API</em> function <em>add_user_attribute</em>(), which is now deprecated. Instead, use the <em>add</em>_custom_parameter() function. Optional: To display these parameters in browser traces, enable"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.83122,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: C SDK Go .NET Node.js <em>Python</em> Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic <em>user</em> interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-21008/",
      "sections": [
        "Python agent v2.10.0.8",
        "Important",
        "Notes",
        "New Features:",
        "Features Changed:",
        "Bug fixes/Improvements:"
      ],
      "published_at": "2021-05-05T13:18:42Z",
      "title": "Python agent v2.10.0.8",
      "updated_at": "2021-03-11T01:03:25Z",
      "type": "docs",
      "external_id": "cff17f0ed339feac171a304dc5f05361981555c4",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Important The end-of-life date for this agent version is July 29, 2019. To update to the latest agent version, see Update the agent. For more information, see End-of-life policy. Notes This release of the Python agent includes various improvements and bug fixes related to instrumentation for database client modules, as well as a notable fix to our 'newrelic-admin' script affecting some users who referenced Python virtual environments via a symbolic link. The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from our download site. For a list of known issues with the Python agent see our online help article on the status of the Python agent. New Features: Instrumentation of the WSGI application entry point will now add a new breakdown metric to web transactions corresponding to the finalization of the WSGI request. Within the workings of the interaction between the WSGI server and the WSGI application, this is the point at which the WSGI server will call any close() method on the iterable returned by the WSGI application. The name of this new breakdown metric is 'WSGI/Finalize'. In the case where there was actually a 'close()' method, a further breakdown metric will also appear corresponding to that method. Added support to instrumentation for MySQL and PostgreSQL database client modules for monitoring database queries when the database connection object is used as a context manager. Such context manager features are outside of the scope of the Python DBAPI2 (PEP 249) specification, not all database client modules support it and nor do they all work the same. Although supported, we would suggest consideration should be given to not using these context manager features if you need your code to be portable between databases. Added support to instrumentation for MySQL database client modules for monitoring database queries when the database connection object was created using the Connect() function. The Connect() function falls outside of the scope of the Python DBAPI2 (PEP 249) specification. Although supported, we would suggest consideration should be given to not using this Connect() function if you need your code to be portable between databases. Added database instrumentation support for the mysql-connector-python database client module. Custom parameters for a transaction which are a string or numeric value will now be added to and reported with analytic events reported to our analytics system code named Rubicon. This can be disabled using the agent configuration setting 'analytics_events.capture_attributes'. The capture of custom parameters against a transaction trace can now be disabled using the agent configuration setting 'transaction_tracer.capture_attributes'. The capture of custom parameters against error details can now be disabled using the agent configuration setting 'error_collector.capture_attributes'. Features Changed: The agent API function add_user_attribute() is now deprecated and functionality merged with the add_custom_parameter() function. The latter function should now be used instead. The display of such parameters in browser traces is now optionally enabled with the agent configuration setting 'browser_monitoring.capture_attributes'. Bug fixes/Improvements: If the 'newrelic' package was installed into a Python virtual environment, but the 'newrelic-admin' script was executed via a path that traversed a symlink to the virtual environment, the protections within the agent bootstrapping procedure was detecting that the agent was trying to be used with an application running against a different virtual environment when it was actually the same. This would result in the application not being monitored. This issue was introduced in version 2.8.0 of the agent when additional protections were added against mixing application/modules from different Python virtual environments. Explain plans were not being performed on SQL queries made via the executemany() method of a database cursor object. When explain plans are now done, the data inputs from the first row of input data for the executemany() call will be used. When using Python 2, if strings were supplied for the web transaction name, custom parameters, in error details etc, and that string contained a series of characters which could not be decoded as valid UTF-8, then an exception would occur. In the case of a web transaction name, this could result in the exception affecting the current web transaction and result in an error response being sent back to a user. For the case of a transaction trace or error details, the exception would prevent the sending of the captured data up to our data collector and it would be discarded. This was a regression within the agent behaviour introduced when Python 3 support was added to the agent. Fixed instrumentation for sqlite database modules which could result in instrumentation not being applied correctly, and so no database metrics collected, if the sqlite module had been imported prior to the agent being initialized. Limits being applied to the length of the SQL for a slow SQL query when being sent up to our data collector were being applied at the wrong time, resulting in the truncated SQL being used when performing an explain plan. This didn't affect the operation of the web application, but database logs could contain an error about the malformed SQL query. Explain plans could be attempted for an SQL query even where the SQL query failed. Under most circumstances a SQL query would fail immediately and so the duration would fall below the threshold for collecting an explain plan, but the changes now made will protect against a long running SQL query which failed in the database and ensure that no additional problem is caused by issuing an explain plan for it. If a monitored web application is started up using our newrelic-admin wrapper script, and it executes a separate Python script and that Python script used a Python version older than Python 2.6, the script could output the error message \"'import site' failed; use -v for traceback\". The execution of the script was not affected, but the message obviously could cause concern. The equivalent functions from the 'urllib2' module from Python 2 were not being instrumented when Python 3 was being used. This was missed when Python 3 support was added to the agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.73068,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> v2.10.0.8",
        "sections": "<em>Python</em> <em>agent</em> v2.10.0.8",
        "body": " be disabled using the <em>agent</em> configuration setting &#x27;transaction_tracer.capture_attributes&#x27;. The capture of custom parameters against error details can now be disabled using the <em>agent</em> configuration setting &#x27;error_collector.capture_attributes&#x27;. Features Changed: The <em>agent</em> <em>API</em> function <em>add_user_attribute</em>"
      },
      "id": "6044f45e196a671e94960f2f"
    }
  ],
  "/docs/agents/c-sdk/get-started/apm-security-c-sdk": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.237,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.91202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " about the hierarchy of settings, see the illustration for the specific <em>agent</em>: <em>C</em> <em>SDK</em> configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the <em>C</em> <em>SDK</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "C SDK compatibility and requirements",
        "Language versions",
        "Operating environments",
        "License key",
        "Processor type",
        "Security requirements",
        "Database and instance-level performance"
      ],
      "title": " C SDK compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "392f9c149f762eb3d6bed020199c0dd6e3985a59",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/c-sdk-compatibility-requirements/",
      "published_at": "2021-05-04T16:58:29Z",
      "updated_at": "2021-03-16T14:45:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK provides a generic library you can customize to communicate with New Relic. Before you install New Relic's C SDK, make sure your system meets these requirements. Also refer to the C SDK licenses documentation. Language versions The C SDK allows you to instrument any application on Linux, provided: You must have access to the source code. The target language must be able to import C libraries. You can use the C SDK to create instrumentation for applications written in C and C++. You can also use it in languages like Perl, which are implemented in C or C++, and in any language that has a foreign function interface with C. Operating environments The C SDK works in 64-bit Linux operating systems with: gcc 4.8 or higher glibc 2.17 or higher Kernel version 2.6.26 or higher libpcre 8.20 or higher libpthread cmake 2.8 or higher Compiling the New Relic daemon requires Go 1.7 or higher. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Database and instance-level performance You can collect instance details for a variety of databases and database drivers. You can also view slow query trace details for the following SQL-based database platforms: Firebird Informix Microsoft SQL Server MySQL Oracle Postgres SQLite Sybase",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.50479,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": " <em>C</em> <em>SDK</em> <em>compatibility</em> and requirements",
        "sections": "<em>C</em> <em>SDK</em> <em>compatibility</em> and requirements",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> provides a generic library you can customize to communicate with New Relic. Before you install New Relic&#x27;s <em>C</em> <em>SDK</em>, make sure your system meets these requirements. Also refer to the <em>C</em> <em>SDK</em> licenses documentation. Language versions The <em>C</em> <em>SDK</em> allows you to instrument any application"
      },
      "id": "603e83e2e7b9d228112a07e4"
    }
  ],
  "/docs/agents/c-sdk/get-started/c-sdk-compatibility-requirements": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.237,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.91202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " about the hierarchy of settings, see the illustration for the specific <em>agent</em>: <em>C</em> <em>SDK</em> configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the <em>C</em> <em>SDK</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "APM security: C SDK",
        "Default security settings",
        "Tip",
        "Customize security settings",
        "Caution"
      ],
      "title": "APM security: C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "37fa2254b01e742ac8c0488efaff485b57411358",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/apm-security-c-sdk/",
      "published_at": "2021-05-05T06:25:24Z",
      "updated_at": "2021-03-16T14:49:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Due of the nature of the C SDK, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the C SDK reports all data to New Relic over HTTPS. For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, this is how the C SDK handles the following potentially sensitive data. For more information, including code values and examples, see the C SDK documentation about data structures on GitHub. Type of information C SDK data security Datastore instance name or database name The newrelic_datastore_segment_config_t is a struct that configures whether a datastore's instance name and table name are captured for datastore segment instrumentation. Instance names: By default, the configuration returned by newrelic_new_config() enables datastore segments with instance_reporting set to true. Database names: By default, the configuration returned by newrelic_new_config() enables datastore segments with database_name_reporting set to true. SQL The record_sql setting in the newrelic_transaction_tracer_config_t controls the SQL format in transaction traces for supported SQL-like products. The default setting, NEWRELIC_SQL_OBFUSCATED, sets alphanumeric characters to ?. Audit mode The audit log is a plain text logging of all data sent to New Relic by the C SDK. When starting the C SDK daemon, add -auditlog <file> to the daemon configuration file. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug -auditlog audit.log Copy Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy Customize security settings If the default settings do not work for your business needs, you can customize how information is sent to New Relic by altering the newrelic_datastore_segment_config_t and the newrelic_transaction_tracer_config_t. Caution If you customize your configuration, it may impact the security of your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.50574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM security: <em>C</em> <em>SDK</em>",
        "sections": "APM security: <em>C</em> <em>SDK</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Due of the nature of the <em>C</em> <em>SDK</em>, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the <em>C</em> <em>SDK</em> reports all data to New"
      },
      "id": "603e881564441f04f14e8854"
    }
  ],
  "/docs/agents/c-sdk/get-started/introduction-c-sdk": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.23688,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.91194,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " about the hierarchy of settings, see the illustration for the specific <em>agent</em>: <em>C</em> <em>SDK</em> configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the <em>C</em> <em>SDK</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "APM security: C SDK",
        "Default security settings",
        "Tip",
        "Customize security settings",
        "Caution"
      ],
      "title": "APM security: C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Get started"
      ],
      "external_id": "37fa2254b01e742ac8c0488efaff485b57411358",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/get-started/apm-security-c-sdk/",
      "published_at": "2021-05-05T06:25:24Z",
      "updated_at": "2021-03-16T14:49:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Due of the nature of the C SDK, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the C SDK reports all data to New Relic over HTTPS. For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, this is how the C SDK handles the following potentially sensitive data. For more information, including code values and examples, see the C SDK documentation about data structures on GitHub. Type of information C SDK data security Datastore instance name or database name The newrelic_datastore_segment_config_t is a struct that configures whether a datastore's instance name and table name are captured for datastore segment instrumentation. Instance names: By default, the configuration returned by newrelic_new_config() enables datastore segments with instance_reporting set to true. Database names: By default, the configuration returned by newrelic_new_config() enables datastore segments with database_name_reporting set to true. SQL The record_sql setting in the newrelic_transaction_tracer_config_t controls the SQL format in transaction traces for supported SQL-like products. The default setting, NEWRELIC_SQL_OBFUSCATED, sets alphanumeric characters to ?. Audit mode The audit log is a plain text logging of all data sent to New Relic by the C SDK. When starting the C SDK daemon, add -auditlog <file> to the daemon configuration file. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug -auditlog audit.log Copy Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy Customize security settings If the default settings do not work for your business needs, you can customize how information is sent to New Relic by altering the newrelic_datastore_segment_config_t and the newrelic_transaction_tracer_config_t. Caution If you customize your configuration, it may impact the security of your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.50574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM security: <em>C</em> <em>SDK</em>",
        "sections": "APM security: <em>C</em> <em>SDK</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Due of the nature of the <em>C</em> <em>SDK</em>, you have direct control over what data is reported to New Relic. To ensure data privacy and to limit the types of information New Relic receives, no customer data is captured except what you supply in your API calls. In addition, the <em>C</em> <em>SDK</em> reports all data to New"
      },
      "id": "603e881564441f04f14e8854"
    }
  ],
  "/docs/agents/c-sdk/index": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.91194,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " about the hierarchy of settings, see the illustration for the specific <em>agent</em>: <em>C</em> <em>SDK</em> configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the <em>C</em> <em>SDK</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.78311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Generate logs for troubleshooting (C SDK)",
        "Problem",
        "Solution",
        "Caution",
        "C SDK logs",
        "Daemon logs"
      ],
      "title": "Generate logs for troubleshooting (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Troubleshooting"
      ],
      "external_id": "10921dbb38eaaebe2d9f1595402a82d2f3503841",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/troubleshooting/generate-logs-troubleshooting-c-sdk/",
      "published_at": "2021-05-05T06:34:35Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You encounter problems sending data to New Relic with an application instrumented with the C SDK, but you are not sure what the cause is. Solution The New Relic C SDK and its daemon have their own logs: C SDK logs: These logs are generated due to errors in how you've instrumented your code using the New Relic C SDK API calls. Daemon logs: These are logs related to transmission of data to New Relic. To help troubleshoot an issue, we recommend generating logs at their highest level: Set the C SDK log to verbose level and the daemon log to debug level. Run both logs for 5-10 minutes. After generating logs for troubleshooting, return logging for both the C SDK and daemon to their default levels. Caution Elevated logging levels can create large log files and have a performance impact. Generate logs at this level only as long as necessary for troubleshooting. C SDK logs The C SDK has four log levels, as defined by the enum _newrelic_loglevel_t in libnewrelic.h. By default, logs are set to NEWRELIC_LOG_INFO and output to standard error. Log levels include: NEWRELIC_LOG_ERROR NEWRELIC_LOG_WARNING NEWRELIC_LOG_INFO (default) NEWRELIC_LOG_DEBUG Copy To set a different log level for troubleshooting purposes: Call newrelic_configure_log() in your application code, and set a log level. For example: newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO); Copy Daemon logs The C SDK daemon has four log levels. By default, logs are set to info and output to standard error. Log levels include: error warning info (default) debug Copy These log levels are invoked using flags from the command line: --logfile <DAEMON_FILE_NAME>. Sets the path to the log file. --loglevel <LOG_LEVEL>. Sets the log level. Default: info. Copy To set a different log level for troubleshooting purposes: From the command line, set a different log level flag. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.73409,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate logs for troubleshooting (<em>C</em> <em>SDK</em>)",
        "sections": "Generate logs for troubleshooting (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": "Problem You encounter problems sending data to New Relic with an application instrumented with the <em>C</em> <em>SDK</em>, but you are not sure what the cause is. Solution The New Relic <em>C</em> <em>SDK</em> and its daemon have their own logs: <em>C</em> <em>SDK</em> logs: These logs are generated due to errors in how you&#x27;ve instrumented your code"
      },
      "id": "603e884c28ccbc41e5eba784"
    }
  ],
  "/docs/agents/c-sdk/install-configure/c-sdk-configuration": [
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.42793,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.47467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-05-05T06:31:20Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.12543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    }
  ],
  "/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk": [
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.47467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-05-05T06:31:20Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.12543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-05-04T16:59:19Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.1213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "To ensure you have the most up-to-date version of the New Relic <em>C</em> <em>SDK</em> for your application&#x27;s code library, check the release notes. Update your <em>C</em> <em>SDK</em> code library To update your application&#x27;s code library to the latest version of New Relic&#x27;s <em>C</em> <em>SDK</em>: Review the <em>C</em> <em>SDK</em> library changes to verify your"
      },
      "id": "6043ed05e7b9d282805799d2"
    }
  ],
  "/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code": [
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.42792,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-05-05T06:31:20Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.12543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-05-04T16:59:19Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.1213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "To ensure you have the most up-to-date version of the New Relic <em>C</em> <em>SDK</em> for your application&#x27;s code library, check the release notes. Update your <em>C</em> <em>SDK</em> code library To update your application&#x27;s code library to the latest version of New Relic&#x27;s <em>C</em> <em>SDK</em>: Review the <em>C</em> <em>SDK</em> library changes to verify your"
      },
      "id": "6043ed05e7b9d282805799d2"
    }
  ],
  "/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk": [
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.42792,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.47467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Update your C SDK library",
        "Update your C SDK code library"
      ],
      "title": "Update your C SDK library",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "3fb14c2fbe0c15f6499f5ec50bbcfcb05081b3bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/update-your-c-sdk-library/",
      "published_at": "2021-05-04T16:59:19Z",
      "updated_at": "2021-03-11T06:44:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To ensure you have the most up-to-date version of the New Relic C SDK for your application's code library, check the release notes. Update your C SDK code library To update your application's code library to the latest version of New Relic's C SDK: Review the C SDK library changes to verify your code is compatible. Manually update the code for your app as applicable. Compile the C SDK code, using the make command, to create the latest version of the libnewrelic.a and link it into your application or service. If applicable, redeploy your application to your test environment. Generate traffic for your application, then check your its c_sdk.log file and newrelic-daemon.log output for any errors. Redeploy your application to your production environment. Wait a few minutes for your application to send data to New Relic. Then, check your application's performance in New Relic. If no data appears within a few minutes, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.1213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update your <em>C</em> <em>SDK</em> library",
        "sections": "Update your <em>C</em> <em>SDK</em> library",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "To ensure you have the most up-to-date version of the New Relic <em>C</em> <em>SDK</em> for your application&#x27;s code library, check the release notes. Update your <em>C</em> <em>SDK</em> code library To update your application&#x27;s code library to the latest version of New Relic&#x27;s <em>C</em> <em>SDK</em>: Review the <em>C</em> <em>SDK</em> library changes to verify your"
      },
      "id": "6043ed05e7b9d282805799d2"
    }
  ],
  "/docs/agents/c-sdk/install-configure/update-your-c-sdk-library": [
    {
      "sections": [
        "Docker and other container environments: Install C SDK",
        "Tip",
        "Install C SDK in container environment",
        "Caution"
      ],
      "title": "Docker and other container environments: Install C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "a025a4626e688903bdfae375fd92ef325f09b810",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/docker-other-container-environments-install-c-sdk/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the New Relic C SDK on a Docker container (or other container) to monitor one or more of your C applications. Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install C SDK in container environment Requirements: Meet C SDK requirements C SDK version 1.2 or higher Caution Data transmitted from the agent to the daemon is not encrypted. We recommend only using a private network connection between the agent and daemon. This only applies when the agent and daemon are running on different hosts. To install C SDK for a container environment, we recommend installing the C SDK daemon on a separate docker container: Install the daemon by cloning the C SDK repository and building the daemon. This is done most effectively via the command make daemon. See the README.md for further details. If you are using Docker, you can use the C SDK daemon image on Dockerhub. Start the daemon using --address and --watchdog-foreground arguments. The --address argument is used to set a port where the daemon is accepting connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Then, use the C SDK in your containerized application: Follow the steps to add the C SDK to your code. Point the C SDK to the daemon by adding a newrelic_init call and passing a valid address argument. The value for this argument must be HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.42792,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "sections": "Docker <em>and</em> other <em>container</em> environments: <em>Install</em> <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "You can <em>install</em> the New Relic <em>C</em> <em>SDK</em> on a Docker container (or other container) to monitor one or more of your <em>C</em> applications. Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few"
      },
      "id": "603ead4628ccbcbecfeba77e"
    },
    {
      "sections": [
        "Install the C SDK: Compile and link your code",
        "Tip",
        "Add the C SDK to your code",
        "1. Verify requirements.",
        "2. Include the provided header file.",
        "3. Configure logging.",
        "4. Be ready to provide a meaningful app name.",
        "5. Finish instrumenting your code.",
        "6. Compile and link your app.",
        "7. Start the daemon and check logs.",
        "View app performance in New Relic"
      ],
      "title": "Install the C SDK: Compile and link your code",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "c764f1c209bc5c5cd23cecf0d57d84a293325c98",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/install-c-sdk-compile-link-your-code/",
      "published_at": "2021-05-05T06:29:28Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our C SDK auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic C SDK installation. Add C data Tip To use the C SDK or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add the C SDK to your code To monitor your application with New Relic's C SDK, instrument the features you want to use: Web transactions, transaction events, non-web transactions Segments (for additional levels of timing details) Attributes Errors Then compile and link your app against the C SDK static library. To install the C SDK into your application's code library, follow this procedure. 1. Verify requirements. Make sure your application meets New Relic's compatibility and requirements for the C SDK. Make sure you have a New Relic license key. 2. Include the provided header file. #include \"libnewrelic.h\" Copy 3. Configure logging. Follow the procedures to configure logging for both the C SDK and the daemon. For example: if (!newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO)) { printf(\"Error configuring logging.\\n\"); return -1; } Copy 4. Be ready to provide a meaningful app name. Be prepared to provide a meaningful app name in your initial application configuration; for example: newrelic_app_config_t* config; /* ... */ config = newrelic_create_app_config(\"Your Application Name\", \"LICENSE_KEY_HERE\"); Copy You may give your application up to three different names, separated by ;. Giving your application multiple names allows you to aggregate metrics for multiple agents across an entire app or service; for example: config = newrelic_create_app_config(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\", \"LICENSE_KEY_HERE\"); Copy With the application configured, you can create a new application to connect to the daemon. newrelic_app_t* app; /* ... */ if (!newrelic_init(NULL, 0)) { printf(\"Error connecting to daemon.\\n\"); return -1; } /* Wait up to 10 seconds for the SDK to connect to the daemon */ app = newrelic_create_app(config, 10000); newrelic_destroy_app_config(&config); Copy 5. Finish instrumenting your code. To finish instrumenting your code, refer to the example programs in the C SDK Examples documentation on GitHub. For more information about source code and features, see the C SDK's source documentation for libnewrelic.h on GitHub. 6. Compile and link your app. The C SDK's libnewrelic.a is a static library that is already linked with the libpcre and libpthread libraries. To avoid symbol collisions in this linking step, be sure to link against each of these libraries. In addition, to take full advantage of error traces in APM's Error analytics page, link your application using GNU's -rdynamic linker flag. This will allow more meaningful information to appear in the stack trace for the error recording on a transaction using the C SDK's newrelic_notice_error API call. For example: gcc -o test_app test_app.c -L. -lnewrelic -lpcre -lm -pthread -rdynamic Copy 7. Start the daemon and check logs. Start the C SDK's daemon. For example: ./newrelic-daemon -f -logfile newrelic-daemon.log -loglevel debug Copy Check the output in the c_sdk.log and newrelic-daemon.log files. The C SDK's architecture requires that the daemon must be invoked first before your instrumented application is invoked. Tip To see all of the available options for the C daemon: At the command line, type: ./newrelic-daemon --help Copy For more information, see the C SDK GUIDE.md. View app performance in New Relic To view your app's performance with APM: Generate some traffic for your app, then wait a few minutes for your app to send data to New Relic. Explore your app's data in the APM UI. If no data appears within a few minutes, check your c_sdk.log and newrelic-daemon.log files for errors. If you still have problems, follow the troubleshooting tips.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.47466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "sections": "<em>Install</em> the <em>C</em> <em>SDK</em>: <em>Compile</em> <em>and</em> link your <em>code</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Our <em>C</em> <em>SDK</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>C</em> <em>SDK</em> installation. Add <em>C</em> data Tip To use the <em>C</em> <em>SDK</em> or any other <em>agent</em>, as well as the rest of our observability platform, join"
      },
      "id": "603e87e528ccbc3e4aeba787"
    },
    {
      "sections": [
        "Uninstall (remove) the C SDK",
        "Write instrumentation you can disable",
        "Using #ifdef macros to disable C SDK instrumentation",
        "Uninstall completely"
      ],
      "title": "Uninstall (remove) the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Install and configure"
      ],
      "external_id": "6241507b2d3446af6d8b865679a9584479dc7ace",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/install-configure/uninstall-remove-c-sdk/",
      "published_at": "2021-05-05T06:31:20Z",
      "updated_at": "2021-03-11T07:01:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow these procedures as appropriate to temporarily disable the C SDK in your app's code library or to remove it completely. Write instrumentation you can disable As a C library that provides direct access to the New Relic API, the C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. One approach is to use an #ifdef macro. By surrounding all your instrumentation in #ifdef macros and setting the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system, you will be able to quickly enable or disable New Relic's instrumentation in your C/C++ based programs by recompiling them and then redeploying the application. Using #ifdef macros to disable C SDK instrumentation // replace `YOURNAMESPACE` with something that's unique to // your company/project to ensure a unique name #ifdef YOURNAMESPACE_NEWRELIC_ENABLED int priority = 50; newrelic_txn_t* txn = newrelic_start_non_web_transaction(app, transaction_name); ... if (err) { newrelic_notice_error(txn, priority, \"Meaningful error message\", \"Error.class\"); } ... newrelic_end_transaction(&txn); #endif Copy Uninstall completely To remove the New Relic's C SDK completely from your app's code library: Remove the linking to libnewrelic.a in your build system. Remove all New Relic API calls from your application code. Recompile and redeploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.12541,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "sections": "Uninstall (remove) the <em>C</em> <em>SDK</em>",
        "tags": "<em>Install</em> <em>and</em> <em>configure</em>",
        "body": "Follow these procedures as appropriate to temporarily disable the <em>C</em> <em>SDK</em> in your app&#x27;s code library or to remove it completely. Write instrumentation you can disable As a <em>C</em> library that provides direct access to the New Relic API, the <em>C</em> <em>SDK</em> cannot be turned on or off directly. However, you can write"
      },
      "id": "6043f20328ccbce9712c60b4"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.14212,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-05-04T16:59:22Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.58797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "sections": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": " installation procedures. Manually <em>instrument</em> transactions using the <em>C</em> <em>SDK</em>, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually <em>instrument</em> transactions in your source code by adding New Relic functions, you can"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-05-04T16:58:28Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.5195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> monitors your applications and microservices to help you identify and solve performance issues. <em>C</em> applications run from a compiled, native binary file. In order to monitor transactions, you must manually <em>instrument</em> your code by adding New Relic methods to it. This guide helps you"
      },
      "id": "603ec04928ccbc252beba785"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.14203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-05-04T16:59:22Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.58797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "sections": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": " installation procedures. Manually <em>instrument</em> transactions using the <em>C</em> <em>SDK</em>, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually <em>instrument</em> transactions in your source code by adding New Relic functions, you can"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Enable distributed tracing for your C applications",
        "Enable distributed tracing",
        "Important",
        "Instrument transactions and HTTP requests"
      ],
      "title": "Enable distributed tracing for your C applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "028724e00f733d612f6226d5fd574c392992dc08",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications/",
      "published_at": "2021-05-05T06:24:20Z",
      "updated_at": "2021-03-16T02:40:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and instrument distributed tracing for the New Relic's C SDK. Enable distributed tracing To enable distributed tracing for a New Relic-monitored C application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true. newrelic_app_config_t* config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Continue with the procedures to instrument transactions and HTTP requests. Important Span events can be enabled/disabled separately from distributed tracing. Instrument transactions and HTTP requests For transactions that occur in multiple services, the distributed trace payload contains information that allows New Relic to stitch them together into a complete transaction trace. However, if New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For more information, see the documentation about passing the distributed tracing API header and the C SDK's distributed tracing documentation on GitHub. If you want to... Use this Create and return a payload to be sent to the called service newrelic_create_distributed_trace_payload() Copy Accept a payload sent from the first service newrelic_accept_distributed_trace_payload() Copy This will link these services together in a trace. Return a base64-encoded JSON string representation of the payload newrelic_create_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_create_distributed_trace_payload(). Accept a base64-encoded string for the payload newrelic_accept_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_accept_distributed_trace_payload().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.42433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>C</em> applications ",
        "sections": "Enable distributed tracing for your <em>C</em> applications",
        "tags": "<em>Agents</em>",
        "body": "Read on to learn how to enable and <em>instrument</em> distributed tracing for the New Relic&#x27;s <em>C</em> <em>SDK</em>. Enable distributed tracing To enable distributed tracing for a New Relic-monitored <em>C</em> application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true"
      },
      "id": "603ec26f28ccbcb2d9eba78e"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.14203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-05-04T16:58:28Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.51949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> monitors your applications and microservices to help you identify and solve performance issues. <em>C</em> applications run from a compiled, native binary file. In order to monitor transactions, you must manually <em>instrument</em> your code by adding New Relic methods to it. This guide helps you"
      },
      "id": "603ec04928ccbc252beba785"
    },
    {
      "sections": [
        "Enable distributed tracing for your C applications",
        "Enable distributed tracing",
        "Important",
        "Instrument transactions and HTTP requests"
      ],
      "title": "Enable distributed tracing for your C applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "028724e00f733d612f6226d5fd574c392992dc08",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/enable-distributed-tracing-your-c-applications/",
      "published_at": "2021-05-05T06:24:20Z",
      "updated_at": "2021-03-16T02:40:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and instrument distributed tracing for the New Relic's C SDK. Enable distributed tracing To enable distributed tracing for a New Relic-monitored C application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true. newrelic_app_config_t* config = newrelic_create_app_config(app_name, license_key); config->distributed_tracing.enabled = true; Copy Continue with the procedures to instrument transactions and HTTP requests. Important Span events can be enabled/disabled separately from distributed tracing. Instrument transactions and HTTP requests For transactions that occur in multiple services, the distributed trace payload contains information that allows New Relic to stitch them together into a complete transaction trace. However, if New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For more information, see the documentation about passing the distributed tracing API header and the C SDK's distributed tracing documentation on GitHub. If you want to... Use this Create and return a payload to be sent to the called service newrelic_create_distributed_trace_payload() Copy Accept a payload sent from the first service newrelic_accept_distributed_trace_payload() Copy This will link these services together in a trace. Return a base64-encoded JSON string representation of the payload newrelic_create_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_create_distributed_trace_payload(). Accept a base64-encoded string for the payload newrelic_accept_distributed_trace_payload_httpsafe() Copy This offers the same behavior as newrelic_accept_distributed_trace_payload().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.42433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>C</em> applications ",
        "sections": "Enable distributed tracing for your <em>C</em> applications",
        "tags": "<em>Agents</em>",
        "body": "Read on to learn how to enable and <em>instrument</em> distributed tracing for the New Relic&#x27;s <em>C</em> <em>SDK</em>. Enable distributed tracing To enable distributed tracing for a New Relic-monitored <em>C</em> application: Create a default newrelic_app_config_t and set the distributed_tracing.enabled field to true"
      },
      "id": "603ec26f28ccbcb2d9eba78e"
    }
  ],
  "/docs/agents/c-sdk/instrumentation/use-default-or-custom-attributes-c-sdk": [
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.14195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Instrument your app with the C SDK",
        "Instrument a transaction",
        "Instrument segments",
        "Instrument calls to external services",
        "Instrument calls to arbitrary code (custom segments)",
        "Instrument calls to datastores",
        "Tip",
        "Report slow query traces for datastore segments (SQL only)",
        "Important",
        "Instrument errors",
        "Avoid metric grouping issues"
      ],
      "title": "Instrument your app with the C SDK",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "dc21642bac9d779820a40eea8601434c4242f425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/instrument-your-app-c-sdk/",
      "published_at": "2021-05-04T16:59:22Z",
      "updated_at": "2021-03-16T13:43:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to monitor any application on Linux using a language that can import C libraries, you must: Create a config using newrelic_new_app_config(), connect to the daemon using newrelic_init(), and connect your application using newrelic_create_app(). For more information, see the C SDK installation procedures. Manually instrument transactions using the C SDK, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually instrument transactions in your source code by adding New Relic functions, you can view the data on the Transactions page in New Relic. You can also instrument segments of a transaction and errors. Instrument a transaction To instrument a transaction so you can monitor it, wrap the New Relic functions that start and stop instrumentation around the transaction. The function that you use depends on whether you want to instrument a web or non-web transaction. In the following example, the app is created after a call to newrelic_create_app(). For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Add the following code immediately before the transaction that you want to monitor, supplying the required parameters. For web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy For non-web transactions: // Example code: newrelic_txn_t *txn; /* ... */ txn = newrelic_start_non_web_transaction(app, \"NAME_YOUR_TRANSACTION\"); Copy Add newrelic_end_transaction() immediately after the web or non-web transaction that you want to monitor, supplying a pointer the transaction, &txn, as a parameter. Instrument segments Once you instrument a transaction using the C SDK, you can instrument segments in it. By instrumenting segments, you can monitor the individual functions and calls inside a transaction. Segments example You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You can instrument your application to break that transaction up into two segments: one segment for shipping and one segment for payment. You can instrument segments to monitor the following kinds of calls: External services using external segments Custom segments for arbitrary code Datastores using datastore segments Slow query traces (SQL databases only) For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to external services To monitor calls to external services, instrument external segments that are within an instrumented transaction. External segments appear in the Transactions page's Breakdown table and the External services page. To instrument an external segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_external_segment_params_t that describes the external segment, supplying the required parameters. Add newrelic_start_external_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to arbitrary code (custom segments) To monitor calls to arbitrary code, instrument custom segments that are within an instrumented transaction. Custom segments appear in the Breakdown table on the Transactions page. To instrument a custom segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Add newrelic_start_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument calls to datastores To monitor calls to datastores, instrument the datastore segments within an instrumented transaction. Datastore segments appear in the Breakdown table and Databases tab on the Transactions page in New Relic. You can also view datastore segments as a databaseDuration attribute of APM Transaction events. To instrument a datastore segment, wrap the New Relic functions that start and stop instrumentation around the function you want to monitor: Instrument a transaction. Create a newrelic_datastore_segment_params_t that describes the datastore segment. Add newrelic_start_datastore_segment() immediately before the function you want to monitor, supplying the required parameters. Add newrelic_end_segment() immediately after the function you want to monitor, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Tip To configure how the database name and database instance are reported, use the newrelic_datastore_segment_config_t. Report slow query traces for datastore segments (SQL only) Important You can report slow query traces for SQL databases only. To report slow query trace data for datastore segments that take longer than the time you specify, enable these settings in your newrelic_app_config_t: Enable slow query tracing by setting transaction_tracer.datastore_reporting.enabled to true. To set the threshold, add a length of time in microseconds to transaction_tracer.datastore_reporting.threshold_us. Then, if a datastore call takes longer than the threshold, the C SDK reports it as a slow query. To view slow query trace details, use the Databases and Slow queries pages in New Relic. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Instrument errors In order to use the C SDK to monitor errors in transactions, you must manually instrument your source code by adding the newrelic_notice_error() function to it. Transaction errors and error traces appear on the Error analytics page in New Relic. The C SDK reports the total number of errors and up to 100 error traces per minute. You can also view, query, and visualize transaction errors as APM TransactionError events. Tip To include function calls in error traces, use GNU's -rdynamic linker flag to link your apps when compiling. The -rdynamic linker flag gives you more meaningful error traces. To instrument errors in transactions: Start a transaction. Record an error with newrelic_notice_error(), supplying the required parameters. End the transaction, supplying the required parameters. For more information, see the C SDK installation procedures as well as the C SDK libnewrelic.h documentation on GitHub. Avoid metric grouping issues When an account or application sends many individual metrics that could be better managed in groups, New Relic uses the term metric grouping issue or MGI to describe this situation. If your application sends unnecessarily large amounts of data to New Relic, this reduces the effectiveness of charts, tables, and reports. Metric grouping issues occur most commonly with web transactions, especially if the name is based on URLs. To help prevent this situation, see Metric grouping issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.58797,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "sections": "<em>Instrument</em> your app with the <em>C</em> <em>SDK</em>",
        "tags": "<em>Agents</em>",
        "body": " installation procedures. Manually <em>instrument</em> transactions using the <em>C</em> <em>SDK</em>, as described in this document. New Relic defines a web or non-web transaction as one logical unit of work in a software application. After you manually <em>instrument</em> transactions in your source code by adding New Relic functions, you can"
      },
      "id": "603ec08fe7b9d229232a0810"
    },
    {
      "sections": [
        "Guide to using the C SDK API",
        "Ensure your customization is thread-safe",
        "Monitor transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument calls to external services",
        "Collect or log errors",
        "Send custom data from your app",
        "Custom events",
        "Tip",
        "Custom event attributes",
        "Custom metrics",
        "Important",
        "Monitor desktop browser performance",
        "Change configuration settings"
      ],
      "title": "Guide to using the C SDK API",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Instrumentation"
      ],
      "external_id": "fd96697be408715e6330a91b237c5fb6b5042bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/instrumentation/guide-using-c-sdk-api/",
      "published_at": "2021-05-04T16:58:28Z",
      "updated_at": "2021-03-16T09:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's C SDK monitors your applications and microservices to help you identify and solve performance issues. C applications run from a compiled, native binary file. In order to monitor transactions, you must manually instrument your code by adding New Relic methods to it. This guide helps you to decide which method to use. The method's code, required parameters, and examples reside in New Relic's C SDK documentation on GitHub. Ensure your customization is thread-safe The C SDK supports instrumentation of multi-threaded applications, but it must be initialized before instrumenting multiple threads. When calling any of the following functions, ensure that they are called on the main thread before any other C SDK functions are called: newrelic_configure_log newrelic_init Monitor transactions Before you manually instrument your code to monitor transactions: Check the C SDK compatibility and requirements for your app. Make sure you are using the latest version of the C SDK library, and update as needed. If you want to... Use this method... Start timing a web transaction newrelic_start_web_transaction() Start timing a non-web transaction newrelic_start_non_web_transaction() Stop timing a transaction newrelic_end_transaction() Prevent a transaction from reporting to New Relic newrelic_ignore_transaction() Time specific methods using segments If a transaction is already visible in New Relic, but you do not have enough data about a particular method that was called during that transaction, you can instrument segments. For example, if you want to time a method that has complex logic, you can create a segment for each of the methods in the transaction. To instrument a method within an existing transaction, create segments for any of the following: External services Functions or other arbitrary blocks of code (using custom segments) Datastores Slow query traces (SQL datastores only) If you want to... Use this method... Start timing a segment newrelic_start_datastore_segment()newrelic_start_external_segment()newrelic_start_segment() Stop timing a segment newrelic_end_segment() Manually parent segments newrelic_set_segment_parent() and newrelic_set_segment_parent_root() This is useful, for example, with an asynchronous process when you want to visualize a segment as a child of the transaction's top-level call. For more information, see the manual segment parenting documentation on GitHub. Segments are recorded on the active transaction. When adding a segment to an active transaction, you need access to the newrelic_txn_t* or transaction pointer, returned by newrelic_start_web_transaction() or newrelic_start_non_web_transaction(). Enhance the metadata of a transaction You can manage the metadata that New Relic reports for transactions. This is useful when you want a different level of detail for your transactions. For example: If you are experiencing a metric grouping issue, you can change the default names for your transactions to make them more identifiable. If you want to create dashboards for your transactions, you can add custom attributes. If you want to... Use this method... Add metadata (such as your customer's account name or subscription level) to your transaction Add custom attributes to your transaction based on their type: newrelic_add_attribute_int() newrelic_add_attribute_string() newrelic_add_attribute_long() newrelic_add_attribute_double() Instrument calls to external services Use these methods to collect data about your app's connections to other apps or databases: If you want to... Use this method... See the path that a request takes as it travels through a distributed system Follow the procedures to enable and instrument distributed tracing. Time a call to an external resource (such as an external service, database server, or message queue) Follow the procedures to Instrument calls to external segments. Collect or log errors The C SDK detects errors automatically. If you want to change the way it reports errors to New Relic, change the error collector configuration. If you want to... Use this method... Set logging levels for your app Use newrelic_configure_log() to configure the C SDK logs and command-line flags to configure the C daemon logs. For more information, see the C SDK logging documentation. Report an error newrelic_notice_error() Send custom data from your app To record custom data with the C SDK, you can use any of the following methods: Custom events: At New Relic, event data is a fundamental data type. Event data represents a record of a single event at a particular moment in time. This is useful to view or query specific details. Custom event attributes: To include additional metadata about the event, you can add key/value pairs (custom-attributes) to your custom event. Custom metrics: Metric timeslice data is the statistical measure of data that New Relic aggregates so that you can view it in the UI and chart it. Typically metric data has a longer retention period than event data. Custom events The C SDK provides a custom events API that allows you to send custom events to New Relic. To send an event, start a transaction and use the newrelic_create_custom_event and newrelic_record_custom_event functions. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_record_custom_event(txn, &custom_event); Copy Be sure to review the custom data requirements and limits for guidance on what values are and are not allowed inside your custom event. For more information, see Custom events in APM. Tip If you created a custom event but need to remove it before the transaction has ended, use newrelic_discard_custom_event(&custom_event);. Custom event attributes You can also add int, long, double, and char* (string) attributes to your custom event by using the newrelic_custom_event_add_* family of functions. For example: // Example custom attributes: newrelic_custom_event_t* custom_event=0; custom_event = newrelic_create_custom_event(\"aTypeForYourEvent\"); newrelic_custom_event_add_attribute_int(custom_event, \"keya\", 42); newrelic_custom_event_add_attribute_long(custom_event, \"keyb\", 84); newrelic_custom_event_add_attribute_double(custom_event, \"keyc\", 42.42); newrelic_custom_event_add_attribute_string(custom_event, \"keyd\", \"A string\"); newrelic_record_custom_event(txn, &custom_event); Copy For more information, see the documentation about custom attributes. Custom metrics The C SDK provides the newrelic_record_custom_metric() function. This allows you to record time-based performance data using an API call, such as: Transaction timing data Computer resource data Subscription or purchasing data To create a custom metric, provide a name or other identifier and an amount of time in milliseconds to the function, along with the active transaction. Important Always prefix custom metric names with Custom/. For example: // txn is a newrelic_txn_t*, created via newrelic_start_web_transaction // Record a metric value of 100ms in the transaction txn newrelic_record_custom_metric(txn, \"Custom/MyMetric/My_label\", 100); Copy For more information, see Collect custom metrics. Here are some ways to use your custom data. For code details and examples for these options, see the New Relic globals documentation on GitHub. If you want to... Use this method... Create a custom event to populate with a timestamp and attributes. newrelic_create_custom_event() Timestamp and add the custom event to the current transaction so you can query or visualize it. newrelic_record_custom_event() Enhance your custom event with additional metadata. Add custom event attributes to your custom event based on type: newrelic_custom_event_add_attribute_double() newrelic_custom_event_add_attribute_int() newrelic_custom_event_add_attribute_long() newrelic_custom_event_add_attribute_string() Discard a custom event after it was created, but before its transaction has ended, to avoid reporting it to New Relic. newrelic_discard_custom_event This is necessary to free the allocated memory for your unwanted custom event in order to avoid leaks in your program. Report a custom performance duration that you can search or chart. newrelic_record_custom_metric() Monitor desktop browser performance To monitor desktop browser performance for your application, install the browser agent using the copy/paste method. Change configuration settings Typically the default settings for your application's configuration do not need to be changed. However, when necessary, you can adjust some of the settings. For more information, see the C SDK configuration documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.51949,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>C</em> <em>SDK</em> API",
        "sections": "Guide to using the <em>C</em> <em>SDK</em> API",
        "tags": "<em>Agents</em>",
        "body": "New Relic&#x27;s <em>C</em> <em>SDK</em> monitors your applications and microservices to help you identify and solve performance issues. <em>C</em> applications run from a compiled, native binary file. In order to monitor transactions, you must manually <em>instrument</em> your code by adding New Relic methods to it. This guide helps you"
      },
      "id": "603ec04928ccbc252beba785"
    }
  ],
  "/docs/agents/c-sdk/troubleshooting/generate-logs-troubleshooting-c-sdk": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.24171,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " about the hierarchy of settings, see the illustration for the specific <em>agent</em>: <em>C</em> <em>SDK</em> configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the <em>C</em> <em>SDK</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.17128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "No data appears (C SDK)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Troubleshooting"
      ],
      "external_id": "90e3980f888309fa51fc8d8629b56bacca55db7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/troubleshooting/no-data-appears-c-sdk/",
      "published_at": "2021-05-05T06:34:34Z",
      "updated_at": "2021-03-16T04:28:24Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic C SDK, generated traffic for your app, and waited a few minutes, but you still do not see data reporting in APM. Solution These troubleshooting tips are approximately ordered from the most common to least common issue. Check the output in the C SDK and daemon log files for errors. Make sure the daemon process (newrelic-daemon) is up and running so that it is invoked before starting your instrumented application. Verify your app's name and license key in your C SDK configuration. Make sure you call: newrelic_create_app() newrelic_start_web_transaction() or newrelic_start_non_web_transaction() as applicable newrelic_end_transaction() Also make sure none of these calls returns false or NULL. If necessary, check the C SDK version using newrelic_version(), and update your C SDK library to the latest release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.55784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>C</em> <em>SDK</em>)",
        "sections": "No data appears (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": "Problem You installed the New Relic <em>C</em> <em>SDK</em>, generated traffic for your app, and waited a few minutes, but you still do not see data reporting in APM. Solution These <em>troubleshooting</em> tips are approximately ordered from the most common to least common issue. Check the output in the <em>C</em> <em>SDK</em> and daemon log"
      },
      "id": "603e8815e7b9d264312a07de"
    }
  ],
  "/docs/agents/c-sdk/troubleshooting/no-data-appears-c-sdk": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.24164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " about the hierarchy of settings, see the illustration for the specific <em>agent</em>: <em>C</em> <em>SDK</em> configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the <em>C</em> <em>SDK</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "APM agent data security",
        "Disclosure and audit",
        "Data collection",
        "Security settings",
        "Default security settings",
        "High security mode",
        "Custom security settings",
        "Data received by New Relic",
        "Important",
        "TLS and SSL",
        "Data transmission",
        "Proxies"
      ],
      "title": "APM agent data security",
      "type": "docs",
      "tags": [
        "APM",
        "New Relic APM",
        "Getting started"
      ],
      "external_id": "13a81c4a9a04e42bd4493768be3bfc42f769e1e5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/getting-started/apm-agent-data-security/",
      "published_at": "2021-05-05T01:45:09Z",
      "updated_at": "2021-05-05T01:45:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM agent that you installed receives data from your applications. The default data retention is based on your pricing edition. New Relic's default security settings automatically work to ensure data privacy and to limit the kind of information New Relic receives. You can also change these settings. Disclosure and audit Our APM agent is a publicly accessible plugin for web applications. The agent does not do any dynamic code generation while communicating with your app, so using the agent will not introduce any code into your application without your knowledge. Most of our agents are open source, so you can see what our code does: C SDK Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the agent receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the agent, indicating if the data was correctly received or if there was an error. New Relic collects the following aggregate metric data: Database activity External web service calls Controller and dispatch activity View activity Uncaught exceptions and counts Process memory and CPU usage This aggregate metric data summarizes calls to specific methods in your application: how many times each one was called and various response time statistics (average, minimum, maximum, and standard deviation). In New Relic, you will see the class and method names along with their aggregate numbers. New Relic optionally collects: Data collection Comments Uncaught errors New Relic captures the error as well as a runtime stack trace of the offending code. Transaction traces These are snapshots of a single transaction. As an option, the agent can also collect the query statements called within the transaction. The default collection uses obfuscation to hide any strings or numbers from the query. For transactions slower than a threshold you set, New Relic also collects data from SQL EXPLAIN. For database calls slower than a configured threshold, New Relic optionally collects runtime stack traces, which are helpful to pinpoint where in the code a database call is made. Custom parameters You can add custom parameters to your application code and record them with transaction traces to provide additional context while you are examining profiling information. Optional: For both errors and transaction traces, the HTTP request parameters can also be recorded. Security settings If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. Default security settings Depending on the agent, the default settings provide security for request parameters, HTTPS usage, and SQL: C SDK default security settings Go default security settings Java default security settings .NET default security settings Node.js default security settings PHP default security settings Python default security settings Ruby default security settings High security mode When the agent is in high security mode, default settings are locked so that users cannot change them. In addition, high security mode applies restrictions to custom events, custom instrumentation, user attributes, exception messages, or message queue parameters, depending on the agent: C SDK: n/a Go high security mode settings Java high security mode settings .NET high security mode settings Node.js high security mode settings PHP high security mode settings Python high security mode settings Ruby high security mode settings Custom security settings If you want custom security settings, you can customize the configuration file, change custom attribute settings, or use the API, depending on your agent: C SDK custom security settings Go custom security settings Java custom security settings .NET custom security mode settings Node.js custom security settings PHP custom security settings Python custom security settings Ruby custom security settings Data received by New Relic This information applies to all APM agents no matter what security settings you have applied. Important Other data that New Relic receives is specific to the security settings for each agent. Data Captured? APM agent language version OS type and version System properties Average response time of transactions in your app URL hits Client IP address Not captured TLS and SSL Our preferred protocol for all domains is TLS 1.2. APM agents enable SSL by default. To verify which release includes SSL by default and to ensure that you have the most up-to-date version, refer to your agent's release notes: C SDK Go Java .NET Node.js PHP Python Ruby The configuration file also includes an optional flag (ssl) to enable or disable SSL using HTTPS. New Relic does not do host authentication with HTTPS, just communication encryption. Exception: You cannot disable SSL for the C SDK. The C SDK daemon can only connect with SSL. New Relic requires HTTPS for all traffic to APM and the REST API. This includes both inbound and outbound traffic. If your REST API call uses HTTP, or if you have disabled SSL in your configuration file, change your script or program to HTTPS. Data transmission Under Java, .NET and PHP, New Relic uses JSON to serialize data. The Ruby agent uses either Ruby marshaling or JSON serialization to send data to New Relic, depending on whether a native JSON encoder is available in under the Ruby version the agent is running on. For required changes when you want to create firewall rules to allow the agent to communicate, see Networks. For more information about security measures for your data in transit to New Relic or at rest in our storage, see Data encryption. Proxies Optional settings are available so that you can configure the agent to communicate through a proxy. To define proxy settings for host, port, domain, user, or password, refer to your agent's configuration file documentation: Agent Proxy settings C SDK -proxy at daemon startup Go transport Java Use proxy settings, including: proxy_host proxy_password proxy_port proxy_user .NET proxy element Node.js proxy PHP newrelic.daemon.proxy or the daemon's proxy setting Python proxy settings Ruby Use proxy settings, including: proxy_host proxy_port proxy_user proxy_pass",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.1712,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> data security",
        "sections": "APM <em>agent</em> data security",
        "body": " source, so you can see what our code does: <em>C</em> <em>SDK</em> Go .NET Node.js Python Ruby Data collection Using a JSON message format, data the <em>agent</em> receives from your app is posted once a minute to the New Relic user interface. The website returns a JSON response to the <em>agent</em>, indicating if the data"
      },
      "id": "6043ffe7196a67cdd1960f67"
    },
    {
      "sections": [
        "Generate logs for troubleshooting (C SDK)",
        "Problem",
        "Solution",
        "Caution",
        "C SDK logs",
        "Daemon logs"
      ],
      "title": "Generate logs for troubleshooting (C SDK)",
      "type": "docs",
      "tags": [
        "Agents",
        "C SDK",
        "Troubleshooting"
      ],
      "external_id": "10921dbb38eaaebe2d9f1595402a82d2f3503841",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/c-sdk/troubleshooting/generate-logs-troubleshooting-c-sdk/",
      "published_at": "2021-05-05T06:34:35Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You encounter problems sending data to New Relic with an application instrumented with the C SDK, but you are not sure what the cause is. Solution The New Relic C SDK and its daemon have their own logs: C SDK logs: These logs are generated due to errors in how you've instrumented your code using the New Relic C SDK API calls. Daemon logs: These are logs related to transmission of data to New Relic. To help troubleshoot an issue, we recommend generating logs at their highest level: Set the C SDK log to verbose level and the daemon log to debug level. Run both logs for 5-10 minutes. After generating logs for troubleshooting, return logging for both the C SDK and daemon to their default levels. Caution Elevated logging levels can create large log files and have a performance impact. Generate logs at this level only as long as necessary for troubleshooting. C SDK logs The C SDK has four log levels, as defined by the enum _newrelic_loglevel_t in libnewrelic.h. By default, logs are set to NEWRELIC_LOG_INFO and output to standard error. Log levels include: NEWRELIC_LOG_ERROR NEWRELIC_LOG_WARNING NEWRELIC_LOG_INFO (default) NEWRELIC_LOG_DEBUG Copy To set a different log level for troubleshooting purposes: Call newrelic_configure_log() in your application code, and set a log level. For example: newrelic_configure_log(\"./c_sdk.log\", NEWRELIC_LOG_INFO); Copy Daemon logs The C SDK daemon has four log levels. By default, logs are set to info and output to standard error. Log levels include: error warning info (default) debug Copy These log levels are invoked using flags from the command line: --logfile <DAEMON_FILE_NAME>. Sets the path to the log file. --loglevel <LOG_LEVEL>. Sets the log level. Default: info. Copy To set a different log level for troubleshooting purposes: From the command line, set a different log level flag. For example: ./newrelic-daemon -f -logfile stdout -loglevel debug Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.74326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate logs for <em>troubleshooting</em> (<em>C</em> <em>SDK</em>)",
        "sections": "Generate logs for <em>troubleshooting</em> (<em>C</em> <em>SDK</em>)",
        "tags": "<em>Agents</em>",
        "body": " using the New Relic <em>C</em> <em>SDK</em> API calls. Daemon logs: These are logs related to transmission of data to New Relic. To help <em>troubleshoot</em> an issue, we recommend generating logs at their highest level: Set the <em>C</em> <em>SDK</em> log to verbose level and the daemon log to debug level. Run both logs for 5-10 minutes"
      },
      "id": "603e884c28ccbc41e5eba784"
    }
  ],
  "/docs/agents/go-agent/api-guides/guide-using-go-agent-api": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.60884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Guide to using the PHP agent API",
        "Tip",
        "Notice or ignore errors",
        "Enhance the metadata of a transaction",
        "Name reporting app",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Instrument asynchronous work",
        "Send custom event and metric data from your app",
        "Instrument calls to external services",
        "Monitor specific browser pages",
        "For more help"
      ],
      "title": "Guide to using the PHP agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "API guides"
      ],
      "external_id": "c1e218a22dcfaec484847c97b50bc452b6155a5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/api-guides/guide-using-php-agent-api/",
      "published_at": "2021-05-05T13:49:55Z",
      "updated_at": "2021-04-16T09:19:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent provides an API for customizing agent behavior. The agent automatically instruments many popular PHP frameworks, but you can use the PHP API to instrument activity that the agent doesn't already instrument by default. This guide describes PHP API calls for several common tasks; for example: Notice or ignore specific errors. Name a transaction. Rename the application reporting the data. Tip You can also set many of these options per directory or in newrelic.ini. If setting via API, the API takes precedence over the other methods. Notice or ignore errors Usually, the agent detects errors automatically. However, you can manually mark an error with the agent. If you want to... Do this... Report an error the agent does not report automatically See newrelic_notice_error(). Ignore an error Edit error_collector.ignore_exceptions or error_collector.ignore_errors in thenewrelic.ini file. Enhance the metadata of a transaction Sometimes the code you target is visible in New Relic, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions or spans so you can filter them with NRQL queries. Use these methods when you want to change how New Relic instruments a transaction that's already visible in New Relic: If you want to... Do this... Change the name of a transaction See newrelic_name_transaction(). Add metadata (such as your customer's account name or subscription level) to your transactions or spans Use custom attributes. For custom attributes which will be added to transactions and spans (if enabled), see newrelic_add_custom_parameter(). For custom attributes which will be added only to spans, see newrelic_add_custom_span_parameter(). Mark a transaction as a background job See newrelic_background_job(). Prevent a transaction from affecting your Apdex score See newrelic_ignore_apdex(). Name reporting app The New Relic UI organizes data by how you name your application. Each name appears as a different app. You can rename the reporting app for any part of your code to better help you: Organize and analyze your data on New Relic UI pages (for example, APM's Applications index page, the Summary page, the Transactions page, etc.). Query your data. Create alert policies. This is especially useful if you have a multi-site application or distinct sets of application code using the same PHP installation. Alternatively, you can set the app name at a higher level instead via the newrelic.appname config value, via Apache, or via PHP-FPM. If you want to... Do this... Rename the reporting app for a specific part of your code Set the app name. See newrelic_set_appname(). Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. For more information about transactions, see transaction and transaction trace. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Start timing a method New Relic is not instrumenting automatically Start a transaction. See newrelic_start_transaction(). Stop timing a method after its work is completed Stop a transaction. See newrelic_end_transaction(). Prevent a transaction from reporting to New Relic Ignore the transaction. See newrelic_ignore_transaction(). Time specific methods using segments If a transaction is already visible in the New Relic UI, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use this methods when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See newrelic_add_custom_tracer(). Instrument asynchronous work The only async work the PHP agent instruments is Guzzle, which is instrumented by default. Send custom event and metric data from your app New Relic includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in New Relic Create a custom event. See Insert custom events via APM agent (PHP). Tag your events with metadata to filter and facet them Add custom attributes. See newrelic_add_custom_parameter(). Report custom performance data Create a custom metric. See newrelic_custom_metric(). Instrument calls to external services Use these methods to collect data about your app's connections to other apps or datastores: If you want to... Do this... Time a call to a datastore not instrumented by default See newrelic_record_datastore_segment(). See the path that a request takes as it travels through a distributed system For PHP agent versions lower than 9.8, see these API calls: newrelic_create_distributed_trace_payload() newrelic_accept_distributed_trace_payload() newrelic_accept_distributed_trace_payload_httpsafe() For PHP agent versions 9.8 or higher, see these API calls: newrelic_insert_distributed_trace_headers() newrelic_accept_distributed_trace_headers() For examples, see the documentation to manually instrument distributed tracing. Monitor specific browser pages You can install the browser agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting our JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser monitoring and the PHP agent. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 73.93094,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the PHP <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the PHP <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "New Relic&#x27;s PHP <em>agent</em> provides an <em>API</em> for customizing <em>agent</em> behavior. The <em>agent</em> automatically instruments many popular PHP frameworks, but you can use the PHP <em>API</em> to instrument activity that the <em>agent</em> doesn&#x27;t already instrument by default. This guide describes PHP <em>API</em> calls for several common tasks"
      },
      "id": "60441c1ee7b9d2aa685799c5"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-05-05T00:40:51Z",
      "updated_at": "2021-04-16T05:29:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in New Relic APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable New Relic Browser. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 73.81904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/go-agent/configuration/go-agent-configuration": [
    {
      "sections": [
        "Go agent logging",
        "Write log files",
        "Logrus integration example",
        "For more help"
      ],
      "title": "Go agent logging",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "3eca4ea8f4b58b64841e4c465cbacde5c897de10",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-logging/",
      "published_at": "2021-05-05T07:20:18Z",
      "updated_at": "2021-03-11T12:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go logging uses the standard Go log package and a New Relic Logger package. Logging is useful for troubleshooting your New Relic integration; for example, with installation or configuration problems. Write log files To use the Go agent methods for writing log and audit files, see log.go on the agent GitHub repo. Logrus integration example New Relic offers an integration for the Logrus logging system. Here is an example of using the New Relic Logrus integration in an application: Import both github.com/sirupsen/logrus and github.com/newrelic/go-agent/v3/integrations/nrlogrus. Set the log level and assign the Logger output to Logrus. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { logrus.SetLevel(logrus.DebugLevel) config.Logger = nrlogrus.StandardLogger() }, ) Copy For more help For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.69095,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> logging",
        "sections": "<em>Go</em> <em>agent</em> logging",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "New Relic for <em>Go</em> logging uses the standard <em>Go</em> log package and a New Relic Logger package. Logging is useful for troubleshooting your New Relic integration; for example, with installation or <em>configuration</em> problems. Write log files To use the <em>Go</em> <em>agent</em> methods for writing log and audit files, see"
      },
      "id": "6043f284196a67c735960f7f"
    },
    {
      "sections": [
        "No data appears (Go)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Troubleshooting"
      ],
      "external_id": "b4dd532f3fede91074170485ace90ac9e400bc84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/troubleshooting/no-data-appears-go/",
      "published_at": "2021-05-05T07:18:22Z",
      "updated_at": "2021-03-11T07:58:23Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Go agent for your Golang app. After you generated some traffic and waited a few minutes, your app is still not reporting data in New Relic. Solution After sending a request to your web application, data should appear in the APM UI within two to three minutes. If you still do not see any data on your app's Summary page, try these troubleshooting tips: Verify your app's name and license key in your Go agent configuration's newrelic.Config struct. Use New Relic Diagnostics to try to automatically identify the issue. Make sure you instrumented your app's transactions with newrelic.WrapHandleFunc or Application.StartTransaction and Transaction.End. Restart your web server. Use the Go Logger interface to generate Debug level logs, and check those logs for errors. If necessary, upgrade to the latest New Relic Go agent release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.27325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Go</em>)",
        "sections": "No data appears (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". If you still do not see any data on your app&#x27;s Summary page, try these troubleshooting tips: Verify your app&#x27;s name and license key in your <em>Go</em> <em>agent</em> <em>configuration</em>&#x27;s newrelic.Config struct. Use New Relic Diagnostics to try to automatically identify the issue. Make sure you instrumented your app"
      },
      "id": "6043b93c28ccbc5c8d2c6082"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.90915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>configuration</em>. To enable server-side <em>configuration</em> settings for apps that use other New Relic <em>agents</em>: <em>Go</em> to rpm.newrelic.com&#x2F;apm &gt; (select an app) &gt; Settings &gt; Application &gt; Server-side <em>agent</em> <em>configuration</em>. OR <em>Go</em> to rpm.newrelic.com&#x2F;apm. Next, from the index of applications, select the app&#x27;s gear icon"
      },
      "id": "6043c83b64441fc5d6378ed1"
    }
  ],
  "/docs/agents/go-agent/configuration/go-agent-logging": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.75656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>Go</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "You can edit <em>configuration</em> settings for the <em>Go</em> <em>agent</em> to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "No data appears (Go)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Troubleshooting"
      ],
      "external_id": "b4dd532f3fede91074170485ace90ac9e400bc84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/troubleshooting/no-data-appears-go/",
      "published_at": "2021-05-05T07:18:22Z",
      "updated_at": "2021-03-11T07:58:23Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You installed the New Relic Go agent for your Golang app. After you generated some traffic and waited a few minutes, your app is still not reporting data in New Relic. Solution After sending a request to your web application, data should appear in the APM UI within two to three minutes. If you still do not see any data on your app's Summary page, try these troubleshooting tips: Verify your app's name and license key in your Go agent configuration's newrelic.Config struct. Use New Relic Diagnostics to try to automatically identify the issue. Make sure you instrumented your app's transactions with newrelic.WrapHandleFunc or Application.StartTransaction and Transaction.End. Restart your web server. Use the Go Logger interface to generate Debug level logs, and check those logs for errors. If necessary, upgrade to the latest New Relic Go agent release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.27325,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Go</em>)",
        "sections": "No data appears (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". If you still do not see any data on your app&#x27;s Summary page, try these troubleshooting tips: Verify your app&#x27;s name and license key in your <em>Go</em> <em>agent</em> <em>configuration</em>&#x27;s newrelic.Config struct. Use New Relic Diagnostics to try to automatically identify the issue. Make sure you instrumented your app"
      },
      "id": "6043b93c28ccbc5c8d2c6082"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "Tip",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-05-05T06:35:22Z",
      "updated_at": "2021-05-05T06:35:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all New Relic APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration Tip Owner, Admins, or Add-on Managers The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. Set the Server-side configuration enabled toggle to On. Select Save server-side configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings Tip Owner, Admins, or Add-on Managers If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to rpm.newrelic.com/apm > (select an app) > Settings > Application > Server-side agent configuration. OR Go to rpm.newrelic.com/apm. Next, from the index of applications, select the app's gear icon, then select View settings > Server-side agent configuration. View or change the available configuration settings for your agent. If you make changes, select Save server-side configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.90915,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " <em>configuration</em>. To enable server-side <em>configuration</em> settings for apps that use other New Relic <em>agents</em>: <em>Go</em> to rpm.newrelic.com&#x2F;apm &gt; (select an app) &gt; Settings &gt; Application &gt; Server-side <em>agent</em> <em>configuration</em>. OR <em>Go</em> to rpm.newrelic.com&#x2F;apm. Next, from the index of applications, select the app&#x27;s gear icon"
      },
      "id": "6043c83b64441fc5d6378ed1"
    }
  ],
  "/docs/agents/go-agent/features/add-browser-monitoring-your-go-apps": [
    {
      "sections": [
        "Go runtime page: Troubleshoot performance problems",
        "View and filter Go runtime data",
        "Go runtime charts"
      ],
      "title": "Go runtime page: Troubleshoot performance problems",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "de13cce9b7e936dd86b266c3bae1b031a2343aa2",
      "image": "https://docs.newrelic.com/static/1eae071363cd2ce3e57467c3d1cce83f/c1b63/go-runtime.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems/",
      "published_at": "2021-05-05T07:16:57Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM user interface provides a variety of data about your app, including special features for the Go agent for APM. In addition, the Go runtime page provides important runtime data useful for troubleshooting performance issues. View and filter Go runtime data To view the Go runtime page, go to one.newrelic.com > APM > (select an app) > Go runtime. Go runtime charts This table describes the Go runtime page chart data. Chart name Description Goroutines A count of the average number of goroutines running during a given time slice. GC pause time Milliseconds spent in stop-the-world garbage collection. GC pause frequency Calls per minute of stop-the-world garbage collection. GC pauses The percentage of wall-clock time spent in stop-the-world garbage collection. CPU utilization CPU utilization as a percentage of available CPU. Memory Average memory used, in mebibytes, during a given time slice.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.549644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "sections": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The APM user interface provides a variety of data about your app, including special <em>features</em> for the <em>Go</em> <em>agent</em> for APM. In addition, the <em>Go</em> runtime page provides important runtime data useful for troubleshooting performance issues. View and filter <em>Go</em> runtime data To view the <em>Go</em> runtime page, <em>go</em>"
      },
      "id": "603ecf06e7b9d25d8a2a07c9"
    },
    {
      "sections": [
        "Cross application tracing with Go",
        "Important",
        "Enable cross application tracing with Go",
        "Transaction and HTTP request guidelines with Go",
        "Creating transactions via http.ServeMux",
        "Creating web transactions manually",
        "Making HTTP requests",
        "Get distributed tracing"
      ],
      "title": "Cross application tracing with Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "885068746a6a990125013d98baa308c795b42ea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/cross-application-tracing-go/",
      "published_at": "2021-05-05T07:20:15Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Go agent supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems. Enable cross application tracing with Go You can enable or disable cross application tracing in the Go agent by using the CrossApplicationTracer.Enabled configuration flag. Transaction and HTTP request guidelines with Go Even with cross application tracing enabled, you'll need to make sure your application follows a few simple conventions when responding to HTTP(s) requests, making its own HTTP(s) requests, or creating its own transactions. Creating transactions via http.ServeMux If you're using Go's http.ServeMux and want CAT support, you'll need to use the agent's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct CAT headers. Your code should look similar to the following: http.HandleFunc(\"/users\", usersHandler) http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy You can read more about these wrappers in Instrument Go transactions. Creating web transactions manually When creating your own transactions with app.StartTransaction, ensure that you also call Transaction.SetWebRequest and Transaction.SetWebResponse. For example, a transaction started with the following code will have CAT enabled: txn := app.StartTransaction(\"transactionName\") // req is a *http.Request, this marks the transaction as a web transaction txn.SetWebRequestHTTP(req) // writer is a http.ResponseWriter, use the returned writer in place of the original writer = txn.SetWebResponse(writer) writer.WriteHeader(500) defer txn.End() Copy However, a transaction started without the calls to Transaction.SetWebRequest and Transaction.SetWebResponse will not have CAT enabled: // Cross application tracing not enabled txn := app.StartTransaction(\"transactionName\") defer txn.End() Copy Additionally, if you're setting HTTP response codes, use the Go agent's txn.WriteHeader method rather than the standard library's http.ResponseWriter.WriteHeader method. // old code // writer.WriteHeader(http.StatusInternalServerError) // replace with this txn := app.StartTransaction(\"transactionName\") txn.SetWebRequest(req) writer = txn.SetWebResponse(writer) writer.WriteHeader(http.StatusInternalServerError) Copy Making HTTP requests In order to have your outbound HTTP(s) requests eligible for CAT, you'll need to create an external segment. The easiest way to create an external segment for your outbound HTTP(s) request is to use the newrelic.NewRoundTripper method. For example, this code will make a request to http://api.example.com/ that includes the outgoing CAT headers. func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) req, _ := http.NewRequest(\"GET\", \"http://api.example.com/\", nil) req = newrelic.RequestWithTransactionContext(req, txn) return client.Do(req) } Copy If you have a more complex request that uses the Go standard library's http.Request, you'll need to use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for CAT. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy While it's also possible to create an ExternalSegment via a struct literal, this segment will not be eligible for CAT. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.ExternalSegment. func noGoodForCat(txn *newrelic.Transaction, url string) (*http.Response, error) { // CAT headers not inserted defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Get distributed tracing New Relic also offers distributed tracing. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.549644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cross application tracing with <em>Go</em>",
        "sections": "Cross application tracing with <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The <em>Go</em> <em>agent</em> supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing"
      },
      "id": "603e78cf196a6782eba83dcb"
    },
    {
      "sections": [
        "Trace asynchronous applications",
        "NewGoroutine"
      ],
      "title": "Trace asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "701611967ffe7f1b60de940aeac6d9b8dafbe8fa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/trace-asynchronous-applications/",
      "published_at": "2021-05-05T07:18:22Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of Go agent version 2.6.0. If you do not have version 2.6.0 or higher, update your Go agent to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create segments in multiple goroutines. NewGoroutine returns a new reference to the Transaction. This must be called any time you are passing the Transaction to another goroutine which makes segments. Each segment-creating goroutine must have its own Transaction reference. It does not matter if you call this before or after the other goroutine has started. All Transaction methods can be used in any Transaction reference. The Transaction will end when End() is called in any goroutine. Example passing a new Transaction reference directly to another goroutine: go func(txn *newrelic.Transaction) { defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }(txn.NewGoroutine()) Copy Example passing a new Transaction reference on a channel to another goroutine: ch := make(chan *newrelic.Transaction) go func() { txn := <-ch defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }() ch <- txn.NewGoroutine() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of <em>Go</em> <em>agent</em> version 2.6.0. If you do not have version 2.6.0 or higher, update your <em>Go</em> <em>agent</em> to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create"
      },
      "id": "603ebd82e7b9d27af12a07dd"
    }
  ],
  "/docs/agents/go-agent/features/create-custom-events-go": [
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-05-04T17:02:46Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.99206,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Create custom metrics in Go",
        "Create a custom metric",
        "Name a custom metric",
        "For more help"
      ],
      "title": "Create custom metrics in Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "9336bef71f0cac25636bfe0b4392864f3605c6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/create-custom-metrics-go/",
      "published_at": "2021-05-05T07:09:57Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to report any metric that passes through your code. For example, with New Relic's Go monitoring, you can create custom metrics to time a component of your app that may not captured by default. Once you capture a custom metric, you can: Unify your monitoring inside New Relic through the data explorer. Use our REST API to programmatically retrieve and use custom metric data outside of the UI. Create custom metric alert conditions to notify you or your team when your custom metric exceeds specific values. Create a custom metric Instantiate your application by running the following: cfg := newrelic.NewConfig(\"Your App Name\", mustGetEnv(\"NEW_RELIC_LICENSE_KEY\")) cfg.Logger = newrelic.NewDebugLogger(os.Stdout) var err error app, err = newrelic.NewApplication(cfg) Copy After instantiating your app, create a custom metric with the following code: app.RecordCustomMetric( \"CustomMetricName\", //name of your metric 132, //time in ms ); Copy RecordCustomMetric's first parameter is a string that names your custom metric. The RecordCustomMetric method will automatically prepend the string Custom/ to your metric name. This means the above code will generate a metric named Custom/CustomMetricName. RecordCustomMetric's second parameter is the time, in milliseconds, that you want to record for your custom transaction. This means the above code will produce a metric of .132 seconds in New Relic's systems. To use a custom metric as a counter, it can be incremented by making the call as described above, and the count value for that metric will be incremented by 1. The value you use for the second parameter (time in ms) is irrelevant if you are only using the metric as a counter, and thus you can use a static number, such as 0 or 1. To increment a counter by a number greater than 1, call app.RecordCustomMetric multiple times - each call will only increment the metric by 1 no matter what the value of the second parameter is. Name a custom metric Carefully consider how you name your custom metrics. If your program creates too many uniquely-named metrics, you may end up with a metric grouping issue (MGI). MGIs occur when the granularity of metric names is too fine, resulting in hundreds or thousands of different metric names. One common cause of MGIs is relying on the full URL name for metric naming in web transactions. A few major code paths may generate many different full URL paths to unique documents, articles, page, etc. If the unique element of the URL path is included in the metric name, each of these common paths will have its own unique metric name. If metric grouping issues occur, follow the troubleshooting procedures. For more help Additional documentation resources include: New Relic for Go segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) Instrument Go transactions (how to create New Relic transactions in your Go app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.527435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom metrics in <em>Go</em>",
        "sections": "Create custom metrics in <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " Additional documentation resources include: New Relic for <em>Go</em> segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) <em>Instrument</em> <em>Go</em> transactions (how to create New Relic transactions in your <em>Go</em> app)"
      },
      "id": "6043b8f628ccbc48692c609c"
    },
    {
      "sections": [
        "Instrument Go segments",
        "Measure time for functions and code blocks",
        "Block-of-code segments",
        "Function segments",
        "Nest segments",
        "Datastore segments",
        "Use instrumentation package",
        "Important",
        "Use DatastoreSegment",
        "External segments",
        "Use StartExternalSegment()",
        "Use NewRoundTripper()",
        "Message producer segments",
        "Use MessageProducerSegment"
      ],
      "title": "Instrument Go segments",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "4ca52352a98087598f1a5ace76a9d80bf8d20cf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/instrument-go-segments/",
      "published_at": "2021-05-05T07:11:52Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic for Go, you can monitor the specific segments of a transaction in a Go application to get more detail about specific functions or code blocks. Measure time for functions and code blocks Segments are the specific parts of a transaction in an application. By instrumenting segments, you can measure the time taken by functions and code blocks, such as external calls, datastore calls, adding messages to queues, and background tasks. Example: You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You could instrument your application to break that transaction up into two pieces: one segment for shipping and one segment for payment. Block-of-code segments Once you instrument a transaction, you are ready to instrument one or more segments in that transaction. To instrument an arbitrary block of code as a segment, use the following pattern, and include txn as the variable name set for the transaction: segment := newrelic.Segment{} segment.Name = \"mySegmentName\" segment.StartTime = txn.StartSegmentNow() // ... code you want to time here ... segment.End() Copy StartSegment is a convenient helper. It creates a segment and starts it: segment := txn.StartSegment(\"mySegmentName\") // ... code you want to time here ... segment.End() Copy Function segments Instrumenting a function as a segment is essentially the same as instrumenting an arbitrary block of code as a segment. The main difference is that, because a function has a discrete ending, you can use Go's defer statement. To instrument a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(\"mySegmentName\").End() Copy Nest segments Segments can be nested. The segment being ended must be the most recently started segment. Here's an example of a segment starting and ending inside another segment: s1 := txn.StartSegment(\"outerSegment\") s2 := txn.StartSegment(\"innerSegment\") // s2 must end before s1 s2.End() s1.End() Copy A zero value segment may safely be ended. Therefore, the following code is safe even if the conditional fails: var s newrelic.Segment if recordSegment { s.StartTime = txn.StartSegmentNow(), } // ... code you wish to time here ... s.End() Copy Datastore segments You can instrument Go application datastore calls. Datastore segments appear in the APM Transactions breakdown table and Databases tab of the Transactions page in New Relic. If you are using a MySQL, PostgreSQL, or SQLite database driver, the easiest way to add Datastore segments is to use our pre-built integration packages. Otherwise, you can manually create Datastore segments for each database call. Use instrumentation package There is an integration package for each database driver that we support: Database library supported Integration package go-sql-driver/mysql v3/integrations/nrmysql lib/pq v3/integrations/nrpq mattn/go-sqlite3 v3/integrations/nrsqlite3 To use one of these integrations, first replace the driver with our integration version: import ( // import our integration package in place of \"github.com/go-sql-driver/mysql\" _ \"github.com/newrelic/go-agent/v3/integrations/nrmysql\" ) func main() { // open \"nrmysql\" in place of \"mysql\" db, err := sql.Open(\"nrmysql\", \"user@unix(/path/to/socket)/dbname\") } Copy Second, use the ExecContext, QueryContext, and QueryRowContext methods of sql.DB, sql.Conn, sql.Tx, and sql.Stmt and provide a transaction-containing context. Calls to Exec, Query, and QueryRow do not get instrumented. ctx := newrelic.NewContext(context.Background(), txn) row := db.QueryRowContext(ctx, \"SELECT count(*) from tables\") Copy If you are using a database/sql database not listed above, you can write your own instrumentation for it using InstrumentConnector, InstrumentDriver, and DriverSegmentBuilder. The integration packages act as examples of how to do this. Important Datastore integration packages for MySQL, PostgreSQL, and SQLite were added in Go Agent v2.8.0 and require Go v1.10 or above. Use DatastoreSegment Just like basic segments, datastore segments begin when the StartTime field is populated and finish when the End method is called. To instrument a datastore segment, place the following at the beginning of the function you want to monitor: s := newrelic.DatastoreSegment{ Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } s.StartTime = txn.StartSegmentNow() // ... make the datastore call s.End() Copy For more information about: Assigning the Collection, Operation, DatabaseName, and other parameter values: See the New Relic datastore segment documentation on GoDoc. Available values for Product: See the New Relic documentation on GitHub. When instrumenting a datastore call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.DatastoreSegment{ StartTime: txn.StartSegmentNow(), Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } defer s.End() Copy External segments You can instrument Go application calls to external services, such as web services, resources in the cloud, and any other network calls. External segments appear in the APM Transactions breakdown table and the External services page in New Relic. There are two ways to instrument external segments: Use StartExternalSegment() Recommendation: Use the StartExternalSegment helper, since New Relic uses it to trace activity between your applications using cross application tracing. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy Use NewRoundTripper() NewRoundTripper returns an http.RoundTripper, which allows you to instrument external calls without calling StartExternalSegment by modifying your http.Client's Transport field. The RoundTripper returned will look for a Transaction in the request's context using FromContext. Here is an example of NewRoundTripper instrumentation: client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) response, err := client.Do(request) Copy Message producer segments You can instrument Go application calls that add messages to queuing systems like RabbitMQ and Kafka. Message producer segments appear in the APM Transactions breakdown in New Relic. There is only one way to instrument message producer segments: Use MessageProducerSegment Just like basic segments, message producer segments begin when the StartTime field is populated, and finish when the End method is called. To instrument a message producer segment, place the following at the beginning of the function you want to monitor: s := newrelic.MessageProducerSegment{ Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } s.StartTime = txn.StartSegmentNow() // ... add message to queue s.End() Copy For more information about assigning the Library, DestinationType, DestinationName, or DestinationTemporary fields, see the New Relic message producer segment documentation on GoDoc. When instrumenting a message producer call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.MessageProducerSegment{ StartTime: txn.StartSegmentNow(), Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } defer s.End() // ... add message to queue Copy Important Message producer segments were added in Go Agent version 2.14.0.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.527435,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> <em>Go</em> segments",
        "sections": "<em>Instrument</em> <em>Go</em> segments",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " is that, because a function has a discrete ending, you can use <em>Go</em>&#x27;s defer statement. To <em>instrument</em> a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(&quot;mySegmentName&quot;).End() Copy Nest segments"
      },
      "id": "6043b78d64441f2285378f25"
    }
  ],
  "/docs/agents/go-agent/features/cross-application-tracing-go": [
    {
      "sections": [
        "Go runtime page: Troubleshoot performance problems",
        "View and filter Go runtime data",
        "Go runtime charts"
      ],
      "title": "Go runtime page: Troubleshoot performance problems",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "de13cce9b7e936dd86b266c3bae1b031a2343aa2",
      "image": "https://docs.newrelic.com/static/1eae071363cd2ce3e57467c3d1cce83f/c1b63/go-runtime.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems/",
      "published_at": "2021-05-05T07:16:57Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM user interface provides a variety of data about your app, including special features for the Go agent for APM. In addition, the Go runtime page provides important runtime data useful for troubleshooting performance issues. View and filter Go runtime data To view the Go runtime page, go to one.newrelic.com > APM > (select an app) > Go runtime. Go runtime charts This table describes the Go runtime page chart data. Chart name Description Goroutines A count of the average number of goroutines running during a given time slice. GC pause time Milliseconds spent in stop-the-world garbage collection. GC pause frequency Calls per minute of stop-the-world garbage collection. GC pauses The percentage of wall-clock time spent in stop-the-world garbage collection. CPU utilization CPU utilization as a percentage of available CPU. Memory Average memory used, in mebibytes, during a given time slice.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.549644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "sections": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The APM user interface provides a variety of data about your app, including special <em>features</em> for the <em>Go</em> <em>agent</em> for APM. In addition, the <em>Go</em> runtime page provides important runtime data useful for troubleshooting performance issues. View and filter <em>Go</em> runtime data To view the <em>Go</em> runtime page, <em>go</em>"
      },
      "id": "603ecf06e7b9d25d8a2a07c9"
    },
    {
      "sections": [
        "Trace asynchronous applications",
        "NewGoroutine"
      ],
      "title": "Trace asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "701611967ffe7f1b60de940aeac6d9b8dafbe8fa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/trace-asynchronous-applications/",
      "published_at": "2021-05-05T07:18:22Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of Go agent version 2.6.0. If you do not have version 2.6.0 or higher, update your Go agent to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create segments in multiple goroutines. NewGoroutine returns a new reference to the Transaction. This must be called any time you are passing the Transaction to another goroutine which makes segments. Each segment-creating goroutine must have its own Transaction reference. It does not matter if you call this before or after the other goroutine has started. All Transaction methods can be used in any Transaction reference. The Transaction will end when End() is called in any goroutine. Example passing a new Transaction reference directly to another goroutine: go func(txn *newrelic.Transaction) { defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }(txn.NewGoroutine()) Copy Example passing a new Transaction reference on a channel to another goroutine: ch := make(chan *newrelic.Transaction) go func() { txn := <-ch defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }() ch <- txn.NewGoroutine() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of <em>Go</em> <em>agent</em> version 2.6.0. If you do not have version 2.6.0 or higher, update your <em>Go</em> <em>agent</em> to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create"
      },
      "id": "603ebd82e7b9d27af12a07dd"
    },
    {
      "sections": [
        "Enable distributed tracing for your Go applications",
        "Enable distributed tracing",
        "Tip",
        "Instrument transactions and HTTP requests",
        "Instrument transactions (if using ServeMux)",
        "Before and after example",
        "Instrument outbound HTTP requests as external segments",
        "Manually create and accept distributed trace payload"
      ],
      "title": "Enable distributed tracing for your Go applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "8aba419af83bc8bd674bb5d7c18c0b6592bdf1b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/enable-distributed-tracing-your-go-applications/",
      "published_at": "2021-05-05T07:18:24Z",
      "updated_at": "2021-03-11T10:09:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and set up distributed tracing for the New Relic's Go agent. Enable distributed tracing To enable distributed tracing for a Go application: Use Go agent configuration settings for the type of distributed tracing you want: Standard distributed tracing Infinite Tracing Continue reading the transaction and request instrumentation guidelines below. Tip For help understanding the different types of agent distributed tracing, see How distributed tracing works. Instrument transactions and HTTP requests In order for distributed tracing to work optimally, your Go application must adhere to guidelines for the following scenarios: Instrument transactions (if using ServeMux) If you are using Go's http.ServeMux and want to enable New Relic's distributed tracing, your Go application must be instrumented with New Relic's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct distributed tracing headers. For more on how header propagation works, see How distributed tracing works. Before and after example Here is an example of code before instrumentation: http.HandleFunc(\"/users\", usersHandler) Copy And here is an example of that same code after instrumentation: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Read more about using these wrappers in Instrument Go transactions. Instrument outbound HTTP requests as external segments In order to have your outbound HTTP requests eligible for distributed tracing, create an external segment. The easiest way to create an external segment for your outbound HTTP request is to use the newrelic.NewRoundTripper method. Here is an example of making a request to http://api.example.com that includes the outgoing distributed tracing headers: func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) return client.Do(request) } Copy If you have a more complex request that uses the Go standard library's http.Request, use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for distributed tracing: func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy An ExternalSegment created with a struct literal cannot be used for distributed tracing. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.StartExternalSegment. func noGoodForDt(txn *newrelic.Transaction, url string) (*http.Response, error) { // Distributed tracing headers are not added to the outgoing request. // Use newrelic.NewRoundTripper or newrelicc.StartExternalSegment instead. defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Manually create and accept distributed trace payload The distributed trace payload contains information that allows New Relic to stitch together transactions occurring in multiple services into a complete transaction trace. If New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For general instructions on how to use the API calls below to implement distributed tracing, first see Use distributed tracing APIs. If you want to... Use this Create a payload to be sent to the called service. InsertDistributedTraceHeaders(h http.Header) Copy Accept a payload sent from the first service; this will link these services together in a trace. AcceptDistributedTraceHeaders(h http.Header) Copy For more details on using these, see the Go agent GitHub repo.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.160645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>Go</em> applications ",
        "sections": "Enable distributed tracing for your <em>Go</em> applications",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Read on to learn how to enable and set up distributed tracing for the New Relic&#x27;s <em>Go</em> <em>agent</em>. Enable distributed tracing To enable distributed tracing for a <em>Go</em> application: Use <em>Go</em> <em>agent</em> configuration settings for the type of distributed tracing you want: Standard distributed tracing Infinite Tracing"
      },
      "id": "6043d12a64441f58bc378ed5"
    }
  ],
  "/docs/agents/go-agent/features/enable-distributed-tracing-your-go-applications": [
    {
      "sections": [
        "Go runtime page: Troubleshoot performance problems",
        "View and filter Go runtime data",
        "Go runtime charts"
      ],
      "title": "Go runtime page: Troubleshoot performance problems",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "de13cce9b7e936dd86b266c3bae1b031a2343aa2",
      "image": "https://docs.newrelic.com/static/1eae071363cd2ce3e57467c3d1cce83f/c1b63/go-runtime.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems/",
      "published_at": "2021-05-05T07:16:57Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM user interface provides a variety of data about your app, including special features for the Go agent for APM. In addition, the Go runtime page provides important runtime data useful for troubleshooting performance issues. View and filter Go runtime data To view the Go runtime page, go to one.newrelic.com > APM > (select an app) > Go runtime. Go runtime charts This table describes the Go runtime page chart data. Chart name Description Goroutines A count of the average number of goroutines running during a given time slice. GC pause time Milliseconds spent in stop-the-world garbage collection. GC pause frequency Calls per minute of stop-the-world garbage collection. GC pauses The percentage of wall-clock time spent in stop-the-world garbage collection. CPU utilization CPU utilization as a percentage of available CPU. Memory Average memory used, in mebibytes, during a given time slice.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.549644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "sections": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The APM user interface provides a variety of data about your app, including special <em>features</em> for the <em>Go</em> <em>agent</em> for APM. In addition, the <em>Go</em> runtime page provides important runtime data useful for troubleshooting performance issues. View and filter <em>Go</em> runtime data To view the <em>Go</em> runtime page, <em>go</em>"
      },
      "id": "603ecf06e7b9d25d8a2a07c9"
    },
    {
      "sections": [
        "Cross application tracing with Go",
        "Important",
        "Enable cross application tracing with Go",
        "Transaction and HTTP request guidelines with Go",
        "Creating transactions via http.ServeMux",
        "Creating web transactions manually",
        "Making HTTP requests",
        "Get distributed tracing"
      ],
      "title": "Cross application tracing with Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "885068746a6a990125013d98baa308c795b42ea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/cross-application-tracing-go/",
      "published_at": "2021-05-05T07:20:15Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Go agent supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems. Enable cross application tracing with Go You can enable or disable cross application tracing in the Go agent by using the CrossApplicationTracer.Enabled configuration flag. Transaction and HTTP request guidelines with Go Even with cross application tracing enabled, you'll need to make sure your application follows a few simple conventions when responding to HTTP(s) requests, making its own HTTP(s) requests, or creating its own transactions. Creating transactions via http.ServeMux If you're using Go's http.ServeMux and want CAT support, you'll need to use the agent's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct CAT headers. Your code should look similar to the following: http.HandleFunc(\"/users\", usersHandler) http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy You can read more about these wrappers in Instrument Go transactions. Creating web transactions manually When creating your own transactions with app.StartTransaction, ensure that you also call Transaction.SetWebRequest and Transaction.SetWebResponse. For example, a transaction started with the following code will have CAT enabled: txn := app.StartTransaction(\"transactionName\") // req is a *http.Request, this marks the transaction as a web transaction txn.SetWebRequestHTTP(req) // writer is a http.ResponseWriter, use the returned writer in place of the original writer = txn.SetWebResponse(writer) writer.WriteHeader(500) defer txn.End() Copy However, a transaction started without the calls to Transaction.SetWebRequest and Transaction.SetWebResponse will not have CAT enabled: // Cross application tracing not enabled txn := app.StartTransaction(\"transactionName\") defer txn.End() Copy Additionally, if you're setting HTTP response codes, use the Go agent's txn.WriteHeader method rather than the standard library's http.ResponseWriter.WriteHeader method. // old code // writer.WriteHeader(http.StatusInternalServerError) // replace with this txn := app.StartTransaction(\"transactionName\") txn.SetWebRequest(req) writer = txn.SetWebResponse(writer) writer.WriteHeader(http.StatusInternalServerError) Copy Making HTTP requests In order to have your outbound HTTP(s) requests eligible for CAT, you'll need to create an external segment. The easiest way to create an external segment for your outbound HTTP(s) request is to use the newrelic.NewRoundTripper method. For example, this code will make a request to http://api.example.com/ that includes the outgoing CAT headers. func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) req, _ := http.NewRequest(\"GET\", \"http://api.example.com/\", nil) req = newrelic.RequestWithTransactionContext(req, txn) return client.Do(req) } Copy If you have a more complex request that uses the Go standard library's http.Request, you'll need to use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for CAT. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy While it's also possible to create an ExternalSegment via a struct literal, this segment will not be eligible for CAT. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.ExternalSegment. func noGoodForCat(txn *newrelic.Transaction, url string) (*http.Response, error) { // CAT headers not inserted defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Get distributed tracing New Relic also offers distributed tracing. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.549644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cross application tracing with <em>Go</em>",
        "sections": "Cross application tracing with <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The <em>Go</em> <em>agent</em> supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing"
      },
      "id": "603e78cf196a6782eba83dcb"
    },
    {
      "sections": [
        "Trace asynchronous applications",
        "NewGoroutine"
      ],
      "title": "Trace asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "701611967ffe7f1b60de940aeac6d9b8dafbe8fa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/trace-asynchronous-applications/",
      "published_at": "2021-05-05T07:18:22Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of Go agent version 2.6.0. If you do not have version 2.6.0 or higher, update your Go agent to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create segments in multiple goroutines. NewGoroutine returns a new reference to the Transaction. This must be called any time you are passing the Transaction to another goroutine which makes segments. Each segment-creating goroutine must have its own Transaction reference. It does not matter if you call this before or after the other goroutine has started. All Transaction methods can be used in any Transaction reference. The Transaction will end when End() is called in any goroutine. Example passing a new Transaction reference directly to another goroutine: go func(txn *newrelic.Transaction) { defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }(txn.NewGoroutine()) Copy Example passing a new Transaction reference on a channel to another goroutine: ch := make(chan *newrelic.Transaction) go func() { txn := <-ch defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }() ch <- txn.NewGoroutine() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54306,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of <em>Go</em> <em>agent</em> version 2.6.0. If you do not have version 2.6.0 or higher, update your <em>Go</em> <em>agent</em> to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create"
      },
      "id": "603ebd82e7b9d27af12a07dd"
    }
  ],
  "/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems": [
    {
      "sections": [
        "Cross application tracing with Go",
        "Important",
        "Enable cross application tracing with Go",
        "Transaction and HTTP request guidelines with Go",
        "Creating transactions via http.ServeMux",
        "Creating web transactions manually",
        "Making HTTP requests",
        "Get distributed tracing"
      ],
      "title": "Cross application tracing with Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "885068746a6a990125013d98baa308c795b42ea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/cross-application-tracing-go/",
      "published_at": "2021-05-05T07:20:15Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Go agent supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems. Enable cross application tracing with Go You can enable or disable cross application tracing in the Go agent by using the CrossApplicationTracer.Enabled configuration flag. Transaction and HTTP request guidelines with Go Even with cross application tracing enabled, you'll need to make sure your application follows a few simple conventions when responding to HTTP(s) requests, making its own HTTP(s) requests, or creating its own transactions. Creating transactions via http.ServeMux If you're using Go's http.ServeMux and want CAT support, you'll need to use the agent's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct CAT headers. Your code should look similar to the following: http.HandleFunc(\"/users\", usersHandler) http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy You can read more about these wrappers in Instrument Go transactions. Creating web transactions manually When creating your own transactions with app.StartTransaction, ensure that you also call Transaction.SetWebRequest and Transaction.SetWebResponse. For example, a transaction started with the following code will have CAT enabled: txn := app.StartTransaction(\"transactionName\") // req is a *http.Request, this marks the transaction as a web transaction txn.SetWebRequestHTTP(req) // writer is a http.ResponseWriter, use the returned writer in place of the original writer = txn.SetWebResponse(writer) writer.WriteHeader(500) defer txn.End() Copy However, a transaction started without the calls to Transaction.SetWebRequest and Transaction.SetWebResponse will not have CAT enabled: // Cross application tracing not enabled txn := app.StartTransaction(\"transactionName\") defer txn.End() Copy Additionally, if you're setting HTTP response codes, use the Go agent's txn.WriteHeader method rather than the standard library's http.ResponseWriter.WriteHeader method. // old code // writer.WriteHeader(http.StatusInternalServerError) // replace with this txn := app.StartTransaction(\"transactionName\") txn.SetWebRequest(req) writer = txn.SetWebResponse(writer) writer.WriteHeader(http.StatusInternalServerError) Copy Making HTTP requests In order to have your outbound HTTP(s) requests eligible for CAT, you'll need to create an external segment. The easiest way to create an external segment for your outbound HTTP(s) request is to use the newrelic.NewRoundTripper method. For example, this code will make a request to http://api.example.com/ that includes the outgoing CAT headers. func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) req, _ := http.NewRequest(\"GET\", \"http://api.example.com/\", nil) req = newrelic.RequestWithTransactionContext(req, txn) return client.Do(req) } Copy If you have a more complex request that uses the Go standard library's http.Request, you'll need to use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for CAT. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy While it's also possible to create an ExternalSegment via a struct literal, this segment will not be eligible for CAT. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.ExternalSegment. func noGoodForCat(txn *newrelic.Transaction, url string) (*http.Response, error) { // CAT headers not inserted defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Get distributed tracing New Relic also offers distributed tracing. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cross application tracing with <em>Go</em>",
        "sections": "Cross application tracing with <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The <em>Go</em> <em>agent</em> supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing"
      },
      "id": "603e78cf196a6782eba83dcb"
    },
    {
      "sections": [
        "Trace asynchronous applications",
        "NewGoroutine"
      ],
      "title": "Trace asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "701611967ffe7f1b60de940aeac6d9b8dafbe8fa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/trace-asynchronous-applications/",
      "published_at": "2021-05-05T07:18:22Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of Go agent version 2.6.0. If you do not have version 2.6.0 or higher, update your Go agent to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create segments in multiple goroutines. NewGoroutine returns a new reference to the Transaction. This must be called any time you are passing the Transaction to another goroutine which makes segments. Each segment-creating goroutine must have its own Transaction reference. It does not matter if you call this before or after the other goroutine has started. All Transaction methods can be used in any Transaction reference. The Transaction will end when End() is called in any goroutine. Example passing a new Transaction reference directly to another goroutine: go func(txn *newrelic.Transaction) { defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }(txn.NewGoroutine()) Copy Example passing a new Transaction reference on a channel to another goroutine: ch := make(chan *newrelic.Transaction) go func() { txn := <-ch defer txn.StartSegment(\"async\").End() time.Sleep(100 * time.Millisecond) }() ch <- txn.NewGoroutine() Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54305,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The ability to trace asynchronous segments with the NewGoroutine API is available as of <em>Go</em> <em>agent</em> version 2.6.0. If you do not have version 2.6.0 or higher, update your <em>Go</em> <em>agent</em> to the latest version. NewGoroutine The Transaction.NewGoroutine() Transaction method allows transactions to create"
      },
      "id": "603ebd82e7b9d27af12a07dd"
    },
    {
      "sections": [
        "Enable distributed tracing for your Go applications",
        "Enable distributed tracing",
        "Tip",
        "Instrument transactions and HTTP requests",
        "Instrument transactions (if using ServeMux)",
        "Before and after example",
        "Instrument outbound HTTP requests as external segments",
        "Manually create and accept distributed trace payload"
      ],
      "title": "Enable distributed tracing for your Go applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "8aba419af83bc8bd674bb5d7c18c0b6592bdf1b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/enable-distributed-tracing-your-go-applications/",
      "published_at": "2021-05-05T07:18:24Z",
      "updated_at": "2021-03-11T10:09:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and set up distributed tracing for the New Relic's Go agent. Enable distributed tracing To enable distributed tracing for a Go application: Use Go agent configuration settings for the type of distributed tracing you want: Standard distributed tracing Infinite Tracing Continue reading the transaction and request instrumentation guidelines below. Tip For help understanding the different types of agent distributed tracing, see How distributed tracing works. Instrument transactions and HTTP requests In order for distributed tracing to work optimally, your Go application must adhere to guidelines for the following scenarios: Instrument transactions (if using ServeMux) If you are using Go's http.ServeMux and want to enable New Relic's distributed tracing, your Go application must be instrumented with New Relic's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct distributed tracing headers. For more on how header propagation works, see How distributed tracing works. Before and after example Here is an example of code before instrumentation: http.HandleFunc(\"/users\", usersHandler) Copy And here is an example of that same code after instrumentation: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Read more about using these wrappers in Instrument Go transactions. Instrument outbound HTTP requests as external segments In order to have your outbound HTTP requests eligible for distributed tracing, create an external segment. The easiest way to create an external segment for your outbound HTTP request is to use the newrelic.NewRoundTripper method. Here is an example of making a request to http://api.example.com that includes the outgoing distributed tracing headers: func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) return client.Do(request) } Copy If you have a more complex request that uses the Go standard library's http.Request, use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for distributed tracing: func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy An ExternalSegment created with a struct literal cannot be used for distributed tracing. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.StartExternalSegment. func noGoodForDt(txn *newrelic.Transaction, url string) (*http.Response, error) { // Distributed tracing headers are not added to the outgoing request. // Use newrelic.NewRoundTripper or newrelicc.StartExternalSegment instead. defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Manually create and accept distributed trace payload The distributed trace payload contains information that allows New Relic to stitch together transactions occurring in multiple services into a complete transaction trace. If New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For general instructions on how to use the API calls below to implement distributed tracing, first see Use distributed tracing APIs. If you want to... Use this Create a payload to be sent to the called service. InsertDistributedTraceHeaders(h http.Header) Copy Accept a payload sent from the first service; this will link these services together in a trace. AcceptDistributedTraceHeaders(h http.Header) Copy For more details on using these, see the Go agent GitHub repo.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.160645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>Go</em> applications ",
        "sections": "Enable distributed tracing for your <em>Go</em> applications",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Read on to learn how to enable and set up distributed tracing for the New Relic&#x27;s <em>Go</em> <em>agent</em>. Enable distributed tracing To enable distributed tracing for a <em>Go</em> application: Use <em>Go</em> <em>agent</em> configuration settings for the type of distributed tracing you want: Standard distributed tracing Infinite Tracing"
      },
      "id": "6043d12a64441f58bc378ed5"
    }
  ],
  "/docs/agents/go-agent/features/trace-asynchronous-applications": [
    {
      "sections": [
        "Go runtime page: Troubleshoot performance problems",
        "View and filter Go runtime data",
        "Go runtime charts"
      ],
      "title": "Go runtime page: Troubleshoot performance problems",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "de13cce9b7e936dd86b266c3bae1b031a2343aa2",
      "image": "https://docs.newrelic.com/static/1eae071363cd2ce3e57467c3d1cce83f/c1b63/go-runtime.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems/",
      "published_at": "2021-05-05T07:16:57Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM user interface provides a variety of data about your app, including special features for the Go agent for APM. In addition, the Go runtime page provides important runtime data useful for troubleshooting performance issues. View and filter Go runtime data To view the Go runtime page, go to one.newrelic.com > APM > (select an app) > Go runtime. Go runtime charts This table describes the Go runtime page chart data. Chart name Description Goroutines A count of the average number of goroutines running during a given time slice. GC pause time Milliseconds spent in stop-the-world garbage collection. GC pause frequency Calls per minute of stop-the-world garbage collection. GC pauses The percentage of wall-clock time spent in stop-the-world garbage collection. CPU utilization CPU utilization as a percentage of available CPU. Memory Average memory used, in mebibytes, during a given time slice.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "sections": "<em>Go</em> runtime page: Troubleshoot performance problems",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The APM user interface provides a variety of data about your app, including special <em>features</em> for the <em>Go</em> <em>agent</em> for APM. In addition, the <em>Go</em> runtime page provides important runtime data useful for troubleshooting performance issues. View and filter <em>Go</em> runtime data To view the <em>Go</em> runtime page, <em>go</em>"
      },
      "id": "603ecf06e7b9d25d8a2a07c9"
    },
    {
      "sections": [
        "Cross application tracing with Go",
        "Important",
        "Enable cross application tracing with Go",
        "Transaction and HTTP request guidelines with Go",
        "Creating transactions via http.ServeMux",
        "Creating web transactions manually",
        "Making HTTP requests",
        "Get distributed tracing"
      ],
      "title": "Cross application tracing with Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "885068746a6a990125013d98baa308c795b42ea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/cross-application-tracing-go/",
      "published_at": "2021-05-05T07:20:15Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Go agent supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems. Enable cross application tracing with Go You can enable or disable cross application tracing in the Go agent by using the CrossApplicationTracer.Enabled configuration flag. Transaction and HTTP request guidelines with Go Even with cross application tracing enabled, you'll need to make sure your application follows a few simple conventions when responding to HTTP(s) requests, making its own HTTP(s) requests, or creating its own transactions. Creating transactions via http.ServeMux If you're using Go's http.ServeMux and want CAT support, you'll need to use the agent's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct CAT headers. Your code should look similar to the following: http.HandleFunc(\"/users\", usersHandler) http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy You can read more about these wrappers in Instrument Go transactions. Creating web transactions manually When creating your own transactions with app.StartTransaction, ensure that you also call Transaction.SetWebRequest and Transaction.SetWebResponse. For example, a transaction started with the following code will have CAT enabled: txn := app.StartTransaction(\"transactionName\") // req is a *http.Request, this marks the transaction as a web transaction txn.SetWebRequestHTTP(req) // writer is a http.ResponseWriter, use the returned writer in place of the original writer = txn.SetWebResponse(writer) writer.WriteHeader(500) defer txn.End() Copy However, a transaction started without the calls to Transaction.SetWebRequest and Transaction.SetWebResponse will not have CAT enabled: // Cross application tracing not enabled txn := app.StartTransaction(\"transactionName\") defer txn.End() Copy Additionally, if you're setting HTTP response codes, use the Go agent's txn.WriteHeader method rather than the standard library's http.ResponseWriter.WriteHeader method. // old code // writer.WriteHeader(http.StatusInternalServerError) // replace with this txn := app.StartTransaction(\"transactionName\") txn.SetWebRequest(req) writer = txn.SetWebResponse(writer) writer.WriteHeader(http.StatusInternalServerError) Copy Making HTTP requests In order to have your outbound HTTP(s) requests eligible for CAT, you'll need to create an external segment. The easiest way to create an external segment for your outbound HTTP(s) request is to use the newrelic.NewRoundTripper method. For example, this code will make a request to http://api.example.com/ that includes the outgoing CAT headers. func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) req, _ := http.NewRequest(\"GET\", \"http://api.example.com/\", nil) req = newrelic.RequestWithTransactionContext(req, txn) return client.Do(req) } Copy If you have a more complex request that uses the Go standard library's http.Request, you'll need to use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for CAT. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy While it's also possible to create an ExternalSegment via a struct literal, this segment will not be eligible for CAT. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.ExternalSegment. func noGoodForCat(txn *newrelic.Transaction, url string) (*http.Response, error) { // CAT headers not inserted defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Get distributed tracing New Relic also offers distributed tracing. Distributed tracing is an improvement on cross application tracing and is recommended for large, distributed systems.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.54964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cross application tracing with <em>Go</em>",
        "sections": "Cross application tracing with <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The <em>Go</em> <em>agent</em> supports cross application tracing (CAT). Cross application tracing links transactions between APM-monitored app, which is vital for applications implementing a service-oriented or microservices architecture. Important Distributed tracing is now available. Distributed tracing"
      },
      "id": "603e78cf196a6782eba83dcb"
    },
    {
      "sections": [
        "Enable distributed tracing for your Go applications",
        "Enable distributed tracing",
        "Tip",
        "Instrument transactions and HTTP requests",
        "Instrument transactions (if using ServeMux)",
        "Before and after example",
        "Instrument outbound HTTP requests as external segments",
        "Manually create and accept distributed trace payload"
      ],
      "title": "Enable distributed tracing for your Go applications ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "8aba419af83bc8bd674bb5d7c18c0b6592bdf1b4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/enable-distributed-tracing-your-go-applications/",
      "published_at": "2021-05-05T07:18:24Z",
      "updated_at": "2021-03-11T10:09:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to enable and set up distributed tracing for the New Relic's Go agent. Enable distributed tracing To enable distributed tracing for a Go application: Use Go agent configuration settings for the type of distributed tracing you want: Standard distributed tracing Infinite Tracing Continue reading the transaction and request instrumentation guidelines below. Tip For help understanding the different types of agent distributed tracing, see How distributed tracing works. Instrument transactions and HTTP requests In order for distributed tracing to work optimally, your Go application must adhere to guidelines for the following scenarios: Instrument transactions (if using ServeMux) If you are using Go's http.ServeMux and want to enable New Relic's distributed tracing, your Go application must be instrumented with New Relic's WrapHandle and WrapHandleFunc wrappers. These wrappers automatically start and end transactions with the request and response writer, which will automatically add the correct distributed tracing headers. For more on how header propagation works, see How distributed tracing works. Before and after example Here is an example of code before instrumentation: http.HandleFunc(\"/users\", usersHandler) Copy And here is an example of that same code after instrumentation: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Read more about using these wrappers in Instrument Go transactions. Instrument outbound HTTP requests as external segments In order to have your outbound HTTP requests eligible for distributed tracing, create an external segment. The easiest way to create an external segment for your outbound HTTP request is to use the newrelic.NewRoundTripper method. Here is an example of making a request to http://api.example.com that includes the outgoing distributed tracing headers: func useNewRoundTripper(txn *newrelic.Transaction) (*http.Response, error) { client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) return client.Do(request) } Copy If you have a more complex request that uses the Go standard library's http.Request, use the newrelic.StartExternalSegment method to ensure your outbound request is eligible for distributed tracing: func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy An ExternalSegment created with a struct literal cannot be used for distributed tracing. Because of this, New Relic recommends using newrelic.NewRoundTripper or newrelic.StartExternalSegment. func noGoodForDt(txn *newrelic.Transaction, url string) (*http.Response, error) { // Distributed tracing headers are not added to the outgoing request. // Use newrelic.NewRoundTripper or newrelicc.StartExternalSegment instead. defer newrelic.ExternalSegment{ StartTime: txn.StartSegmentNow(), URL: url, }.End() return http.Get(url) } Copy Manually create and accept distributed trace payload The distributed trace payload contains information that allows New Relic to stitch together transactions occurring in multiple services into a complete transaction trace. If New Relic-monitored services are not sending trace context to each other, it will result in incomplete trace details. For general instructions on how to use the API calls below to implement distributed tracing, first see Use distributed tracing APIs. If you want to... Use this Create a payload to be sent to the called service. InsertDistributedTraceHeaders(h http.Header) Copy Accept a payload sent from the first service; this will link these services together in a trace. AcceptDistributedTraceHeaders(h http.Header) Copy For more details on using these, see the Go agent GitHub repo.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.160645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable distributed tracing for your <em>Go</em> applications ",
        "sections": "Enable distributed tracing for your <em>Go</em> applications",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Read on to learn how to enable and set up distributed tracing for the New Relic&#x27;s <em>Go</em> <em>agent</em>. Enable distributed tracing To enable distributed tracing for a <em>Go</em> application: Use <em>Go</em> <em>agent</em> configuration settings for the type of distributed tracing you want: Standard distributed tracing Infinite Tracing"
      },
      "id": "6043d12a64441f58bc378ed5"
    }
  ],
  "/docs/agents/go-agent/get-started/apm-agent-security-go": [
    {
      "sections": [
        "Go agent compatibility and requirements",
        "Golang versions",
        "Operating environments",
        "Integrations",
        "Database and instance-level performance",
        "Connect the agent to other features"
      ],
      "title": "Go agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "551e784873adba059e7b6112fc75199dce0e3f28",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/go-agent-compatibility-requirements/",
      "published_at": "2021-05-05T01:17:20Z",
      "updated_at": "2021-03-30T15:50:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for Go, ensure your system meets these requirements. Golang versions New Relic supports Golang 1.7 or higher. Operating environments The agent supports Linux, macOS, and Windows. You can also use the Go agent in a Google App Engine (GAE) flexible environment. Integrations The following integration packages extend the base newrelic package to support other frameworks and libraries. If frameworks and databases don't have an integration package, you can still instrument them using the newrelic package primitives. For more information about instrumenting your database using these primitives, see the Go agent's datastore segments documentation on GitHub. The following integration packages must be imported along with the newrelic package, as shown in the nrgin example on GitHub. Project Integration package Purpose aws/aws-sdk-go v3/integrations/nrawssdk-v1 Instrument outbound calls made using Go AWS SDK aws/aws-sdk-go-v2 v3/integrations/nrawssdk-v2 Instrument outbound calls made using Go AWS SDK v2 labstack/echo v3/integrations/nrecho-v3 Instrument inbound requests through version 3 of the Echo framework labstack/echo v3/integrations/nrecho-v4 Instrument inbound requests through version 4 of the Echo framework gin-gonic/gin v3/integrations/nrgin Instrument inbound requests through the Gin framework gorilla/mux v3/integrations/nrgorilla Instrument inbound requests through the Gorilla framework julienschmidt/httprouter v3/integrations/nrhttprouter Instrument inbound requests through the HttpRouter framework aws/aws-lambda-go v3/integrations/nrlambda Instrument AWS Lambda applications sirupsen/logrus v3/integrations/nrlogrus Send agent log messages to Logrus mgutz/logxi v3/integrations/nrlogxi Send agent log messages to Logxi uber-go/zap v3/integrations/nrzap Send agent log messages to Zap pkg/errors v3/integrations/nrpkgerrors Wrap pkg/errors errors to improve stack traces and error class information openzipkin/b3-propagation v3/integrations/nrb3 Add B3 headers to outgoing requests database/sql Use a supported database driver or builtin instrumentation Instrument database calls with SQL jmoiron/sqlx Use a supported database driver or builtin instrumentation Instrument database calls with SQLx go-sql-driver/mysql v3/integrations/nrmysql Instrument database calls to MySQL lib/pq v3/integrations/nrpq Instrument database calls to Postgres snowflakedb/gosnowflake v3/integrations/nrsnowflake Instrument database calls to Snowflake go-redis/redis v3/integrations/nrredis-v7 Instrument calls to Redis Version 7 go-redis/redis v3/integrations/nrredis-v8 Instrument calls to Redis Version 8 mattn/go-sqlite3 v3/integrations/nrsqlite3 Instrument database calls to SQLite mongodb/mongo-go-driver v3/integrations/nrmongo Instrument MongoDB calls google.golang.org/grpc v3/integrations/nrgrpc Instrument gRPC servers and clients micro/go-micro v3/integrations/nrmicro Instrument servers, clients, publishers, and subscribers through the Micro framework nats-io/nats.go v3/integrations/nrnats Instrument publishers and subscribers using the NATS client nats-io/stan.go v3/integrations/nrstan Instrument publishers and subscribers using the NATS streaming client graphql-go/graphql v3/integrations/nrgraphqlgo Instrument inbound requests using graphql-go/graphql graph-gophers/graphql-go v3/integrations/nrgraphgophers Instrument inbound requests using graph-gophers/graphql-go Database and instance-level performance New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. The New Relic Go agent version 1.4 or higher supports instance details for all database drivers. Connect the agent to other features The Go agent integrates with other features to give you full-stack observability: Product Integration Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Go agent sends default events and attributes to New Relic for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. Browser monitoring The Go agent has an API for returning the browser agent's JavaScript. After using this API method on each request, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.97453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>Go</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before you install New Relic for <em>Go</em>, ensure your system meets these requirements. Golang versions New Relic supports Golang 1.7 or higher. Operating environments The <em>agent</em> supports Linux, macOS, and Windows. You can also use the <em>Go</em> <em>agent</em> in a Google App Engine (GAE) flexible environment"
      },
      "id": "603e848a196a677702a83d8a"
    },
    {
      "sections": [
        "Introduction to New Relic for Go",
        "Tip",
        "Monitor application and microservice performance",
        "Get New Relic for Go",
        "Additional instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "1ab9707d8e37024d3ddb4e0fd17a40bcba9d703d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/introduction-new-relic-go/",
      "published_at": "2021-05-04T17:05:28Z",
      "updated_at": "2021-03-11T09:40:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go monitors your Go language applications and microservices to help you identify and solve performance issues. You can also use your data to improve your customers' experience and make data-driven business decisions. Go is a compiled language, and doesn’t use a virtual machine. The best way to monitor Go applications is to use the Go API. Our API provides exceptional flexibility and control over what gets instrumented. Tip To use Go or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Get New Relic for Go in a few simple steps. Monitor application and microservice performance The Go programming language, also called Golang, has become a popular coding choice for its ease of use, concurrency, and impressive speed. With New Relic for Go, you will gain a new level of visibility into your Golang applications: See the big picture: Monitor the throughput, response times, and errors of the transactions in your applications and services. Understand your application's runtime health by seeing memory usage, garbage collection behavior, and CPU usage over time. With deployment markers, see how code changes impact application performance and health. Use infrastructure monitoring to view detailed host and server data. Use distributed tracing to understand how your services and microservices are interacting. Identify and fix errors: Find bottlenecks by seeing time spent on database calls, external system calls, and key blocks of code. View Goroutine counts and identify possible Goroutine leaks. Get alerts for problems or errors before they affect users. Create custom dashboards for important metrics. Analyze business data: Query user-related data and improve business processes. Create custom queries of your Go application data. Send your own custom data to New Relic. Create and share visual, interactive displays of your data. Get New Relic for Go To use New Relic for Go: Check the compatibility and requirements. If you do not already have one, sign up for a free New Relic account. To install the agent, use our launcher, or follow the New Relic Go agent's installation and instrumentation procedures. Wait a few minutes to view data from your Go app in your New Relic account's UI. Read the install docs Add Go data We recommend instrumenting your Go code to get the maximum benefits from the New Relic Go agent. But we make it easy to get great data in couple of ways: Simply import the agent and create an application to get useful runtime information about your number of goroutines, garbage collection statistics, and memory and CPU usage. Use our many integration packages for out-of-the box support for many popular Go web frameworks and libraries. We continue to add integration packages based on your feedback. You can weigh in on potential integrations on the Explorers Hub and our New Relic Go agent GitHub project. Additional instrumentation After installing the agent, consider these open source telemetry tools: OpenCensus exporter OpenTelemetry exporter Go Telemetry SDK Check the source code The Go agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.235695,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Go</em>",
        "sections": "<em>Get</em> New Relic for <em>Go</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " docs Add <em>Go</em> data We recommend instrumenting your <em>Go</em> code to <em>get</em> the maximum benefits from the New Relic <em>Go</em> <em>agent</em>. But we make it easy to <em>get</em> great data in couple of ways: Simply import the <em>agent</em> and create an application to <em>get</em> useful runtime information about your number of goroutines, garbage"
      },
      "id": "6043ce9228ccbcee8f2c6084"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.6087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    }
  ],
  "/docs/agents/go-agent/get-started/go-agent-compatibility-requirements": [
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-05-05T07:16:53Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Insights custom events API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.61804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    },
    {
      "sections": [
        "Introduction to New Relic for Go",
        "Tip",
        "Monitor application and microservice performance",
        "Get New Relic for Go",
        "Additional instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "1ab9707d8e37024d3ddb4e0fd17a40bcba9d703d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/introduction-new-relic-go/",
      "published_at": "2021-05-04T17:05:28Z",
      "updated_at": "2021-03-11T09:40:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go monitors your Go language applications and microservices to help you identify and solve performance issues. You can also use your data to improve your customers' experience and make data-driven business decisions. Go is a compiled language, and doesn’t use a virtual machine. The best way to monitor Go applications is to use the Go API. Our API provides exceptional flexibility and control over what gets instrumented. Tip To use Go or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Get New Relic for Go in a few simple steps. Monitor application and microservice performance The Go programming language, also called Golang, has become a popular coding choice for its ease of use, concurrency, and impressive speed. With New Relic for Go, you will gain a new level of visibility into your Golang applications: See the big picture: Monitor the throughput, response times, and errors of the transactions in your applications and services. Understand your application's runtime health by seeing memory usage, garbage collection behavior, and CPU usage over time. With deployment markers, see how code changes impact application performance and health. Use infrastructure monitoring to view detailed host and server data. Use distributed tracing to understand how your services and microservices are interacting. Identify and fix errors: Find bottlenecks by seeing time spent on database calls, external system calls, and key blocks of code. View Goroutine counts and identify possible Goroutine leaks. Get alerts for problems or errors before they affect users. Create custom dashboards for important metrics. Analyze business data: Query user-related data and improve business processes. Create custom queries of your Go application data. Send your own custom data to New Relic. Create and share visual, interactive displays of your data. Get New Relic for Go To use New Relic for Go: Check the compatibility and requirements. If you do not already have one, sign up for a free New Relic account. To install the agent, use our launcher, or follow the New Relic Go agent's installation and instrumentation procedures. Wait a few minutes to view data from your Go app in your New Relic account's UI. Read the install docs Add Go data We recommend instrumenting your Go code to get the maximum benefits from the New Relic Go agent. But we make it easy to get great data in couple of ways: Simply import the agent and create an application to get useful runtime information about your number of goroutines, garbage collection statistics, and memory and CPU usage. Use our many integration packages for out-of-the box support for many popular Go web frameworks and libraries. We continue to add integration packages based on your feedback. You can weigh in on potential integrations on the Explorers Hub and our New Relic Go agent GitHub project. Additional instrumentation After installing the agent, consider these open source telemetry tools: OpenCensus exporter OpenTelemetry exporter Go Telemetry SDK Check the source code The Go agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.235695,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Go</em>",
        "sections": "<em>Get</em> New Relic for <em>Go</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " docs Add <em>Go</em> data We recommend instrumenting your <em>Go</em> code to <em>get</em> the maximum benefits from the New Relic <em>Go</em> <em>agent</em>. But we make it easy to <em>get</em> great data in couple of ways: Simply import the <em>agent</em> and create an application to <em>get</em> useful runtime information about your number of goroutines, garbage"
      },
      "id": "6043ce9228ccbcee8f2c6084"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.6087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    }
  ],
  "/docs/agents/go-agent/get-started/introduction-new-relic-go": [
    {
      "sections": [
        "Go agent compatibility and requirements",
        "Golang versions",
        "Operating environments",
        "Integrations",
        "Database and instance-level performance",
        "Connect the agent to other features"
      ],
      "title": "Go agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "551e784873adba059e7b6112fc75199dce0e3f28",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/go-agent-compatibility-requirements/",
      "published_at": "2021-05-05T01:17:20Z",
      "updated_at": "2021-03-30T15:50:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for Go, ensure your system meets these requirements. Golang versions New Relic supports Golang 1.7 or higher. Operating environments The agent supports Linux, macOS, and Windows. You can also use the Go agent in a Google App Engine (GAE) flexible environment. Integrations The following integration packages extend the base newrelic package to support other frameworks and libraries. If frameworks and databases don't have an integration package, you can still instrument them using the newrelic package primitives. For more information about instrumenting your database using these primitives, see the Go agent's datastore segments documentation on GitHub. The following integration packages must be imported along with the newrelic package, as shown in the nrgin example on GitHub. Project Integration package Purpose aws/aws-sdk-go v3/integrations/nrawssdk-v1 Instrument outbound calls made using Go AWS SDK aws/aws-sdk-go-v2 v3/integrations/nrawssdk-v2 Instrument outbound calls made using Go AWS SDK v2 labstack/echo v3/integrations/nrecho-v3 Instrument inbound requests through version 3 of the Echo framework labstack/echo v3/integrations/nrecho-v4 Instrument inbound requests through version 4 of the Echo framework gin-gonic/gin v3/integrations/nrgin Instrument inbound requests through the Gin framework gorilla/mux v3/integrations/nrgorilla Instrument inbound requests through the Gorilla framework julienschmidt/httprouter v3/integrations/nrhttprouter Instrument inbound requests through the HttpRouter framework aws/aws-lambda-go v3/integrations/nrlambda Instrument AWS Lambda applications sirupsen/logrus v3/integrations/nrlogrus Send agent log messages to Logrus mgutz/logxi v3/integrations/nrlogxi Send agent log messages to Logxi uber-go/zap v3/integrations/nrzap Send agent log messages to Zap pkg/errors v3/integrations/nrpkgerrors Wrap pkg/errors errors to improve stack traces and error class information openzipkin/b3-propagation v3/integrations/nrb3 Add B3 headers to outgoing requests database/sql Use a supported database driver or builtin instrumentation Instrument database calls with SQL jmoiron/sqlx Use a supported database driver or builtin instrumentation Instrument database calls with SQLx go-sql-driver/mysql v3/integrations/nrmysql Instrument database calls to MySQL lib/pq v3/integrations/nrpq Instrument database calls to Postgres snowflakedb/gosnowflake v3/integrations/nrsnowflake Instrument database calls to Snowflake go-redis/redis v3/integrations/nrredis-v7 Instrument calls to Redis Version 7 go-redis/redis v3/integrations/nrredis-v8 Instrument calls to Redis Version 8 mattn/go-sqlite3 v3/integrations/nrsqlite3 Instrument database calls to SQLite mongodb/mongo-go-driver v3/integrations/nrmongo Instrument MongoDB calls google.golang.org/grpc v3/integrations/nrgrpc Instrument gRPC servers and clients micro/go-micro v3/integrations/nrmicro Instrument servers, clients, publishers, and subscribers through the Micro framework nats-io/nats.go v3/integrations/nrnats Instrument publishers and subscribers using the NATS client nats-io/stan.go v3/integrations/nrstan Instrument publishers and subscribers using the NATS streaming client graphql-go/graphql v3/integrations/nrgraphqlgo Instrument inbound requests using graphql-go/graphql graph-gophers/graphql-go v3/integrations/nrgraphgophers Instrument inbound requests using graph-gophers/graphql-go Database and instance-level performance New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. The New Relic Go agent version 1.4 or higher supports instance details for all database drivers. Connect the agent to other features The Go agent integrates with other features to give you full-stack observability: Product Integration Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Go agent sends default events and attributes to New Relic for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. Browser monitoring The Go agent has an API for returning the browser agent's JavaScript. After using this API method on each request, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.974525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>Go</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before you install New Relic for <em>Go</em>, ensure your system meets these requirements. Golang versions New Relic supports Golang 1.7 or higher. Operating environments The <em>agent</em> supports Linux, macOS, and Windows. You can also use the <em>Go</em> <em>agent</em> in a Google App Engine (GAE) flexible environment"
      },
      "id": "603e848a196a677702a83d8a"
    },
    {
      "sections": [
        "APM agent security: Go",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution"
      ],
      "title": "APM agent security: Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Get started"
      ],
      "external_id": "dd627ef60861ddfad5b611a3282145d093ea654c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/get-started/apm-agent-security-go/",
      "published_at": "2021-05-05T07:16:53Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Go agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic Go agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. High security mode settings When you enable high security mode, the default security settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. The agent strips QueryParameters from database segments. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Setting Effects on data security HighSecurity boolean Default: false To enable high security mode, set this to true and enable high security (V2). This restricts the information you can send to New Relic. Attributes.Enabled boolean Default: true By default, you are sending some attributes to New Relic. If you do not want to send these default attributes to New Relic, set Attributes.Enabled to false. Attributes.Exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using Attributes.Exclude. This restricts the information sent to New Relic. For examples of how to disable the recording of each attribute, see their descriptions on the Go agent attributes page. CustomInsightsEvents.Enabled boolean Default: true By default, the agent records events sent to the Insights custom events API using RecordCustomEvent. If you enable high security mode, this is automatically set to false.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.618034,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Go</em>",
        "sections": "APM <em>agent</em> security: <em>Go</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "The New Relic <em>Go</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives"
      },
      "id": "603e8fa9196a67337ca83dc5"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.60868,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    }
  ],
  "/docs/agents/go-agent/index": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.60868,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Update the Go agent",
        "Update your Go agent version"
      ],
      "title": "Update the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1ea432f5b102680c744aa5e1360a5b69e8789c12",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/update-go-agent/",
      "published_at": "2021-05-05T07:20:12Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, update your app's Go agent to the latest version. For additional information about specific agent updates, refer to the Go agent release notes. Update your Go agent version To update the Go agent, follow your standard procedures to run the following process as a terminal command or as a script. From http://github.com/newrelic/go-agent, use this process: go get -u github.com/newrelic/go-agent Copy Compile and deploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 73.183784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Go</em> <em>agent</em>",
        "sections": "Update the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, update your app&#x27;s <em>Go</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>Go</em> <em>agent</em> release notes. Update your <em>Go</em> <em>agent</em> version To update the <em>Go</em> <em>agent</em>"
      },
      "id": "603eb23a196a67103fa83d86"
    },
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-05-04T17:02:46Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 73.183784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    }
  ],
  "/docs/agents/go-agent/installation/install-go-agent-gae-flexible-environment": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.534706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Update the Go agent",
        "Update your Go agent version"
      ],
      "title": "Update the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1ea432f5b102680c744aa5e1360a5b69e8789c12",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/update-go-agent/",
      "published_at": "2021-05-05T07:20:12Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, update your app's Go agent to the latest version. For additional information about specific agent updates, refer to the Go agent release notes. Update your Go agent version To update the Go agent, follow your standard procedures to run the following process as a terminal command or as a script. From http://github.com/newrelic/go-agent, use this process: go get -u github.com/newrelic/go-agent Copy Compile and deploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.050705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Go</em> <em>agent</em>",
        "sections": "Update the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, update your app&#x27;s <em>Go</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>Go</em> <em>agent</em> release notes. Update your <em>Go</em> <em>agent</em> version To update the <em>Go</em> <em>agent</em>"
      },
      "id": "603eb23a196a67103fa83d86"
    },
    {
      "sections": [
        "Uninstall the Go agent"
      ],
      "title": "Uninstall the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "b1d4bdddfa9e34d4fc77aebae095e927ad965934",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/uninstall-go-agent/",
      "published_at": "2021-05-05T07:16:52Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Go agent. For instructions on how to temporarily disable the Go agent, see Disable the agent. To uninstall New Relic for Go: Uninstall the New Relic package using your preferred uninstall method. Recompile and restart your application. Once you uninstall the New Relic package, you will be able to remove the application from your New Relic account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.04431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Go</em> <em>agent</em>",
        "sections": "Uninstall the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Go</em> <em>agent</em>. For instructions on how to temporarily disable the <em>Go</em> <em>agent</em>, see Disable the <em>agent</em>. To uninstall New Relic for <em>Go</em>: Uninstall the New Relic package using your preferred uninstall method. Recompile and restart your application. Once you uninstall the New Relic package, you will be able to remove the application from your New Relic account."
      },
      "id": "603e9f8028ccbc328aeba748"
    }
  ],
  "/docs/agents/go-agent/installation/install-new-relic-go": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.534706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Update the Go agent",
        "Update your Go agent version"
      ],
      "title": "Update the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1ea432f5b102680c744aa5e1360a5b69e8789c12",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/update-go-agent/",
      "published_at": "2021-05-05T07:20:12Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, update your app's Go agent to the latest version. For additional information about specific agent updates, refer to the Go agent release notes. Update your Go agent version To update the Go agent, follow your standard procedures to run the following process as a terminal command or as a script. From http://github.com/newrelic/go-agent, use this process: go get -u github.com/newrelic/go-agent Copy Compile and deploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.050705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Go</em> <em>agent</em>",
        "sections": "Update the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, update your app&#x27;s <em>Go</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>Go</em> <em>agent</em> release notes. Update your <em>Go</em> <em>agent</em> version To update the <em>Go</em> <em>agent</em>"
      },
      "id": "603eb23a196a67103fa83d86"
    },
    {
      "sections": [
        "Uninstall the Go agent"
      ],
      "title": "Uninstall the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "b1d4bdddfa9e34d4fc77aebae095e927ad965934",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/uninstall-go-agent/",
      "published_at": "2021-05-05T07:16:52Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Go agent. For instructions on how to temporarily disable the Go agent, see Disable the agent. To uninstall New Relic for Go: Uninstall the New Relic package using your preferred uninstall method. Recompile and restart your application. Once you uninstall the New Relic package, you will be able to remove the application from your New Relic account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.04431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Go</em> <em>agent</em>",
        "sections": "Uninstall the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Go</em> <em>agent</em>. For instructions on how to temporarily disable the <em>Go</em> <em>agent</em>, see Disable the <em>agent</em>. To uninstall New Relic for <em>Go</em>: Uninstall the New Relic package using your preferred uninstall method. Recompile and restart your application. Once you uninstall the New Relic package, you will be able to remove the application from your New Relic account."
      },
      "id": "603e9f8028ccbc328aeba748"
    }
  ],
  "/docs/agents/go-agent/installation/uninstall-go-agent": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.53467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Update the Go agent",
        "Update your Go agent version"
      ],
      "title": "Update the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1ea432f5b102680c744aa5e1360a5b69e8789c12",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/update-go-agent/",
      "published_at": "2021-05-05T07:20:12Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, update your app's Go agent to the latest version. For additional information about specific agent updates, refer to the Go agent release notes. Update your Go agent version To update the Go agent, follow your standard procedures to run the following process as a terminal command or as a script. From http://github.com/newrelic/go-agent, use this process: go get -u github.com/newrelic/go-agent Copy Compile and deploy your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.050705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Go</em> <em>agent</em>",
        "sections": "Update the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, update your app&#x27;s <em>Go</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>Go</em> <em>agent</em> release notes. Update your <em>Go</em> <em>agent</em> version To update the <em>Go</em> <em>agent</em>"
      },
      "id": "603eb23a196a67103fa83d86"
    },
    {
      "sections": [
        "Install the Go agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get agent troubleshooting logs from GAE"
      ],
      "title": "Install the Go agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "9d2ddffb83697c6191c0b6abaed8839516b3aa54",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-go-agent-gae-flexible-environment/",
      "published_at": "2021-05-04T18:27:28Z",
      "updated_at": "2021-03-11T07:58:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our Go agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. Here we explain how to add New Relic to your GAE flex app by configuring a custom runtime, and give an example of deploying a Go app with Docker. Important The Go agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the Go agent, building a custom Go runtime for Docker, and deploying a golang application. For more information about deploying and configuring your Go app in the GAE flexible environment, see: Google App Engine's documentation for Go Google App Engine's tutorials to deploy a Go app 1. Set up the GAE project and install dependencies Follow standard procedures to install the Go agent for your specific app server, including your license key. Follow Google App Engine procedures for Go to create a new Cloud Platform project, create an App Engine application, download and install git, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. The following Dockerfile example code defines the golang version used. FROM golang:1.8-onbuild CMD go run main.go Copy 4. Build a Docker image To build the Docker image, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build --rm -t Docker-image-name . Copy 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud --project go-app-name app deploy Copy Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see GAE's documentation for debugging an instance. To redirect New Relic Go agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.yml file to: log_file_name: STDOUT Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.7455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Go</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> the <em>Go</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " or Google App Engine&#x27;s &quot;native mode&quot; <em>installation</em>. Build a custom runtime using Docker See Google&#x27;s documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the <em>Go</em> <em>agent</em>, building a custom <em>Go</em> runtime for Docker, and deploying a golang"
      },
      "id": "6043cd7164441fc312378efe"
    }
  ],
  "/docs/agents/go-agent/installation/update-go-agent": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 126.53467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": ". Configuration methods and precedence The primary way to configure the <em>Go</em> <em>agent</em> is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard <em>installation</em> process. With <em>Go</em> <em>agent</em> versions 2.7.0 or higher, you can also set a limited number"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Uninstall the Go agent"
      ],
      "title": "Uninstall the Go agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "b1d4bdddfa9e34d4fc77aebae095e927ad965934",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/uninstall-go-agent/",
      "published_at": "2021-05-05T07:16:52Z",
      "updated_at": "2021-03-16T13:12:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how to uninstall the New Relic Go agent. For instructions on how to temporarily disable the Go agent, see Disable the agent. To uninstall New Relic for Go: Uninstall the New Relic package using your preferred uninstall method. Recompile and restart your application. Once you uninstall the New Relic package, you will be able to remove the application from your New Relic account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.044304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Go</em> <em>agent</em>",
        "sections": "Uninstall the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Read on to learn how to uninstall the New Relic <em>Go</em> <em>agent</em>. For instructions on how to temporarily disable the <em>Go</em> <em>agent</em>, see Disable the <em>agent</em>. To uninstall New Relic for <em>Go</em>: Uninstall the New Relic package using your preferred uninstall method. Recompile and restart your application. Once you uninstall the New Relic package, you will be able to remove the application from your New Relic account."
      },
      "id": "603e9f8028ccbc328aeba748"
    },
    {
      "sections": [
        "Install the Go agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get agent troubleshooting logs from GAE"
      ],
      "title": "Install the Go agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "9d2ddffb83697c6191c0b6abaed8839516b3aa54",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-go-agent-gae-flexible-environment/",
      "published_at": "2021-05-04T18:27:28Z",
      "updated_at": "2021-03-11T07:58:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our Go agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. Here we explain how to add New Relic to your GAE flex app by configuring a custom runtime, and give an example of deploying a Go app with Docker. Important The Go agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the Go agent, building a custom Go runtime for Docker, and deploying a golang application. For more information about deploying and configuring your Go app in the GAE flexible environment, see: Google App Engine's documentation for Go Google App Engine's tutorials to deploy a Go app 1. Set up the GAE project and install dependencies Follow standard procedures to install the Go agent for your specific app server, including your license key. Follow Google App Engine procedures for Go to create a new Cloud Platform project, create an App Engine application, download and install git, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. The following Dockerfile example code defines the golang version used. FROM golang:1.8-onbuild CMD go run main.go Copy 4. Build a Docker image To build the Docker image, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build --rm -t Docker-image-name . Copy 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud --project go-app-name app deploy Copy Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see GAE's documentation for debugging an instance. To redirect New Relic Go agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.yml file to: log_file_name: STDOUT Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.7455,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>Go</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> the <em>Go</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " or Google App Engine&#x27;s &quot;native mode&quot; <em>installation</em>. Build a custom runtime using Docker See Google&#x27;s documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the <em>Go</em> <em>agent</em>, building a custom <em>Go</em> runtime for Docker, and deploying a golang"
      },
      "id": "6043cd7164441fc312378efe"
    }
  ],
  "/docs/agents/go-agent/instrumentation/create-custom-metrics-go": [
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-05-04T17:02:46Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.992035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Instrument Go segments",
        "Measure time for functions and code blocks",
        "Block-of-code segments",
        "Function segments",
        "Nest segments",
        "Datastore segments",
        "Use instrumentation package",
        "Important",
        "Use DatastoreSegment",
        "External segments",
        "Use StartExternalSegment()",
        "Use NewRoundTripper()",
        "Message producer segments",
        "Use MessageProducerSegment"
      ],
      "title": "Instrument Go segments",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "4ca52352a98087598f1a5ace76a9d80bf8d20cf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/instrument-go-segments/",
      "published_at": "2021-05-05T07:11:52Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic for Go, you can monitor the specific segments of a transaction in a Go application to get more detail about specific functions or code blocks. Measure time for functions and code blocks Segments are the specific parts of a transaction in an application. By instrumenting segments, you can measure the time taken by functions and code blocks, such as external calls, datastore calls, adding messages to queues, and background tasks. Example: You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You could instrument your application to break that transaction up into two pieces: one segment for shipping and one segment for payment. Block-of-code segments Once you instrument a transaction, you are ready to instrument one or more segments in that transaction. To instrument an arbitrary block of code as a segment, use the following pattern, and include txn as the variable name set for the transaction: segment := newrelic.Segment{} segment.Name = \"mySegmentName\" segment.StartTime = txn.StartSegmentNow() // ... code you want to time here ... segment.End() Copy StartSegment is a convenient helper. It creates a segment and starts it: segment := txn.StartSegment(\"mySegmentName\") // ... code you want to time here ... segment.End() Copy Function segments Instrumenting a function as a segment is essentially the same as instrumenting an arbitrary block of code as a segment. The main difference is that, because a function has a discrete ending, you can use Go's defer statement. To instrument a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(\"mySegmentName\").End() Copy Nest segments Segments can be nested. The segment being ended must be the most recently started segment. Here's an example of a segment starting and ending inside another segment: s1 := txn.StartSegment(\"outerSegment\") s2 := txn.StartSegment(\"innerSegment\") // s2 must end before s1 s2.End() s1.End() Copy A zero value segment may safely be ended. Therefore, the following code is safe even if the conditional fails: var s newrelic.Segment if recordSegment { s.StartTime = txn.StartSegmentNow(), } // ... code you wish to time here ... s.End() Copy Datastore segments You can instrument Go application datastore calls. Datastore segments appear in the APM Transactions breakdown table and Databases tab of the Transactions page in New Relic. If you are using a MySQL, PostgreSQL, or SQLite database driver, the easiest way to add Datastore segments is to use our pre-built integration packages. Otherwise, you can manually create Datastore segments for each database call. Use instrumentation package There is an integration package for each database driver that we support: Database library supported Integration package go-sql-driver/mysql v3/integrations/nrmysql lib/pq v3/integrations/nrpq mattn/go-sqlite3 v3/integrations/nrsqlite3 To use one of these integrations, first replace the driver with our integration version: import ( // import our integration package in place of \"github.com/go-sql-driver/mysql\" _ \"github.com/newrelic/go-agent/v3/integrations/nrmysql\" ) func main() { // open \"nrmysql\" in place of \"mysql\" db, err := sql.Open(\"nrmysql\", \"user@unix(/path/to/socket)/dbname\") } Copy Second, use the ExecContext, QueryContext, and QueryRowContext methods of sql.DB, sql.Conn, sql.Tx, and sql.Stmt and provide a transaction-containing context. Calls to Exec, Query, and QueryRow do not get instrumented. ctx := newrelic.NewContext(context.Background(), txn) row := db.QueryRowContext(ctx, \"SELECT count(*) from tables\") Copy If you are using a database/sql database not listed above, you can write your own instrumentation for it using InstrumentConnector, InstrumentDriver, and DriverSegmentBuilder. The integration packages act as examples of how to do this. Important Datastore integration packages for MySQL, PostgreSQL, and SQLite were added in Go Agent v2.8.0 and require Go v1.10 or above. Use DatastoreSegment Just like basic segments, datastore segments begin when the StartTime field is populated and finish when the End method is called. To instrument a datastore segment, place the following at the beginning of the function you want to monitor: s := newrelic.DatastoreSegment{ Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } s.StartTime = txn.StartSegmentNow() // ... make the datastore call s.End() Copy For more information about: Assigning the Collection, Operation, DatabaseName, and other parameter values: See the New Relic datastore segment documentation on GoDoc. Available values for Product: See the New Relic documentation on GitHub. When instrumenting a datastore call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.DatastoreSegment{ StartTime: txn.StartSegmentNow(), Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } defer s.End() Copy External segments You can instrument Go application calls to external services, such as web services, resources in the cloud, and any other network calls. External segments appear in the APM Transactions breakdown table and the External services page in New Relic. There are two ways to instrument external segments: Use StartExternalSegment() Recommendation: Use the StartExternalSegment helper, since New Relic uses it to trace activity between your applications using cross application tracing. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy Use NewRoundTripper() NewRoundTripper returns an http.RoundTripper, which allows you to instrument external calls without calling StartExternalSegment by modifying your http.Client's Transport field. The RoundTripper returned will look for a Transaction in the request's context using FromContext. Here is an example of NewRoundTripper instrumentation: client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) response, err := client.Do(request) Copy Message producer segments You can instrument Go application calls that add messages to queuing systems like RabbitMQ and Kafka. Message producer segments appear in the APM Transactions breakdown in New Relic. There is only one way to instrument message producer segments: Use MessageProducerSegment Just like basic segments, message producer segments begin when the StartTime field is populated, and finish when the End method is called. To instrument a message producer segment, place the following at the beginning of the function you want to monitor: s := newrelic.MessageProducerSegment{ Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } s.StartTime = txn.StartSegmentNow() // ... add message to queue s.End() Copy For more information about assigning the Library, DestinationType, DestinationName, or DestinationTemporary fields, see the New Relic message producer segment documentation on GoDoc. When instrumenting a message producer call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.MessageProducerSegment{ StartTime: txn.StartSegmentNow(), Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } defer s.End() // ... add message to queue Copy Important Message producer segments were added in Go Agent version 2.14.0.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> <em>Go</em> segments",
        "sections": "<em>Instrument</em> <em>Go</em> segments",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " is that, because a function has a discrete ending, you can use <em>Go</em>&#x27;s defer statement. To <em>instrument</em> a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(&quot;mySegmentName&quot;).End() Copy Nest segments"
      },
      "id": "6043b78d64441f2285378f25"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-05-05T07:09:56Z",
      "updated_at": "2021-03-11T08:13:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic Insights data requirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/instrumentation/go-agent-attributes": [
    {
      "sections": [
        "Create custom metrics in Go",
        "Create a custom metric",
        "Name a custom metric",
        "For more help"
      ],
      "title": "Create custom metrics in Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "9336bef71f0cac25636bfe0b4392864f3605c6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/create-custom-metrics-go/",
      "published_at": "2021-05-05T07:09:57Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to report any metric that passes through your code. For example, with New Relic's Go monitoring, you can create custom metrics to time a component of your app that may not captured by default. Once you capture a custom metric, you can: Unify your monitoring inside New Relic through the data explorer. Use our REST API to programmatically retrieve and use custom metric data outside of the UI. Create custom metric alert conditions to notify you or your team when your custom metric exceeds specific values. Create a custom metric Instantiate your application by running the following: cfg := newrelic.NewConfig(\"Your App Name\", mustGetEnv(\"NEW_RELIC_LICENSE_KEY\")) cfg.Logger = newrelic.NewDebugLogger(os.Stdout) var err error app, err = newrelic.NewApplication(cfg) Copy After instantiating your app, create a custom metric with the following code: app.RecordCustomMetric( \"CustomMetricName\", //name of your metric 132, //time in ms ); Copy RecordCustomMetric's first parameter is a string that names your custom metric. The RecordCustomMetric method will automatically prepend the string Custom/ to your metric name. This means the above code will generate a metric named Custom/CustomMetricName. RecordCustomMetric's second parameter is the time, in milliseconds, that you want to record for your custom transaction. This means the above code will produce a metric of .132 seconds in New Relic's systems. To use a custom metric as a counter, it can be incremented by making the call as described above, and the count value for that metric will be incremented by 1. The value you use for the second parameter (time in ms) is irrelevant if you are only using the metric as a counter, and thus you can use a static number, such as 0 or 1. To increment a counter by a number greater than 1, call app.RecordCustomMetric multiple times - each call will only increment the metric by 1 no matter what the value of the second parameter is. Name a custom metric Carefully consider how you name your custom metrics. If your program creates too many uniquely-named metrics, you may end up with a metric grouping issue (MGI). MGIs occur when the granularity of metric names is too fine, resulting in hundreds or thousands of different metric names. One common cause of MGIs is relying on the full URL name for metric naming in web transactions. A few major code paths may generate many different full URL paths to unique documents, articles, page, etc. If the unique element of the URL path is included in the metric name, each of these common paths will have its own unique metric name. If metric grouping issues occur, follow the troubleshooting procedures. For more help Additional documentation resources include: New Relic for Go segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) Instrument Go transactions (how to create New Relic transactions in your Go app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom metrics in <em>Go</em>",
        "sections": "Create custom metrics in <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " Additional documentation resources include: New Relic for <em>Go</em> segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) <em>Instrument</em> <em>Go</em> transactions (how to create New Relic transactions in your <em>Go</em> app)"
      },
      "id": "6043b8f628ccbc48692c609c"
    },
    {
      "sections": [
        "Instrument Go segments",
        "Measure time for functions and code blocks",
        "Block-of-code segments",
        "Function segments",
        "Nest segments",
        "Datastore segments",
        "Use instrumentation package",
        "Important",
        "Use DatastoreSegment",
        "External segments",
        "Use StartExternalSegment()",
        "Use NewRoundTripper()",
        "Message producer segments",
        "Use MessageProducerSegment"
      ],
      "title": "Instrument Go segments",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "4ca52352a98087598f1a5ace76a9d80bf8d20cf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/instrument-go-segments/",
      "published_at": "2021-05-05T07:11:52Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic for Go, you can monitor the specific segments of a transaction in a Go application to get more detail about specific functions or code blocks. Measure time for functions and code blocks Segments are the specific parts of a transaction in an application. By instrumenting segments, you can measure the time taken by functions and code blocks, such as external calls, datastore calls, adding messages to queues, and background tasks. Example: You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You could instrument your application to break that transaction up into two pieces: one segment for shipping and one segment for payment. Block-of-code segments Once you instrument a transaction, you are ready to instrument one or more segments in that transaction. To instrument an arbitrary block of code as a segment, use the following pattern, and include txn as the variable name set for the transaction: segment := newrelic.Segment{} segment.Name = \"mySegmentName\" segment.StartTime = txn.StartSegmentNow() // ... code you want to time here ... segment.End() Copy StartSegment is a convenient helper. It creates a segment and starts it: segment := txn.StartSegment(\"mySegmentName\") // ... code you want to time here ... segment.End() Copy Function segments Instrumenting a function as a segment is essentially the same as instrumenting an arbitrary block of code as a segment. The main difference is that, because a function has a discrete ending, you can use Go's defer statement. To instrument a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(\"mySegmentName\").End() Copy Nest segments Segments can be nested. The segment being ended must be the most recently started segment. Here's an example of a segment starting and ending inside another segment: s1 := txn.StartSegment(\"outerSegment\") s2 := txn.StartSegment(\"innerSegment\") // s2 must end before s1 s2.End() s1.End() Copy A zero value segment may safely be ended. Therefore, the following code is safe even if the conditional fails: var s newrelic.Segment if recordSegment { s.StartTime = txn.StartSegmentNow(), } // ... code you wish to time here ... s.End() Copy Datastore segments You can instrument Go application datastore calls. Datastore segments appear in the APM Transactions breakdown table and Databases tab of the Transactions page in New Relic. If you are using a MySQL, PostgreSQL, or SQLite database driver, the easiest way to add Datastore segments is to use our pre-built integration packages. Otherwise, you can manually create Datastore segments for each database call. Use instrumentation package There is an integration package for each database driver that we support: Database library supported Integration package go-sql-driver/mysql v3/integrations/nrmysql lib/pq v3/integrations/nrpq mattn/go-sqlite3 v3/integrations/nrsqlite3 To use one of these integrations, first replace the driver with our integration version: import ( // import our integration package in place of \"github.com/go-sql-driver/mysql\" _ \"github.com/newrelic/go-agent/v3/integrations/nrmysql\" ) func main() { // open \"nrmysql\" in place of \"mysql\" db, err := sql.Open(\"nrmysql\", \"user@unix(/path/to/socket)/dbname\") } Copy Second, use the ExecContext, QueryContext, and QueryRowContext methods of sql.DB, sql.Conn, sql.Tx, and sql.Stmt and provide a transaction-containing context. Calls to Exec, Query, and QueryRow do not get instrumented. ctx := newrelic.NewContext(context.Background(), txn) row := db.QueryRowContext(ctx, \"SELECT count(*) from tables\") Copy If you are using a database/sql database not listed above, you can write your own instrumentation for it using InstrumentConnector, InstrumentDriver, and DriverSegmentBuilder. The integration packages act as examples of how to do this. Important Datastore integration packages for MySQL, PostgreSQL, and SQLite were added in Go Agent v2.8.0 and require Go v1.10 or above. Use DatastoreSegment Just like basic segments, datastore segments begin when the StartTime field is populated and finish when the End method is called. To instrument a datastore segment, place the following at the beginning of the function you want to monitor: s := newrelic.DatastoreSegment{ Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } s.StartTime = txn.StartSegmentNow() // ... make the datastore call s.End() Copy For more information about: Assigning the Collection, Operation, DatabaseName, and other parameter values: See the New Relic datastore segment documentation on GoDoc. Available values for Product: See the New Relic documentation on GitHub. When instrumenting a datastore call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.DatastoreSegment{ StartTime: txn.StartSegmentNow(), Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } defer s.End() Copy External segments You can instrument Go application calls to external services, such as web services, resources in the cloud, and any other network calls. External segments appear in the APM Transactions breakdown table and the External services page in New Relic. There are two ways to instrument external segments: Use StartExternalSegment() Recommendation: Use the StartExternalSegment helper, since New Relic uses it to trace activity between your applications using cross application tracing. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy Use NewRoundTripper() NewRoundTripper returns an http.RoundTripper, which allows you to instrument external calls without calling StartExternalSegment by modifying your http.Client's Transport field. The RoundTripper returned will look for a Transaction in the request's context using FromContext. Here is an example of NewRoundTripper instrumentation: client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) response, err := client.Do(request) Copy Message producer segments You can instrument Go application calls that add messages to queuing systems like RabbitMQ and Kafka. Message producer segments appear in the APM Transactions breakdown in New Relic. There is only one way to instrument message producer segments: Use MessageProducerSegment Just like basic segments, message producer segments begin when the StartTime field is populated, and finish when the End method is called. To instrument a message producer segment, place the following at the beginning of the function you want to monitor: s := newrelic.MessageProducerSegment{ Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } s.StartTime = txn.StartSegmentNow() // ... add message to queue s.End() Copy For more information about assigning the Library, DestinationType, DestinationName, or DestinationTemporary fields, see the New Relic message producer segment documentation on GoDoc. When instrumenting a message producer call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.MessageProducerSegment{ StartTime: txn.StartSegmentNow(), Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } defer s.End() // ... add message to queue Copy Important Message producer segments were added in Go Agent version 2.14.0.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52742,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> <em>Go</em> segments",
        "sections": "<em>Instrument</em> <em>Go</em> segments",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " is that, because a function has a discrete ending, you can use <em>Go</em>&#x27;s defer statement. To <em>instrument</em> a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(&quot;mySegmentName&quot;).End() Copy Nest segments"
      },
      "id": "6043b78d64441f2285378f25"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-05-05T07:09:56Z",
      "updated_at": "2021-03-11T08:13:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic Insights data requirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52722,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/instrumentation/instrument-go-segments": [
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-05-04T17:02:46Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.99203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Create custom metrics in Go",
        "Create a custom metric",
        "Name a custom metric",
        "For more help"
      ],
      "title": "Create custom metrics in Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "9336bef71f0cac25636bfe0b4392864f3605c6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/create-custom-metrics-go/",
      "published_at": "2021-05-05T07:09:57Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to report any metric that passes through your code. For example, with New Relic's Go monitoring, you can create custom metrics to time a component of your app that may not captured by default. Once you capture a custom metric, you can: Unify your monitoring inside New Relic through the data explorer. Use our REST API to programmatically retrieve and use custom metric data outside of the UI. Create custom metric alert conditions to notify you or your team when your custom metric exceeds specific values. Create a custom metric Instantiate your application by running the following: cfg := newrelic.NewConfig(\"Your App Name\", mustGetEnv(\"NEW_RELIC_LICENSE_KEY\")) cfg.Logger = newrelic.NewDebugLogger(os.Stdout) var err error app, err = newrelic.NewApplication(cfg) Copy After instantiating your app, create a custom metric with the following code: app.RecordCustomMetric( \"CustomMetricName\", //name of your metric 132, //time in ms ); Copy RecordCustomMetric's first parameter is a string that names your custom metric. The RecordCustomMetric method will automatically prepend the string Custom/ to your metric name. This means the above code will generate a metric named Custom/CustomMetricName. RecordCustomMetric's second parameter is the time, in milliseconds, that you want to record for your custom transaction. This means the above code will produce a metric of .132 seconds in New Relic's systems. To use a custom metric as a counter, it can be incremented by making the call as described above, and the count value for that metric will be incremented by 1. The value you use for the second parameter (time in ms) is irrelevant if you are only using the metric as a counter, and thus you can use a static number, such as 0 or 1. To increment a counter by a number greater than 1, call app.RecordCustomMetric multiple times - each call will only increment the metric by 1 no matter what the value of the second parameter is. Name a custom metric Carefully consider how you name your custom metrics. If your program creates too many uniquely-named metrics, you may end up with a metric grouping issue (MGI). MGIs occur when the granularity of metric names is too fine, resulting in hundreds or thousands of different metric names. One common cause of MGIs is relying on the full URL name for metric naming in web transactions. A few major code paths may generate many different full URL paths to unique documents, articles, page, etc. If the unique element of the URL path is included in the metric name, each of these common paths will have its own unique metric name. If metric grouping issues occur, follow the troubleshooting procedures. For more help Additional documentation resources include: New Relic for Go segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) Instrument Go transactions (how to create New Relic transactions in your Go app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom metrics in <em>Go</em>",
        "sections": "Create custom metrics in <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " Additional documentation resources include: New Relic for <em>Go</em> segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) <em>Instrument</em> <em>Go</em> transactions (how to create New Relic transactions in your <em>Go</em> app)"
      },
      "id": "6043b8f628ccbc48692c609c"
    },
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-05-05T07:09:56Z",
      "updated_at": "2021-03-11T08:13:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic Insights data requirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.527214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    }
  ],
  "/docs/agents/go-agent/instrumentation/instrument-go-transactions": [
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-05-04T17:02:46Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.99203,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Create custom metrics in Go",
        "Create a custom metric",
        "Name a custom metric",
        "For more help"
      ],
      "title": "Create custom metrics in Go",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "9336bef71f0cac25636bfe0b4392864f3605c6a8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/create-custom-metrics-go/",
      "published_at": "2021-05-05T07:09:57Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics allow you to report any metric that passes through your code. For example, with New Relic's Go monitoring, you can create custom metrics to time a component of your app that may not captured by default. Once you capture a custom metric, you can: Unify your monitoring inside New Relic through the data explorer. Use our REST API to programmatically retrieve and use custom metric data outside of the UI. Create custom metric alert conditions to notify you or your team when your custom metric exceeds specific values. Create a custom metric Instantiate your application by running the following: cfg := newrelic.NewConfig(\"Your App Name\", mustGetEnv(\"NEW_RELIC_LICENSE_KEY\")) cfg.Logger = newrelic.NewDebugLogger(os.Stdout) var err error app, err = newrelic.NewApplication(cfg) Copy After instantiating your app, create a custom metric with the following code: app.RecordCustomMetric( \"CustomMetricName\", //name of your metric 132, //time in ms ); Copy RecordCustomMetric's first parameter is a string that names your custom metric. The RecordCustomMetric method will automatically prepend the string Custom/ to your metric name. This means the above code will generate a metric named Custom/CustomMetricName. RecordCustomMetric's second parameter is the time, in milliseconds, that you want to record for your custom transaction. This means the above code will produce a metric of .132 seconds in New Relic's systems. To use a custom metric as a counter, it can be incremented by making the call as described above, and the count value for that metric will be incremented by 1. The value you use for the second parameter (time in ms) is irrelevant if you are only using the metric as a counter, and thus you can use a static number, such as 0 or 1. To increment a counter by a number greater than 1, call app.RecordCustomMetric multiple times - each call will only increment the metric by 1 no matter what the value of the second parameter is. Name a custom metric Carefully consider how you name your custom metrics. If your program creates too many uniquely-named metrics, you may end up with a metric grouping issue (MGI). MGIs occur when the granularity of metric names is too fine, resulting in hundreds or thousands of different metric names. One common cause of MGIs is relying on the full URL name for metric naming in web transactions. A few major code paths may generate many different full URL paths to unique documents, articles, page, etc. If the unique element of the URL path is included in the metric name, each of these common paths will have its own unique metric name. If metric grouping issues occur, follow the troubleshooting procedures. For more help Additional documentation resources include: New Relic for Go segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) Instrument Go transactions (how to create New Relic transactions in your Go app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom metrics in <em>Go</em>",
        "sections": "Create custom metrics in <em>Go</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " Additional documentation resources include: New Relic for <em>Go</em> segment documentation on GitHub (more details about instrumenting segments on New Relic GitHub) <em>Instrument</em> <em>Go</em> transactions (how to create New Relic transactions in your <em>Go</em> app)"
      },
      "id": "6043b8f628ccbc48692c609c"
    },
    {
      "sections": [
        "Instrument Go segments",
        "Measure time for functions and code blocks",
        "Block-of-code segments",
        "Function segments",
        "Nest segments",
        "Datastore segments",
        "Use instrumentation package",
        "Important",
        "Use DatastoreSegment",
        "External segments",
        "Use StartExternalSegment()",
        "Use NewRoundTripper()",
        "Message producer segments",
        "Use MessageProducerSegment"
      ],
      "title": "Instrument Go segments",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "4ca52352a98087598f1a5ace76a9d80bf8d20cf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/instrument-go-segments/",
      "published_at": "2021-05-05T07:11:52Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic for Go, you can monitor the specific segments of a transaction in a Go application to get more detail about specific functions or code blocks. Measure time for functions and code blocks Segments are the specific parts of a transaction in an application. By instrumenting segments, you can measure the time taken by functions and code blocks, such as external calls, datastore calls, adding messages to queues, and background tasks. Example: You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You could instrument your application to break that transaction up into two pieces: one segment for shipping and one segment for payment. Block-of-code segments Once you instrument a transaction, you are ready to instrument one or more segments in that transaction. To instrument an arbitrary block of code as a segment, use the following pattern, and include txn as the variable name set for the transaction: segment := newrelic.Segment{} segment.Name = \"mySegmentName\" segment.StartTime = txn.StartSegmentNow() // ... code you want to time here ... segment.End() Copy StartSegment is a convenient helper. It creates a segment and starts it: segment := txn.StartSegment(\"mySegmentName\") // ... code you want to time here ... segment.End() Copy Function segments Instrumenting a function as a segment is essentially the same as instrumenting an arbitrary block of code as a segment. The main difference is that, because a function has a discrete ending, you can use Go's defer statement. To instrument a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(\"mySegmentName\").End() Copy Nest segments Segments can be nested. The segment being ended must be the most recently started segment. Here's an example of a segment starting and ending inside another segment: s1 := txn.StartSegment(\"outerSegment\") s2 := txn.StartSegment(\"innerSegment\") // s2 must end before s1 s2.End() s1.End() Copy A zero value segment may safely be ended. Therefore, the following code is safe even if the conditional fails: var s newrelic.Segment if recordSegment { s.StartTime = txn.StartSegmentNow(), } // ... code you wish to time here ... s.End() Copy Datastore segments You can instrument Go application datastore calls. Datastore segments appear in the APM Transactions breakdown table and Databases tab of the Transactions page in New Relic. If you are using a MySQL, PostgreSQL, or SQLite database driver, the easiest way to add Datastore segments is to use our pre-built integration packages. Otherwise, you can manually create Datastore segments for each database call. Use instrumentation package There is an integration package for each database driver that we support: Database library supported Integration package go-sql-driver/mysql v3/integrations/nrmysql lib/pq v3/integrations/nrpq mattn/go-sqlite3 v3/integrations/nrsqlite3 To use one of these integrations, first replace the driver with our integration version: import ( // import our integration package in place of \"github.com/go-sql-driver/mysql\" _ \"github.com/newrelic/go-agent/v3/integrations/nrmysql\" ) func main() { // open \"nrmysql\" in place of \"mysql\" db, err := sql.Open(\"nrmysql\", \"user@unix(/path/to/socket)/dbname\") } Copy Second, use the ExecContext, QueryContext, and QueryRowContext methods of sql.DB, sql.Conn, sql.Tx, and sql.Stmt and provide a transaction-containing context. Calls to Exec, Query, and QueryRow do not get instrumented. ctx := newrelic.NewContext(context.Background(), txn) row := db.QueryRowContext(ctx, \"SELECT count(*) from tables\") Copy If you are using a database/sql database not listed above, you can write your own instrumentation for it using InstrumentConnector, InstrumentDriver, and DriverSegmentBuilder. The integration packages act as examples of how to do this. Important Datastore integration packages for MySQL, PostgreSQL, and SQLite were added in Go Agent v2.8.0 and require Go v1.10 or above. Use DatastoreSegment Just like basic segments, datastore segments begin when the StartTime field is populated and finish when the End method is called. To instrument a datastore segment, place the following at the beginning of the function you want to monitor: s := newrelic.DatastoreSegment{ Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } s.StartTime = txn.StartSegmentNow() // ... make the datastore call s.End() Copy For more information about: Assigning the Collection, Operation, DatabaseName, and other parameter values: See the New Relic datastore segment documentation on GoDoc. Available values for Product: See the New Relic documentation on GitHub. When instrumenting a datastore call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.DatastoreSegment{ StartTime: txn.StartSegmentNow(), Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } defer s.End() Copy External segments You can instrument Go application calls to external services, such as web services, resources in the cloud, and any other network calls. External segments appear in the APM Transactions breakdown table and the External services page in New Relic. There are two ways to instrument external segments: Use StartExternalSegment() Recommendation: Use the StartExternalSegment helper, since New Relic uses it to trace activity between your applications using cross application tracing. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy Use NewRoundTripper() NewRoundTripper returns an http.RoundTripper, which allows you to instrument external calls without calling StartExternalSegment by modifying your http.Client's Transport field. The RoundTripper returned will look for a Transaction in the request's context using FromContext. Here is an example of NewRoundTripper instrumentation: client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) response, err := client.Do(request) Copy Message producer segments You can instrument Go application calls that add messages to queuing systems like RabbitMQ and Kafka. Message producer segments appear in the APM Transactions breakdown in New Relic. There is only one way to instrument message producer segments: Use MessageProducerSegment Just like basic segments, message producer segments begin when the StartTime field is populated, and finish when the End method is called. To instrument a message producer segment, place the following at the beginning of the function you want to monitor: s := newrelic.MessageProducerSegment{ Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } s.StartTime = txn.StartSegmentNow() // ... add message to queue s.End() Copy For more information about assigning the Library, DestinationType, DestinationName, or DestinationTemporary fields, see the New Relic message producer segment documentation on GoDoc. When instrumenting a message producer call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.MessageProducerSegment{ StartTime: txn.StartSegmentNow(), Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } defer s.End() // ... add message to queue Copy Important Message producer segments were added in Go Agent version 2.14.0.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.52741,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> <em>Go</em> segments",
        "sections": "<em>Instrument</em> <em>Go</em> segments",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " is that, because a function has a discrete ending, you can use <em>Go</em>&#x27;s defer statement. To <em>instrument</em> a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(&quot;mySegmentName&quot;).End() Copy Nest segments"
      },
      "id": "6043b78d64441f2285378f25"
    }
  ],
  "/docs/agents/go-agent/troubleshooting/no-data-appears-go": [
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "78afde07a4ba5544693cf4465a6e4add240ca2be",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-05-05T07:18:25Z",
      "updated_at": "2021-04-28T05:13:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with your New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels := map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom Insights events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.42845,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> configuration",
        "sections": "<em>Go</em> <em>agent</em> configuration",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " with <em>Go</em> <em>agent</em> versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all <em>agents</em> even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options"
      },
      "id": "6043f24028ccbcbed32c609e"
    },
    {
      "sections": [
        "Go agent logging",
        "Write log files",
        "Logrus integration example",
        "For more help"
      ],
      "title": "Go agent logging",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "3eca4ea8f4b58b64841e4c465cbacde5c897de10",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-logging/",
      "published_at": "2021-05-05T07:20:18Z",
      "updated_at": "2021-03-11T12:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go logging uses the standard Go log package and a New Relic Logger package. Logging is useful for troubleshooting your New Relic integration; for example, with installation or configuration problems. Write log files To use the Go agent methods for writing log and audit files, see log.go on the agent GitHub repo. Logrus integration example New Relic offers an integration for the Logrus logging system. Here is an example of using the New Relic Logrus integration in an application: Import both github.com/sirupsen/logrus and github.com/newrelic/go-agent/v3/integrations/nrlogrus. Set the log level and assign the Logger output to Logrus. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { logrus.SetLevel(logrus.DebugLevel) config.Logger = nrlogrus.StandardLogger() }, ) Copy For more help For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.615395,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> logging",
        "sections": "<em>Go</em> <em>agent</em> logging",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "New Relic for <em>Go</em> logging uses the standard <em>Go</em> log package and a New Relic Logger package. Logging is useful for <em>troubleshooting</em> your New Relic integration; for example, with installation or configuration problems. Write log files To use the <em>Go</em> <em>agent</em> methods for writing log and audit files, see"
      },
      "id": "6043f284196a67c735960f7f"
    },
    {
      "sections": [
        "Go runtime page: Troubleshoot performance problems",
        "View and filter Go runtime data",
        "Go runtime charts"
      ],
      "title": "Go runtime page: Troubleshoot performance problems",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "de13cce9b7e936dd86b266c3bae1b031a2343aa2",
      "image": "https://docs.newrelic.com/static/1eae071363cd2ce3e57467c3d1cce83f/c1b63/go-runtime.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems/",
      "published_at": "2021-05-05T07:16:57Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM user interface provides a variety of data about your app, including special features for the Go agent for APM. In addition, the Go runtime page provides important runtime data useful for troubleshooting performance issues. View and filter Go runtime data To view the Go runtime page, go to one.newrelic.com > APM > (select an app) > Go runtime. Go runtime charts This table describes the Go runtime page chart data. Chart name Description Goroutines A count of the average number of goroutines running during a given time slice. GC pause time Milliseconds spent in stop-the-world garbage collection. GC pause frequency Calls per minute of stop-the-world garbage collection. GC pauses The percentage of wall-clock time spent in stop-the-world garbage collection. CPU utilization CPU utilization as a percentage of available CPU. Memory Average memory used, in mebibytes, during a given time slice.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.039566,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> runtime page: <em>Troubleshoot</em> performance problems",
        "sections": "<em>Go</em> runtime page: <em>Troubleshoot</em> performance problems",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The APM user interface provides a variety of data about your app, including special features for the <em>Go</em> <em>agent</em> for APM. In addition, the <em>Go</em> runtime page provides important runtime data useful for <em>troubleshooting</em> performance issues. View and filter <em>Go</em> runtime data To view the <em>Go</em> runtime page, <em>go</em>"
      },
      "id": "603ecf06e7b9d25d8a2a07c9"
    }
  ],
  "/docs/agents/java-agent/additional-installation/aws-elastic-beanstalk-installation-java": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Tip",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-05-04T17:59:15Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Tip To use Java or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI Complete the following: Log in to New Relic. From the account dropdown in the New Relic UI, select Account settings. In the right sidebar under Most recent, select the Java agent, and save the newrelic-java.zip to a temporary directory. Unzip newrelic-java.zip. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report on any data in your New Relic Account. To copy your license key: Go to one.newrelic.com > (account dropdown) > Account settings. Under Account information, copy the license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.51318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains a basic <em>installation</em> of the APM <em>agent</em> for <em>Java</em> applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-05-05T00:37:37Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.51318,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    },
    {
      "sections": [
        "Install New Relic Java agent with Ansible",
        "Compatibility and requirements",
        "Overview of process",
        "Step 1. Install the role",
        "Step 2. Incorporate the role into playbook",
        "Step 3. Configure the role",
        "Step 4. Configure the agent",
        "Step 5. Enable custom instrumentation (optional)",
        "For more help"
      ],
      "title": "Install New Relic Java agent with Ansible",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "328592f6b75e0eb638a0916082e034bb9782cad7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-ansible/",
      "published_at": "2021-05-05T06:55:40Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM for Java allows you to use an Ansible role for installation and configuration. Compatibility and requirements New Relic's Ansible role for the Java agent is open source and community-supported. It supports setting up our Java agent to instrument applications running under Tomcat, Jetty, and Wildfly (formerly JBoss) on Linux servers. The most common agent parameters can be configured through Ansible variables. You'll need to install Ansible to run this role. Ansible is run from a central server to configure target hosts; these hosts must be running Linux and have unzip installed. The role should be compatible with most popular Linux distributions. Overview of process There are several steps that may be involved for installation and configuration: Install the role Incorporate role in your playbook Configure the role Configure the agent Enable custom instrumentation (optional) Step 1. Install the role To install this role, use the ansible-galaxy command on the system where you run Ansible: $ ansible-galaxy install newrelic.newrelic_java_agent Copy This will download the role from Ansible Galaxy and make it available for use in Ansible playbooks. Step 2. Incorporate the role into playbook You'll need to call the role from your playbook using the include_role module. The role's GitHub repository contains an example playbook for you to start from, which looks like this: - hosts: YOUR_HOST_GROUP vars: nr_java_agent_config: license_key: YOUR_LICENSE_KEY app_name: YOUR_APP_NAME log_file_path: /tmp/newrelic server_type: tomcat server_root: /var/lib/tomcat8 jvm_conf_file: /usr/share/tomcat8/bin/setenv.sh server_user: tomcat8 server_group: tomcat8 service_name: tomcat8 restart_web_server: true tasks: - include_role: name: newrelic.newrelic_java_agent Copy The vars section contains a dictionary called nr_java_agent_config, which holds settings for the agent itself, and a number of variables for configuring the role's installation process. See the sections on agent configuration and role configuration for details. Step 3. Configure the role These variables are used to configure the install process. Most are required. For more information, see the examples on GitHub. Variable Description server_type Required. Web server used by your application. Possible values are: tomcat, jetty, and wildfly (standalone mode only). server_root Required. Location of the web server on the host. The agent's JAR, configuration, and (by default) log files will live in a subdirectory of this directory. jvm_conf_file Required. Path to the web server configuration file to reference the New Relic Java agent. For Tomcat, for instance, it's typically the setenv.sh file. If the file doesn't exist, it may be created, depending on the server_type. server_user server_group Required. User and group under which the web server runs. Used to set the ownership of the newrelic.jar and newrelic.yml files. restart_web_server Optional. Default: true. If set to false, the role does not restart the web server after installing the agent. Note that the agent is not activated until the web server is restarted. service_name Required (unless restart_web_server is set to false). Service name under which the web server runs. Used by Ansible to restart the web server after the agent is installed. nr_java_agent_version Optional; default: currentSpecifies the version of the Java agent to install. current will install the latest version. You can also install a specific version, like 5.9.0. For available versions, see Java agent downloads directory. Step 4. Configure the agent The following variables are used to configure the Java agent itself. These are just a few of the available options. For a full list of supported variables, see the README file on GitHub. For more about how to configure the agent, see Java agent configuration. Variable Description license_key Required. Your New Relic license key. app_name Required. Name of the application being instrumented. For more details, see App naming. proxy_host proxy_port proxy_user proxy_password proxy_scheme Optional. If you connect to the New Relic collector via a proxy, you can configure your proxy settings with these values. labels Optional. User-configurable custom labels for the agent. Labels are name-value pairs. Names and values are limited to 255 characters and cannot contain colons (:) nor semicolons (;). Value should be a semicolon-separated list of key-value pairs, for example Server:One;Data Center:Primary. Step 5. Enable custom instrumentation (optional) If you want to enable custom instrumentation, you can provide a list of XML files using the custom_instrumentation_files variable. For instance, you can specify that all Java agents being installed should use a file called my_instrumentation.xml by adding something like the following to your playbook: vars: custom_instrumentation_files: - /path/to/my_instrumentation.xml Copy See the README and examples on GitHub for more information. For more help If you need additional help, file an issue at newrelic/newrelic-java-agent-ansible-role on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.51294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> with Ansible",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> with Ansible",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "APM for <em>Java</em> allows you to use an Ansible role for <em>installation</em> and configuration. Compatibility and requirements New Relic&#x27;s Ansible role for the <em>Java</em> <em>agent</em> is open source and community-supported. It supports setting up our <em>Java</em> <em>agent</em> to instrument applications running under Tomcat, Jetty"
      },
      "id": "603e92dce7b9d2a5d32a080c"
    }
  ],
  "/docs/agents/java-agent/additional-installation/ibm-websphere-application-server": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Tip",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-05-04T17:59:15Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Tip To use Java or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI Complete the following: Log in to New Relic. From the account dropdown in the New Relic UI, select Account settings. In the right sidebar under Most recent, select the Java agent, and save the newrelic-java.zip to a temporary directory. Unzip newrelic-java.zip. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report on any data in your New Relic Account. To copy your license key: Go to one.newrelic.com > (account dropdown) > Account settings. Under Account information, copy the license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.513176,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains a basic <em>installation</em> of the APM <em>agent</em> for <em>Java</em> applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-05-05T00:37:37Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.513176,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    },
    {
      "sections": [
        "Install New Relic Java agent with Ansible",
        "Compatibility and requirements",
        "Overview of process",
        "Step 1. Install the role",
        "Step 2. Incorporate the role into playbook",
        "Step 3. Configure the role",
        "Step 4. Configure the agent",
        "Step 5. Enable custom instrumentation (optional)",
        "For more help"
      ],
      "title": "Install New Relic Java agent with Ansible",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "328592f6b75e0eb638a0916082e034bb9782cad7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-ansible/",
      "published_at": "2021-05-05T06:55:40Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM for Java allows you to use an Ansible role for installation and configuration. Compatibility and requirements New Relic's Ansible role for the Java agent is open source and community-supported. It supports setting up our Java agent to instrument applications running under Tomcat, Jetty, and Wildfly (formerly JBoss) on Linux servers. The most common agent parameters can be configured through Ansible variables. You'll need to install Ansible to run this role. Ansible is run from a central server to configure target hosts; these hosts must be running Linux and have unzip installed. The role should be compatible with most popular Linux distributions. Overview of process There are several steps that may be involved for installation and configuration: Install the role Incorporate role in your playbook Configure the role Configure the agent Enable custom instrumentation (optional) Step 1. Install the role To install this role, use the ansible-galaxy command on the system where you run Ansible: $ ansible-galaxy install newrelic.newrelic_java_agent Copy This will download the role from Ansible Galaxy and make it available for use in Ansible playbooks. Step 2. Incorporate the role into playbook You'll need to call the role from your playbook using the include_role module. The role's GitHub repository contains an example playbook for you to start from, which looks like this: - hosts: YOUR_HOST_GROUP vars: nr_java_agent_config: license_key: YOUR_LICENSE_KEY app_name: YOUR_APP_NAME log_file_path: /tmp/newrelic server_type: tomcat server_root: /var/lib/tomcat8 jvm_conf_file: /usr/share/tomcat8/bin/setenv.sh server_user: tomcat8 server_group: tomcat8 service_name: tomcat8 restart_web_server: true tasks: - include_role: name: newrelic.newrelic_java_agent Copy The vars section contains a dictionary called nr_java_agent_config, which holds settings for the agent itself, and a number of variables for configuring the role's installation process. See the sections on agent configuration and role configuration for details. Step 3. Configure the role These variables are used to configure the install process. Most are required. For more information, see the examples on GitHub. Variable Description server_type Required. Web server used by your application. Possible values are: tomcat, jetty, and wildfly (standalone mode only). server_root Required. Location of the web server on the host. The agent's JAR, configuration, and (by default) log files will live in a subdirectory of this directory. jvm_conf_file Required. Path to the web server configuration file to reference the New Relic Java agent. For Tomcat, for instance, it's typically the setenv.sh file. If the file doesn't exist, it may be created, depending on the server_type. server_user server_group Required. User and group under which the web server runs. Used to set the ownership of the newrelic.jar and newrelic.yml files. restart_web_server Optional. Default: true. If set to false, the role does not restart the web server after installing the agent. Note that the agent is not activated until the web server is restarted. service_name Required (unless restart_web_server is set to false). Service name under which the web server runs. Used by Ansible to restart the web server after the agent is installed. nr_java_agent_version Optional; default: currentSpecifies the version of the Java agent to install. current will install the latest version. You can also install a specific version, like 5.9.0. For available versions, see Java agent downloads directory. Step 4. Configure the agent The following variables are used to configure the Java agent itself. These are just a few of the available options. For a full list of supported variables, see the README file on GitHub. For more about how to configure the agent, see Java agent configuration. Variable Description license_key Required. Your New Relic license key. app_name Required. Name of the application being instrumented. For more details, see App naming. proxy_host proxy_port proxy_user proxy_password proxy_scheme Optional. If you connect to the New Relic collector via a proxy, you can configure your proxy settings with these values. labels Optional. User-configurable custom labels for the agent. Labels are name-value pairs. Names and values are limited to 255 characters and cannot contain colons (:) nor semicolons (;). Value should be a semicolon-separated list of key-value pairs, for example Server:One;Data Center:Primary. Step 5. Enable custom instrumentation (optional) If you want to enable custom instrumentation, you can provide a list of XML files using the custom_instrumentation_files variable. For instance, you can specify that all Java agents being installed should use a file called my_instrumentation.xml by adding something like the following to your playbook: vars: custom_instrumentation_files: - /path/to/my_instrumentation.xml Copy See the README and examples on GitHub for more information. For more help If you need additional help, file an issue at newrelic/newrelic-java-agent-ansible-role on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.51293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> with Ansible",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> with Ansible",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "APM for <em>Java</em> allows you to use an Ansible role for <em>installation</em> and configuration. Compatibility and requirements New Relic&#x27;s Ansible role for the <em>Java</em> <em>agent</em> is open source and community-supported. It supports setting up our <em>Java</em> <em>agent</em> to instrument applications running under Tomcat, Jetty"
      },
      "id": "603e92dce7b9d2a5d32a080c"
    }
  ],
  "/docs/agents/java-agent/additional-installation/install-java-agent-using-gradle": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Tip",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-05-04T17:59:15Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Tip To use Java or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI Complete the following: Log in to New Relic. From the account dropdown in the New Relic UI, select Account settings. In the right sidebar under Most recent, select the Java agent, and save the newrelic-java.zip to a temporary directory. Unzip newrelic-java.zip. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report on any data in your New Relic Account. To copy your license key: Go to one.newrelic.com > (account dropdown) > Account settings. Under Account information, copy the license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.513176,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains a basic <em>installation</em> of the APM <em>agent</em> for <em>Java</em> applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-05-05T00:37:37Z",
      "updated_at": "2021-03-16T14:29:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.513176,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    },
    {
      "sections": [
        "Install New Relic Java agent with Ansible",
        "Compatibility and requirements",
        "Overview of process",
        "Step 1. Install the role",
        "Step 2. Incorporate the role into playbook",
        "Step 3. Configure the role",
        "Step 4. Configure the agent",
        "Step 5. Enable custom instrumentation (optional)",
        "For more help"
      ],
      "title": "Install New Relic Java agent with Ansible",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "328592f6b75e0eb638a0916082e034bb9782cad7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-ansible/",
      "published_at": "2021-05-05T06:55:40Z",
      "updated_at": "2021-03-16T14:28:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM for Java allows you to use an Ansible role for installation and configuration. Compatibility and requirements New Relic's Ansible role for the Java agent is open source and community-supported. It supports setting up our Java agent to instrument applications running under Tomcat, Jetty, and Wildfly (formerly JBoss) on Linux servers. The most common agent parameters can be configured through Ansible variables. You'll need to install Ansible to run this role. Ansible is run from a central server to configure target hosts; these hosts must be running Linux and have unzip installed. The role should be compatible with most popular Linux distributions. Overview of process There are several steps that may be involved for installation and configuration: Install the role Incorporate role in your playbook Configure the role Configure the agent Enable custom instrumentation (optional) Step 1. Install the role To install this role, use the ansible-galaxy command on the system where you run Ansible: $ ansible-galaxy install newrelic.newrelic_java_agent Copy This will download the role from Ansible Galaxy and make it available for use in Ansible playbooks. Step 2. Incorporate the role into playbook You'll need to call the role from your playbook using the include_role module. The role's GitHub repository contains an example playbook for you to start from, which looks like this: - hosts: YOUR_HOST_GROUP vars: nr_java_agent_config: license_key: YOUR_LICENSE_KEY app_name: YOUR_APP_NAME log_file_path: /tmp/newrelic server_type: tomcat server_root: /var/lib/tomcat8 jvm_conf_file: /usr/share/tomcat8/bin/setenv.sh server_user: tomcat8 server_group: tomcat8 service_name: tomcat8 restart_web_server: true tasks: - include_role: name: newrelic.newrelic_java_agent Copy The vars section contains a dictionary called nr_java_agent_config, which holds settings for the agent itself, and a number of variables for configuring the role's installation process. See the sections on agent configuration and role configuration for details. Step 3. Configure the role These variables are used to configure the install process. Most are required. For more information, see the examples on GitHub. Variable Description server_type Required. Web server used by your application. Possible values are: tomcat, jetty, and wildfly (standalone mode only). server_root Required. Location of the web server on the host. The agent's JAR, configuration, and (by default) log files will live in a subdirectory of this directory. jvm_conf_file Required. Path to the web server configuration file to reference the New Relic Java agent. For Tomcat, for instance, it's typically the setenv.sh file. If the file doesn't exist, it may be created, depending on the server_type. server_user server_group Required. User and group under which the web server runs. Used to set the ownership of the newrelic.jar and newrelic.yml files. restart_web_server Optional. Default: true. If set to false, the role does not restart the web server after installing the agent. Note that the agent is not activated until the web server is restarted. service_name Required (unless restart_web_server is set to false). Service name under which the web server runs. Used by Ansible to restart the web server after the agent is installed. nr_java_agent_version Optional; default: currentSpecifies the version of the Java agent to install. current will install the latest version. You can also install a specific version, like 5.9.0. For available versions, see Java agent downloads directory. Step 4. Configure the agent The following variables are used to configure the Java agent itself. These are just a few of the available options. For a full list of supported variables, see the README file on GitHub. For more about how to configure the agent, see Java agent configuration. Variable Description license_key Required. Your New Relic license key. app_name Required. Name of the application being instrumented. For more details, see App naming. proxy_host proxy_port proxy_user proxy_password proxy_scheme Optional. If you connect to the New Relic collector via a proxy, you can configure your proxy settings with these values. labels Optional. User-configurable custom labels for the agent. Labels are name-value pairs. Names and values are limited to 255 characters and cannot contain colons (:) nor semicolons (;). Value should be a semicolon-separated list of key-value pairs, for example Server:One;Data Center:Primary. Step 5. Enable custom instrumentation (optional) If you want to enable custom instrumentation, you can provide a list of XML files using the custom_instrumentation_files variable. For instance, you can specify that all Java agents being installed should use a file called my_instrumentation.xml by adding something like the following to your playbook: vars: custom_instrumentation_files: - /path/to/my_instrumentation.xml Copy See the README and examples on GitHub for more information. For more help If you need additional help, file an issue at newrelic/newrelic-java-agent-ansible-role on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.51293,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> with Ansible",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> with Ansible",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "APM for <em>Java</em> allows you to use an Ansible role for <em>installation</em> and configuration. Compatibility and requirements New Relic&#x27;s Ansible role for the <em>Java</em> <em>agent</em> is open source and community-supported. It supports setting up our <em>Java</em> <em>agent</em> to instrument applications running under Tomcat, Jetty"
      },
      "id": "603e92dce7b9d2a5d32a080c"
    }
  ]
}