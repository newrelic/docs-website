---
title: "NerdGraph tutorial: Create custom role for Teams"
tags:
  - Teams
  - APIs
  - NerdGraph
  - Examples
  - Custom roles
metaDescription: How to use New Relic NerdGraph API to create a custom role to create and manage Teams.
freshnessValidatedDate: never
---

<Callout title="preview">
    We're still working on this feature, but we'd love for you to try it out!

    This feature is currently provided as part of a preview program pursuant to our [pre-release policies](/docs/licenses/license-information/referenced-policies/new-relic-pre-release-policy).
</Callout>


New Relic Teams lets you connect the entities you're monitoring to the Teams who own them. When you can easily see who owns an entity, you can speed up troubleshooting, enhance team collaboration, and improve your operational efficiency.

We have given access to Teams to these standard roles:
* **Read Access: **All users have read access to Teams, including metadata such as contact information, team members, and other relevant details.
* **Modify Teams: **Users with the **Organization Product Admin** role can modify Teams. This is a new role assigned to all users who currently have the **All Product Admin role**.
* **Create & Delete Teams: **Users with **Organization Manager** or **Authentication Manager** roles can create and delete Teams.


This section provides instructions on using NerdGraph GraphQL mutations to create a custom role for managing Teams.

To create a Teams administrator custom role, you need to:

* [Retrieve all the organization-scoped capabilities](#retrieve-organization-scoped-capabilities)
* [Retrieve your organization ID](#retrieve-your-organization-id)
* Find the required permission IDs for Teams
* [Create the custom role for Teams administrator](#create-custom-role)
* [Add the custom role to a user group](#add-custom-role-to-a-user-group)


**Prerequisites:**

* [General NerdGraph requirements](/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/#authentication)
* You must be an Organization Admin to create a custom role.


## Mutations [#mutations]

New Relic provides various NerdGraph mutations to create custom role for Team managers.

<CollapserGroup>
  <Collapser 
      id="retrieve-organization-scoped-capabilities"
      title="Retrieve organization-scoped capabilities">
    Use the `customerAdministration` mutation to retrieve a list of capabilities, their permission IDâ€™s, and related information.


    #### Input parameters

    <table>
      <thead>
        <tr>
          <th>Parameter</th>
          <th>Data Type</th>
          <th>Is it Required?</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>`eq`</td>
          <td>String</td>
          <td>Yes</td>
          <td>Set the value to `organization` to retrieve role for Teams.</td>
        </tr>
      </tbody>
    </table>

    #### Sample request

    ```graphql
      {
      customerAdministration {
        permissions(filter: {scope: {eq: "organization"}}) {
            items {
              feature
              category
              id
              product
            }
          }
        }
      }

    ```

    #### Sample response

      ```graphql
      {
        "data": {
          "customerAdministration": {
            "permissions": {
              "items": [
                {
                  "category": "READ",
                  "feature": "Teams",
                  "id": "xxxxx",
                  "product": "New Relic One"
                },
                {
                  "category": "OTHER",
                  "feature": "Teams",
                  "id": "xxxxxx",
                  "product": "New Relic One"
                },
                {
                  "category": "DELETE",
                  "feature": "Teams",
                  "id": "xxxxx",
                  "product": "New Relic One"
                },
                {
                  "category": "MODIFY",
                  "feature": "Teams",
                  "id": "xxxxxx",
                  "product": "New Relic One"
                }
              ]
            }
          }
        }
      }

    ```

Copy and paste the information related to Teams in a text file matching the following criteria:
* `category: MANAGE`
* `"feature"``: "Teams"`



  </Collapser>
  <Collapser 
    id="retrieve-your-organization-id"
    title="Retrieve your organization ID">

Fetch your organization ID to use in various mutations further.


#### Sample request

```graphql
  {
  actor {
    organization {
      id
      }
    }
  }

  ```

  #### Sample response

  ```graphql
  {
    "data": {
      "actor": {
        "organization": {
          "id": "xxx****xxx-xx**00**-xxx-x*x*-xx**XXX**XX"
        }
      }
    }
  }

  ```

Copy the organization ID and keep it aside to create a role.

  </Collapser>
  <Collapser 
    id="create-custom-role"
    title="Create custom role">

Run the `customRoleCreate` mutation to create your own custom role.


#### Input parameters

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Data Type</th>
      <th>Is it Required?</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`id`</td>
      <td>String</td>
      <td>Yes</td>
      <td>The organization ID copied in the previous step.</td>
    </tr>
    <tr>
      <td>`type`</td>
      <td>String</td>
      <td>Yes</td>
      <td>Set the type to `organization`.</td>
    </tr>
    <tr>
      <td>`name`</td>
      <td>String</td>
      <td>Yes</td>
      <td>The name of the role.</td>
    </tr>
    <tr>
      <td>`PermissionId`</td>
      <td>Int</td>
      <td>Yes</td>
      <td>List the ID's for the feature retrieved using `customerAdministration` mutations for Teams.</td>
    </tr>
    <tr>
      <td>`scope`</td>
      <td>String</td>
      <td>Yes</td>
      <td>Set the scope to `organization`.</td>
    </tr>
  </tbody>
</table>

#### Sample request

```graphql

mutation {
  customRoleCreate(
    container: {id: "xxx****xxx-xx**00**-xxx-x*x*-xx**XXX**XX", type: "organization"}
    name: "Teams manager"
    permissionIds: [xxxxx, xxxxx]
    scope: "organization"
  ) {
    id
  }
}

```
#### Sample response

```graphql

{
  "data": {
    "customRoleCreate": {
      "id": 9999999
    }
  }
}

```

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Data Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`id`</td>
      <td>Int</td>
      <td>The custom role ID. Copy and keep this ID for future use.</td>
    </tr>
  </tbody>
</table>

  </Collapser>

  <Collapser 
    id="add-custom-role-to-a-user-group"
    title="Add custom role to a user group">

After you have created the custom role, you must associate this role with a user group on the New Relic platform.  

### Fetch the group ID

You can use `customerAdministration` mutation to retrieve the list of group ID's.


#### Input parameters

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Data Type</th>
      <th>Is it Required?</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`id`</td>
      <td>String</td>
      <td>Yes</td>
      <td>The organization ID copied in the previous step.</td>
    </tr>
  </tbody>
</table>

#### Sample request

```graphql

{
  customerAdministration {
    groups(filter: {organizationId: {eq: "xxx****xxx-xx**00**-xxx-x*x*-xx**XXX**XX"}}) {
      nextCursor
      items {
        id
        name
        users {
          items {
            id
            email
          }
        }
      }
    }
  }
}

```

From the displayed list of group IDs, copy the desired group ID to associate the custom Scorecard role you created earlier. 
  
### Add the rule to a user group

You can use `authorizationManagementGrantAccess` mutation to add the role to a user group.


#### Input parameters

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Data Type</th>
      <th>Is it Required?</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`roleId`</td>
      <td>String</td>
      <td>Yes</td>
      <td>The custom role ID created in the [Custom role]() section.</td>
    </tr>
    <tr>
      <td>`groupId`</td>
      <td>String</td>
      <td>No</td>
      <td>The group ID retrieved in the previous step.</td>
    </tr>
  </tbody>
</table>

#### Sample request

```graphql
mutation {
  authorizationManagementGrantAccess(
    grantAccessOptions: {organizationAccessGrants: {roleId: "99999999"}, groupId: "xxx****xxx-xx**00**-xxx-x*x*-xx**XXX**XX"}
  ) {
    roles {
      id
      name
      organizationId
      roleId
      groupId
      displayName
    }
  }
}

```

#### Sample response

```graphql
{
  "data": {
    "authorizationManagementGrantAccess": {
      "roles": [
        {
          "displayName": "Teams manager",
          "groupId": null,
          "id": "99999999",
          "name": "teams_manager",
          "organizationId": "xxx****xxx-xx**00**-xxx-x*x*-xx**XXX**XX",
          "roleId": 99999
        }
      ]
    }
  }
}

```
  </Collapser>
</CollapserGroup>
