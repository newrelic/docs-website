name: Final Netlify build manual deploy comment #temp name

on:
  issue_comment:
    types: [created]

jobs:
  deploy-preview:
    # when a contributor comments 'netlify build',
    # but only on pull requests, not issues.
    if: |
      github.event.comment.body == 'netlify build'
      && github.event.issue.pull_request
    runs-on: ubuntu-latest

    steps:
      - name: Check for member permission
        env:
          GH_TOKEN: ${{ secrets.DOCS_ENG_TEAM_MEMBERSHIP_CHECKER }}
        id: check_permission
        uses: actions/github-script@v7
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            const org = context.repo.owner;
            const team_slugs = ['docs-eng', 'DOCS-ENG', 'third-team']; // <-- add your team slugs here

            console.log(`Organization: ${org}`);
            console.log(`Commenter: ${commenter}`);

            // List all teams where the commenter is a member
            async function listUserTeams() {
              try {
                const teams = await github.paginate(github.rest.teams.listForAuthenticatedUser, {});
                const userTeams = teams.filter(team => team.organization.login.toLowerCase() === org.toLowerCase());
                if (userTeams.length === 0) {
                  console.log(`${commenter} is not a member of any team in org ${org}.`);
                } else {
                  console.log(`${commenter} is a member of the following teams in ${org}:`);
                  userTeams.forEach(team => {
                    console.log(`- ${team.slug} (${team.name})`);
                  });
                }
              } catch (err) {
                console.log(`Could not list teams for user ${commenter}: ${err.message}`);
              }
            }

            await listUserTeams();

            async function isMemberOfAnyTeam() {
              for (const team_slug of team_slugs) {
                console.log(`Checking team_slug: ${team_slug}`);
                try {
                  const response = await github.rest.teams.getMembershipForUserInOrg({
                    org,
                    team_slug,
                    username: commenter,
                  });
                  console.log(`API response for team_slug ${team_slug}:`, JSON.stringify(response.data, null, 2));
                  if (response.data.state === 'active') {
                    console.log(`${commenter} is an active member of the ${team_slug} team.`);
                    return true;
                  }
                } catch (error) {
                  console.log(`Error object for team_slug ${team_slug}:`, JSON.stringify(error, Object.getOwnPropertyNames(error)));
                  if (error.status !== 404) {
                    console.log(`Error checking team_slug ${team_slug}: ${error.message}`);
                    core.setFailed(`Could not verify team membership for ${team_slug}: ${error.message}`);
                    return false;
                  }
                  // If 404, user is not in this team, continue to next
                  console.log(`${commenter} is not a member of ${team_slug} (404)`);
                }
              }
              return false;
            }

            // Properly await the async function
            const isMember = await isMemberOfAnyTeam();
            if (!isMember) {
              core.setFailed(`${commenter} is not a member of any required team (${team_slugs.join(', ')})`);
            } else {
              console.log(`✅ ${commenter} is authorized to trigger builds`);
            }
        

      # we use `jq` to parse the GH API response
      - name: setup jq
        uses: dcarbone/install-jq-action@v2

      - name: send request to Netlify build hook
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh_api_url=$(echo ${{ github.event.issue.pull_request.url || github.event.pull_request.url }} | sed 's/https:\/\/api.github.com//')
          gh_api_response=$(gh api $gh_api_url)
          branch_name=$(echo $gh_api_response | jq -r .head.ref)
          sha=$(echo $gh_api_response | jq -r .head.sha)
          pr_number=$(echo $gh_api_response | jq -r .number)

          curl -X POST \
          "https://api.netlify.com/build_hooks/${{ secrets.NETLIFY_BUILD_HOOK_ID }}?trigger_branch=$branch_name"'&trigger_title=Manual+deploy+preview+for+PR+%23'"$pr_number"'+-+'"$sha"

      - name: comment for Netlify to update with preview URL
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ### <span aria-hidden="true">⏳</span> Netlify Preview Deployment Information

            This comment will auto update when your preview build is ready
          comment_tag: manual-build-comment
